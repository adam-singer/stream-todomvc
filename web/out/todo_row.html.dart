// Auto-generated from todo_row.html.
// DO NOT EDIT.

library todo_row;

import 'dart:html' as autogenerated;
import 'dart:svg' as autogenerated_svg;
import 'package:web_ui/web_ui.dart' as autogenerated;
import 'package:web_ui/observe/observable.dart' as __observe;
import 'editable_label.html.dart';
import 'package:web_ui/web_ui.dart';
import 'model.dart';



  @observable
  class TodoRow extends WebComponent  implements Observable{
  /** Autogenerated from the template. */

  /** CSS class constants. */
  static Map<String, String> _css = {".toggle":"todo-row_toggle",".todo-item":"todo-row_todo-item",".editing":"todo-row_editing",".destroy":"todo-row_destroy",".completed":"todo-row_completed","#todo-item":"todo-row_todo-item"};

  /**
   * Shadow root for this component. We use 'var' to allow simulating shadow DOM
   * on browsers that don't support this feature.
   */
  var _root;
  static final __shadowTemplate = new autogenerated.DocumentFragment.html('''
    
    <div class="todo-row_todo-item" id="__e-12">
      <input class="todo-row_toggle" type="checkbox" id="__e-10">
      <editable-label id="label"></editable-label>
      <button class="todo-row_destroy" id="__e-11"></button>
    </div>
  ''');
  autogenerated.ButtonElement __e11;
  autogenerated.DivElement __e12;
  autogenerated.InputElement __e10;
  autogenerated.Template __t;
  autogenerated.UnknownElement __label;

  TodoRow.forElement(e) : super.forElement(e);

  void created_autogenerated() {
    _root = createShadowRoot();
    __t = new autogenerated.Template(_root);
    if (_root is autogenerated.ShadowRoot) _root.applyAuthorStyles = true;
    _root.nodes.add(__shadowTemplate.clone(true));
    __e12 = _root.query('#__e-12');
    __e10 = __e12.query('#__e-10');
    __t.listen(__e10.onChange, ($event) { todo.done = __e10.checked; });
    __t.oneWayBind(() => todo.done, (e) { __e10.checked = e; }, false, false);
    __label = __e12.query('#label');
    __t.oneWayBind(() => todo.task, (e) { __label.xtag.value = e; }, false, false);
    __t.oneWayBind(() => __label.xtag.value, (__e) { todo.task = __e; }, false);
    __t.component(new EditableLabel.forElement(__label));
    __e11 = __e12.query('#__e-11');
    __t.listen(__e11.onClick, ($event) { app.removeTodo(todo); });
    __t.bindClass(__e12, () => _editingClass, false);
    __t.bindClass(__e12, () => _completedClass, false);
    __t.create();
  }

  void inserted_autogenerated() {
    __t.insert();
  }

  void removed_autogenerated() {
    __t.remove();
    __t = __e12 = __e10 = __label = __e11 = null;
  }

  void composeChildren() {
    super.composeChildren();
    if (_root is! autogenerated.ShadowRoot) _root = this;
  }

  /** Original code from the component. */

    Todo __$todo;
    Todo get todo {
      if (__observe.observeReads) {
        __observe.notifyRead(this, __observe.ChangeRecord.FIELD, 'todo');
      }
      return __$todo;
    }
    set todo(Todo value) {
      if (__observe.hasObservers(this)) {
        __observe.notifyChange(this, __observe.ChangeRecord.FIELD, 'todo',
            __$todo, value);
      }
      __$todo = value;
    }

    bool get editing => _root.query('#label').xtag.editing;
    String get _completedClass => todo.done ? _css['.completed'] : '';
    String get _editingClass => editing ? _css['.editing'] : '';
  final int hashCode = ++__observe.Observable.$_nextHashCode;
  var $_observers;
  List $_changes;
  }
  
//@ sourceMappingURL=todo_row.html.dart.map