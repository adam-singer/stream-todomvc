// Generated by dart2js, the Dart to JavaScript compiler.
// The code supports the following hooks:
// dartPrint(message)   - if this function is defined it is called
//                        instead of the Dart [print] method.
// dartMainRunner(main) - if this function is defined, the Dart [main]
//                        method will not be invoked directly.
//                        Instead, a closure that will invoke [main] is
//                        passed to [dartMainRunner].
function Isolate() {}
init();

var $ = Isolate.$isolateProperties;
var $$ = {};

// Classes
$$.DartError = {"": "Object;",
  get$stack: function() {
    return this.stack;
  },
  toString$0: function(_) {
    var dartException = this.dartException;
    if (!!Error.captureStackTrace || this.get$stack() == null)
      return $.toString$0$abfnosu(dartException);
    else
      return $.S(dartException) + "\n" + $.S(this.get$stack());
  },
  DartError$1: function(dartException) {
    this.dartException = dartException;
    this.toString = $.DartError_toStringWrapper.call$0;
  }
};

$$.StackTrace = {"": "Object;stack",
  toString$0: function(_) {
    var t1 = this.stack;
    return t1 != null ? t1 : "";
  }
};

$$.Closure = {"": "Object;",
  toString$0: function(_) {
    return "Closure";
  },
  $isFunction: true
};

$$.Dynamic_ = {"": "Object;"};

$$.Null = {"": "Object;"};

$$.CastErrorImplementation = {"": "Object;message",
  toString$0: function(_) {
    return this.message;
  }
};

$$.TypeImpl = {"": "Object;typeName",
  toString$0: function(_) {
    return this.typeName;
  },
  get$hashCode: function(_) {
    return $.CONSTANT1.get$hashCode(this.typeName);
  },
  $eq: function(_, other) {
    if (other == null)
      return false;
    if (!(typeof other === "object" && other !== null && !!other.$isTypeImpl))
      return false;
    return this.typeName === other.typeName;
  },
  $isTypeImpl: true
};

$$.ConstantMap = {"": "Object;length>,_jsObject,_keys>",
  containsKey$1: function(key) {
    if ($.$$eq$o(key, "__proto__") === true)
      return false;
    return this._jsObject.hasOwnProperty(key);
  },
  $index: function(_, key) {
    if (!this.containsKey$1(key))
      return;
    return this._jsObject[key];
  },
  forEach$1: function(_, f) {
    $.forEach$1$a(this._keys, new $.ConstantMap_forEach_anon(this, f));
  },
  get$keys: function() {
    return $._ConstantMapKeyIterable$(this);
  },
  get$values: function() {
    return $.map$1$a(this._keys, new $.ConstantMap_values_anon(this));
  },
  get$isEmpty: function(_) {
    return $.$$eq$o(this.length, 0);
  },
  toString$0: function(_) {
    return $.ToString_mapToString(this);
  },
  _throwUnmodifiable$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot modify unmodifiable Map"));
  },
  $indexSet: function(_, key, val) {
    return this._throwUnmodifiable$0();
  },
  remove$1: function(_, key) {
    return this._throwUnmodifiable$0();
  },
  get$remove: function(receiver) {
    return new $.BoundClosure$i1(this, "remove$1", receiver);
  },
  clear$0: function(_) {
    return this._throwUnmodifiable$0();
  },
  $isMap: true,
  $asMap: function (V) { return [$.String, V]; }
};

$$._ConstantMapKeyIterable = {"": "Iterable;_liblib4$_map",
  get$iterator: function(_) {
    return $.get$iterator$a(this._liblib4$_map._keys);
  },
  $asIterable: function() {
    return function () { return [$.String]; };
  }
};

$$.MetaInfo = {"": "Object;_tag>,_tags,_liblib4$_set>"};

$$.JSSyntaxRegExp = {"": "Object;_pattern,_isMultiLine,_isCaseSensitive,_nativeRegExp",
  firstMatch$1: function(str) {
    var m, matchStart, t1;
    m = this._nativeRegExp.exec($.checkString(str));
    if (m == null)
      return;
    matchStart = m.index;
    t1 = $.get$length$as($.$$index$as(m, 0));
    if (typeof t1 !== "number")
      throw $.iae(t1);
    return $._MatchImplementation$(this.get$pattern(), str, matchStart, matchStart + t1, m);
  },
  hasMatch$1: function(str) {
    return this._nativeRegExp.test($.checkString(str));
  },
  allMatches$1: function(_, str) {
    $.checkString(str);
    return $._AllMatchesIterable$(this, str);
  },
  get$pattern: function() {
    return this._pattern;
  },
  get$isMultiLine: function() {
    return this._isMultiLine;
  },
  get$isCaseSensitive: function() {
    return this._isCaseSensitive;
  },
  $isJSSyntaxRegExp: true
};

$$._MatchImplementation = {"": "Object;pattern>,str,start,end,_groups",
  group$1: function(index) {
    return $.$$index$as(this._groups, index);
  },
  $index: function(_, index) {
    var t1 = this._groups;
    if (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !t1.$isJavaScriptIndexingBehavior())
      return this.$$index$bailout(1, index, t1);
    if (index !== (index | 0))
      throw $.iae(index);
    if (index < 0 || index >= t1.length)
      throw $.ioore(index);
    return t1[index];
  },
  $$index$bailout: function(state0, index, t1) {
    return $.$$index$as(t1, index);
  }
};

$$._AllMatchesIterable = {"": "Iterable;_re,_str",
  get$iterator: function(_) {
    return $._AllMatchesIterator$(this._re, this._str);
  },
  $asIterable: function() {
    return function () { return [$.Match]; };
  }
};

$$._AllMatchesIterator = {"": "Object;_re,_str,_liblib4$_current",
  get$current: function() {
    return this._liblib4$_current;
  },
  moveNext$0: function() {
    this._liblib4$_current = this._re.firstMatch$1(this._str);
    return this._liblib4$_current != null;
  }
};

$$.StringMatch = {"": "Object;start,str,pattern>",
  $index: function(_, g) {
    return this.group$1(g);
  },
  group$1: function(group_) {
    if ($.$$eq$o(group_, 0) !== true)
      throw $.$$throw($.RangeError$value(group_));
    return this.pattern;
  }
};

$$.Collection = {"": "Iterable;",
  addAll$1: function(_, elements) {
    var t1;
    for (t1 = $.get$iterator$a(elements); t1.moveNext$0() === true;)
      this.add$1(this, t1.get$current());
  },
  removeAll$1: function(_, elements) {
    $.IterableMixinWorkaround_removeAll(this, elements);
  },
  removeMatching$1: function(_, test) {
    $.IterableMixinWorkaround_removeMatching(this, test);
  },
  clear$0: function(_) {
    $.IterableMixinWorkaround_removeMatching(this, new $.Collection_clear_anon());
  },
  $isCollection: function() {
    return true;
  },
  $asCollection: function() {
    return null;
  },
  $asIterable: function() {
    return null;
  }
};

$$.Duration = {"": "Object;_duration>",
  $add: function(_, other) {
    var t1, t3;
    t1 = this._duration;
    if (typeof t1 !== "number")
      return this.$$add$bailout(1, other, t1);
    t3 = other.get$_duration();
    if (typeof t3 !== "number")
      return this.$$add$bailout(2, 0, t1, t3);
    return $.Duration$(0, 0, t1 + t3, 0, 0, 0);
  },
  $$add$bailout: function(state0, other, t1, t3) {
    switch (state0) {
      case 0:
        t1 = this._duration;
      case 1:
        state0 = 0;
        t3 = other.get$_duration();
      case 2:
        state0 = 0;
        return $.Duration$(0, 0, $.$$add$n(t1, t3), 0, 0, 0);
    }
  },
  $sub: function(_, other) {
    var t1, t3;
    t1 = this._duration;
    if (typeof t1 !== "number")
      return this.$$sub$bailout(1, other, t1);
    t3 = other.get$_duration();
    if (typeof t3 !== "number")
      return this.$$sub$bailout(2, 0, t1, t3);
    return $.Duration$(0, 0, t1 - t3, 0, 0, 0);
  },
  $$sub$bailout: function(state0, other, t1, t3) {
    switch (state0) {
      case 0:
        t1 = this._duration;
      case 1:
        state0 = 0;
        t3 = other.get$_duration();
      case 2:
        state0 = 0;
        return $.Duration$(0, 0, $.$$sub$n(t1, t3), 0, 0, 0);
    }
  },
  $mul: function(_, factor) {
    var t1 = this._duration;
    if (typeof t1 !== "number")
      return this.$$mul$bailout(1, factor, t1);
    return $.Duration$(0, 0, t1 * factor, 0, 0, 0);
  },
  $$mul$bailout: function(state0, factor, t1) {
    return $.Duration$(0, 0, $.$$mul$n(t1, factor), 0, 0, 0);
  },
  $tdiv: function(_, quotient) {
    if (quotient === 0)
      throw $.$$throw($.IntegerDivisionByZeroException$());
    return $.Duration$(0, 0, $.$$tdiv$n(this._duration, quotient), 0, 0, 0);
  },
  $lt: function(_, other) {
    var t1, t3;
    t1 = this._duration;
    if (typeof t1 !== "number")
      return this.$$lt$bailout(1, other, t1);
    t3 = other.get$_duration();
    if (typeof t3 !== "number")
      return this.$$lt$bailout(2, 0, t1, t3);
    return t1 < t3;
  },
  $$lt$bailout: function(state0, other, t1, t3) {
    switch (state0) {
      case 0:
        t1 = this._duration;
      case 1:
        state0 = 0;
        t3 = other.get$_duration();
      case 2:
        state0 = 0;
        return $.$$lt$n(t1, t3);
    }
  },
  $gt: function(_, other) {
    var t1, t3;
    t1 = this._duration;
    if (typeof t1 !== "number")
      return this.$$gt$bailout(1, other, t1);
    t3 = other.get$_duration();
    if (typeof t3 !== "number")
      return this.$$gt$bailout(2, 0, t1, t3);
    return t1 > t3;
  },
  $$gt$bailout: function(state0, other, t1, t3) {
    switch (state0) {
      case 0:
        t1 = this._duration;
      case 1:
        state0 = 0;
        t3 = other.get$_duration();
      case 2:
        state0 = 0;
        return $.$$gt$n(t1, t3);
    }
  },
  $le: function(_, other) {
    return $.$$le$n(this._duration, other.get$_duration());
  },
  $ge: function(_, other) {
    return $.$$ge$n(this._duration, other.get$_duration());
  },
  get$inHours: function() {
    return $.$$tdiv$n(this._duration, 3600000000);
  },
  get$inMinutes: function() {
    return $.$$tdiv$n(this._duration, 60000000);
  },
  get$inSeconds: function() {
    return $.$$tdiv$n(this._duration, 1000000);
  },
  get$inMilliseconds: function() {
    return $.$$tdiv$n(this._duration, 1000);
  },
  get$inMicroseconds: function() {
    return this._duration;
  },
  $eq: function(_, other) {
    if (other == null)
      return false;
    if (!(typeof other === "object" && other !== null && !!other.$isDuration))
      return false;
    return $.$$eq$o(this._duration, other._duration);
  },
  get$hashCode: function(_) {
    return $.get$hashCode$abnosu(this._duration);
  },
  compareTo$1: function(_, other) {
    return $.compareTo$1$ns(this._duration, other.get$_duration());
  },
  toString$0: function(_) {
    var t1, t2, twoDigitMinutes, twoDigitSeconds, sixDigitUs;
    t1 = new $.Duration_toString_sixDigits();
    t2 = new $.Duration_toString_twoDigits();
    if ($.$$lt$n(this.get$inMicroseconds(), 0) === true)
      return "-" + $.S($.Duration$(0, 0, $.$$negate$n(this.get$inMicroseconds()), 0, 0, 0));
    twoDigitMinutes = t2.call$1($.remainder$1$n(this.get$inMinutes(), 60));
    twoDigitSeconds = t2.call$1($.remainder$1$n(this.get$inSeconds(), 60));
    sixDigitUs = t1.call$1($.remainder$1$n(this.get$inMicroseconds(), 1000000));
    return $.S(this.get$inHours()) + ":" + $.S(twoDigitMinutes) + ":" + $.S(twoDigitSeconds) + "." + $.S(sixDigitUs);
  },
  $isDuration: true
};

$$.NullThrownError = {"": "Object;",
  toString$0: function(_) {
    return "Throw of null.";
  }
};

$$.ArgumentError = {"": "Object;message",
  toString$0: function(_) {
    var t1 = this.message;
    if (t1 != null)
      return "Illegal argument(s): " + $.S(t1);
    return "Illegal argument(s)";
  }
};

$$.RangeError = {"": "ArgumentError;message",
  toString$0: function(_) {
    return "RangeError: " + $.S(this.message);
  }
};

$$.NoSuchMethodError = {"": "Object;_receiver,_memberName,_arguments,_namedArguments,_existingArgumentNames",
  toString$0: function(_) {
    var t1, t2, t3, t4, actualParameters, i, formalParameters;
    t1 = {};
    t1.sb_0 = $.StringBuffer$("");
    t1.i_1 = 0;
    t2 = this._arguments;
    if (typeof t2 !== "string" && (typeof t2 !== "object" || t2 === null || t2.constructor !== Array && !t2.$isJavaScriptIndexingBehavior()))
      return this.toString$0$bailout1(1, t1, t2);
    for (; $.$$lt$n(t1.i_1, t2.length) === true; t1.i_1 = $.$$add$n(t1.i_1, 1)) {
      if ($.$$gt$n(t1.i_1, 0) === true)
        $.add$1$a(t1.sb_0, ", ");
      t3 = t1.sb_0;
      t4 = t1.i_1;
      if (t4 !== (t4 | 0))
        throw $.iae(t4);
      if (t4 < 0 || t4 >= t2.length)
        throw $.ioore(t4);
      $.add$1$a(t3, $.Error_safeToString(t2[t4]));
    }
    t2 = this._namedArguments;
    if (t2 != null)
      $.forEach$1$a(t2, new $.NoSuchMethodError_toString_anon(t1));
    t2 = this._existingArgumentNames;
    if (typeof t2 !== "string" && (typeof t2 !== "object" || t2 === null || t2.constructor !== Array && !t2.$isJavaScriptIndexingBehavior()))
      return this.toString$0$bailout1(2, t1, t2);
    actualParameters = $.toString$0$abfnosu(t1.sb_0);
    t1.sb_0 = $.StringBuffer$("");
    for (i = 0; i < t2.length; ++i) {
      if (i > 0)
        $.add$1$a(t1.sb_0, ", ");
      t3 = t1.sb_0;
      if (i >= t2.length)
        throw $.ioore(i);
      $.add$1$a(t3, t2[i]);
    }
    formalParameters = $.toString$0$abfnosu(t1.sb_0);
    t2 = this._memberName;
    return "NoSuchMethodError: incorrect number of arguments passed to method named '" + $.S(t2) + "'\n" + "Receiver: " + $.S($.Error_safeToString(this._receiver)) + "\n" + "Tried calling: " + $.S(t2) + "(" + $.S(actualParameters) + ")\n" + "Found: " + $.S(t2) + "(" + $.S(formalParameters) + ")";
  },
  toString$0$bailout1: function(state0, t1, t2) {
    switch (state0) {
      case 0:
        t1 = {};
        t1.sb_0 = $.StringBuffer$("");
        t1.i_1 = 0;
        t2 = this._arguments;
      case 1:
        state0 = 0;
        if (t2 != null)
          for (t3 = $.getInterceptor$as(t2); $.$$lt$n(t1.i_1, t3.get$length(t2)) === true; t1.i_1 = $.$$add$n(t1.i_1, 1)) {
            if ($.$$gt$n(t1.i_1, 0) === true)
              $.add$1$a(t1.sb_0, ", ");
            $.add$1$a(t1.sb_0, $.Error_safeToString(t3.$index(t2, t1.i_1)));
          }
        t2 = this._namedArguments;
        if (t2 != null)
          $.forEach$1$a(t2, new $.NoSuchMethodError_toString_anon(t1));
        t2 = this._existingArgumentNames;
      case 2:
        var t3, actualParameters, i, formalParameters;
        state0 = 0;
        if (t2 == null)
          return "NoSuchMethodError : method not found: '" + $.S(this._memberName) + "'\n" + "Receiver: " + $.S($.Error_safeToString(this._receiver)) + "\n" + "Arguments: [" + $.S(t1.sb_0) + "]";
        else {
          actualParameters = $.toString$0$abfnosu(t1.sb_0);
          t1.sb_0 = $.StringBuffer$("");
          for (t3 = $.getInterceptor$as(t2), i = 0; $.CONSTANT2.$lt(i, t3.get$length(t2)); ++i) {
            if (i > 0)
              $.add$1$a(t1.sb_0, ", ");
            $.add$1$a(t1.sb_0, t3.$index(t2, i));
          }
          formalParameters = $.toString$0$abfnosu(t1.sb_0);
          t2 = this._memberName;
          return "NoSuchMethodError: incorrect number of arguments passed to method named '" + $.S(t2) + "'\n" + "Receiver: " + $.S($.Error_safeToString(this._receiver)) + "\n" + "Tried calling: " + $.S(t2) + "(" + $.S(actualParameters) + ")\n" + "Found: " + $.S(t2) + "(" + $.S(formalParameters) + ")";
        }
    }
  }
};

$$.UnsupportedError = {"": "Object;message",
  toString$0: function(_) {
    return "Unsupported operation: " + this.message;
  }
};

$$.UnimplementedError = {"": "Object;message",
  toString$0: function(_) {
    var t1 = this.message;
    return t1 != null ? "UnimplementedError: " + $.S(t1) : "UnimplementedError";
  }
};

$$.StateError = {"": "Object;message",
  toString$0: function(_) {
    return "Bad state: " + this.message;
  }
};

$$.ConcurrentModificationError = {"": "Object;modifiedObject",
  toString$0: function(_) {
    var t1 = this.modifiedObject;
    if (t1 == null)
      return "Concurrent modification during iteration.";
    return "Concurrent modification during iteration: " + $.S($.Error_safeToString(t1)) + ".";
  }
};

$$.StackOverflowError = {"": "Object;",
  toString$0: function(_) {
    return "Stack Overflow";
  }
};

$$.RuntimeError = {"": "Object;message",
  toString$0: function(_) {
    return "RuntimeError: " + this.message;
  }
};

$$._ExceptionImplementation = {"": "Object;message",
  toString$0: function(_) {
    var t1 = this.message;
    if (t1 == null)
      return "Exception";
    return "Exception: " + $.S(t1);
  },
  $isException: true
};

$$.FormatException = {"": "Object;message",
  toString$0: function(_) {
    return "FormatException: " + $.S(this.message);
  },
  $isException: true
};

$$.IntegerDivisionByZeroException = {"": "Object;",
  toString$0: function(_) {
    return "IntegerDivisionByZeroException";
  },
  $isException: true
};

$$.Iterable = {"": "Object;",
  map$1: function(_, f) {
    return $.MappedIterable$(this, f, $.getRuntimeTypeArgument(this, this["$asIterable"], 0), null);
  },
  where$1: function(_, f) {
    return $.WhereIterable$(this, f, $.getRuntimeTypeArgument(this, this["$asIterable"], 0));
  },
  contains$1: function(_, element) {
    var t1;
    for (t1 = this.get$iterator(this); t1.moveNext$0() === true;)
      if ($.$$eq$o(t1.get$current(), element) === true)
        return true;
    return false;
  },
  get$contains: function(receiver) {
    return new $.BoundClosure$i1(this, "contains$1", receiver);
  },
  forEach$1: function(_, f) {
    var t1;
    for (t1 = this.get$iterator(this); t1.moveNext$0() === true;)
      f.call$1(t1.get$current());
  },
  every$1: function(_, f) {
    var t1;
    for (t1 = this.get$iterator(this); t1.moveNext$0() === true;)
      if (f.call$1(t1.get$current()) !== true)
        return false;
    return true;
  },
  join$1: function(_, separator) {
    var iterator, buffer;
    if (typeof separator !== "string")
      return this.join$1$bailout(1, separator);
    iterator = this.get$iterator(this);
    if (iterator.moveNext$0() !== true)
      return "";
    buffer = $.StringBuffer$("");
    if (separator === "")
      do
        buffer.add$1(buffer, $.S(iterator.get$current()));
      while (iterator.moveNext$0() === true);
    else {
      buffer.add$1(buffer, $.S(iterator.get$current()));
      for (; iterator.moveNext$0() === true;) {
        buffer.add$1(buffer, separator);
        buffer.add$1(buffer, $.S(iterator.get$current()));
      }
    }
    return buffer.toString$0(buffer);
  },
  join$1$bailout: function(state0, separator) {
    var iterator, buffer;
    iterator = this.get$iterator(this);
    if (iterator.moveNext$0() !== true)
      return "";
    buffer = $.StringBuffer$("");
    if (separator == null || $.$$eq$o(separator, "") === true)
      do
        buffer.add$1(buffer, $.S(iterator.get$current()));
      while (iterator.moveNext$0() === true);
    else {
      buffer.add$1(buffer, $.S(iterator.get$current()));
      for (; iterator.moveNext$0() === true;) {
        buffer.add$1(buffer, separator);
        buffer.add$1(buffer, $.S(iterator.get$current()));
      }
    }
    return buffer.toString$0(buffer);
  },
  toList$1$growable: function(_, growable) {
    var t1 = $.List_List$from(this, growable, $.getRuntimeTypeArgument(this, this["$asIterable"], 0));
    $.setRuntimeTypeInfo(t1, [$.getRuntimeTypeArgument(this, this["$asIterable"], 0)]);
    return t1;
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  toSet$0: function(_) {
    var t1 = $.HashSet$($.getRuntimeTypeArgument(this, this["$asIterable"], 0));
    t1.addAll$1(t1, this);
    return t1;
  },
  get$length: function(_) {
    var it, count;
    it = this.get$iterator(this);
    for (count = 0; it.moveNext$0() === true;)
      ++count;
    return count;
  },
  get$isEmpty: function(_) {
    return this.get$iterator(this).moveNext$0() !== true;
  },
  skip$1: function(_, n) {
    return $.SkipIterable$(this, n, $.getRuntimeTypeArgument(this, this["$asIterable"], 0));
  },
  get$last: function(_) {
    var it, result;
    it = this.get$iterator(this);
    if (it.moveNext$0() !== true)
      throw $.$$throw($.StateError$("No elements"));
    do
      result = it.get$current();
    while (it.moveNext$0() === true);
    return result;
  },
  elementAt$1: function(_, index) {
    var t1, remaining, t2;
    if (typeof index !== "number")
      return this.elementAt$1$bailout(1, index);
    if (!(typeof index === "number" && Math.floor(index) === index) || index < 0)
      throw $.$$throw($.RangeError$value(index));
    for (t1 = this.get$iterator(this), remaining = index; t1.moveNext$0() === true;) {
      t2 = t1.get$current();
      if (remaining === 0)
        return t2;
      --remaining;
    }
    throw $.$$throw($.RangeError$value(index));
  },
  elementAt$1$bailout: function(state0, index) {
    var t1, remaining, t2, t3;
    if (!(typeof index === "number" && Math.floor(index) === index) || index < 0)
      throw $.$$throw($.RangeError$value(index));
    for (t1 = this.get$iterator(this), remaining = index; t1.moveNext$0() === true;) {
      t2 = t1.get$current();
      t3 = $.getInterceptor(remaining);
      if (t3.$eq(remaining, 0) === true)
        return t2;
      remaining = t3.$sub(remaining, 1);
    }
    throw $.$$throw($.RangeError$value(index));
  },
  $isIterable: function() {
    return true;
  },
  $asIterable: function() {
    return null;
  }
};

$$.Iterator = {"": "Object;"};

$$.Object = {"": ";",
  $eq: function(receiver, other) {
    return this === other;
  },
  get$hashCode: function(_) {
    return $.Primitives_objectHashCode(_);
  },
  toString$0: function(_) {
    return "Instance of '" + $.S($.Primitives_objectTypeName(_)) + "'";
  },
  get$runtimeType: function(_) {
    return $.TypeImpl$($.getRuntimeTypeString(_));
  }
};

$$.StringBuffer = {"": "Object;_contents",
  get$length: function(_) {
    return $.get$length$as(this._contents);
  },
  get$isEmpty: function(_) {
    return $.$$eq$o(this.get$length(this), 0);
  },
  add$1: function(_, obj) {
    return this.write$1(obj);
  },
  write$1: function(obj) {
    var str;
    if (typeof obj !== "string")
      return this.write$1$bailout(1, obj);
    str = obj;
    this._contents = this._contents + str;
  },
  write$1$bailout: function(state0, obj) {
    var str = typeof obj === "string" ? obj : $.S(obj);
    this._contents = this._contents + str;
  },
  writeln$1: function(obj) {
    this.write$1(obj);
    this.write$1("\n");
  },
  addAll$1: function(_, objects) {
    var t1;
    for (t1 = $.get$iterator$a(objects); t1.moveNext$0() === true;)
      this.write$1(t1.get$current());
  },
  clear$0: function(_) {
    this._contents = "";
  },
  toString$0: function(_) {
    return this._contents;
  },
  StringBuffer$1: function($content) {
    if (typeof $content === "string")
      this._contents = $content;
    else
      this.write$1($content);
  }
};

$$.JSFunction = {"": "Object;",
  toString$0: function(receiver) {
    return "Closure";
  },
  $isFunction: true,
  $eq: function(receiver, a) {
    return receiver === a;
  }
};

$$.JSBool = {"": "Object;",
  toString$0: function(receiver) {
    return String(receiver);
  },
  get$hashCode: function(receiver) {
    return receiver ? 519018 : 218159;
  },
  $isbool: true,
  $eq: function(receiver, a) {
    return receiver === a;
  }
};

$$.JSNull = {"": "Object;",
  toString$0: function(receiver) {
    return "null";
  },
  get$hashCode: function(receiver) {
    return 0;
  },
  $eq: function(receiver, a) {
    return receiver == a;
  }
};

$$.JSArray = {"": "Object;",
  add$1: function(receiver, value) {
    $.checkGrowable(receiver, "add");
    receiver.push(value);
  },
  removeLast$0: function(receiver) {
    $.checkGrowable(receiver, "removeLast");
    if (receiver.length === 0)
      throw $.$$throw($.RangeError$value(-1));
    return receiver.pop();
  },
  remove$1: function(receiver, element) {
    var i;
    $.checkGrowable(receiver, "remove");
    for (i = 0; i < receiver.length; ++i)
      if ($.$$eq$o(receiver[i], element) === true) {
        receiver.splice(i, 1);
        return;
      }
  },
  get$remove: function(receiver) {
    return new $.BoundClosure$i1(this, "remove$1", receiver);
  },
  removeAll$1: function(receiver, elements) {
    $.IterableMixinWorkaround_removeAllList(receiver, elements);
  },
  removeMatching$1: function(receiver, test) {
    $.IterableMixinWorkaround_removeMatchingList(receiver, test);
  },
  where$1: function(receiver, f) {
    return $.WhereIterable$(receiver, f, null);
  },
  addAll$1: function(receiver, collection) {
    var t1, t2;
    for (t1 = $.get$iterator$a(collection); t1.moveNext$0() === true;) {
      t2 = t1.get$current();
      $.checkGrowable(receiver, "add");
      receiver.push(t2);
    }
  },
  clear$0: function(receiver) {
    this.set$length(receiver, 0);
  },
  forEach$1: function(receiver, f) {
    var t1;
    for (t1 = this.get$iterator(receiver); t1.moveNext$0();)
      f.call$1(t1.get$current());
    return;
  },
  map$1: function(receiver, f) {
    return $.MappedListIterable$(receiver, f, null, null);
  },
  take$1: function(receiver, n) {
    return $.IterableMixinWorkaround_takeList(receiver, n);
  },
  skip$1: function(receiver, n) {
    return $.IterableMixinWorkaround_skipList(receiver, n);
  },
  elementAt$1: function(receiver, index) {
    if (index !== (index | 0))
      throw $.iae(index);
    if (index < 0 || index >= receiver.length)
      throw $.ioore(index);
    return receiver[index];
  },
  getRange$2: function(receiver, start, $length) {
    var t1, end;
    if (0 === $length)
      return [];
    $.checkNull(start);
    $.checkNull($length);
    if (!(typeof start === "number" && Math.floor(start) === start))
      throw $.$$throw($.ArgumentError$(start));
    if (!(typeof $length === "number" && Math.floor($length) === $length))
      throw $.$$throw($.ArgumentError$($length));
    t1 = $length < 0;
    if (t1)
      throw $.$$throw($.ArgumentError$($length));
    if (start < 0)
      throw $.$$throw($.RangeError$value(start));
    end = start + $length;
    if (end > receiver.length)
      throw $.$$throw($.RangeError$value($length));
    if (t1)
      throw $.$$throw($.ArgumentError$($length));
    return receiver.slice(start, end);
  },
  get$last: function(receiver) {
    var t1 = receiver.length;
    if (t1 > 0)
      return receiver[t1 - 1];
    throw $.$$throw($.StateError$("No elements"));
  },
  removeRange$2: function(receiver, start, $length) {
    var receiverLength, t1, t2;
    $.checkGrowable(receiver, "removeRange");
    if ($length === 0)
      return;
    $.checkNull(start);
    $.checkNull($length);
    if (!(typeof start === "number" && Math.floor(start) === start))
      throw $.$$throw($.ArgumentError$(start));
    if ($length < 0)
      throw $.$$throw($.ArgumentError$($length));
    receiverLength = receiver.length;
    if (start < 0 || start >= receiverLength)
      throw $.$$throw($.RangeError$value(start));
    t1 = start + $length;
    if (t1 > receiverLength)
      throw $.$$throw($.RangeError$value(t1));
    t2 = receiverLength - $length;
    $.Arrays_copy0(receiver, t1, receiver, start, t2 - start);
    this.set$length(receiver, t2);
  },
  setRange$4: function(receiver, start, $length, from, startFrom) {
    $.checkMutable(receiver, "set range");
    $.IterableMixinWorkaround_setRangeList(receiver, start, $length, from, startFrom);
  },
  every$1: function(receiver, f) {
    return $.IterableMixinWorkaround_every(receiver, f);
  },
  indexOf$2: function(receiver, element, start) {
    return $.Arrays_indexOf(receiver, element, start, receiver.length);
  },
  indexOf$1: function($receiver, element) {
    return this.indexOf$2($receiver, element, 0);
  },
  contains$1: function(receiver, other) {
    var t1, i;
    for (t1 = $.getInterceptor(other), i = 0; i < receiver.length; ++i)
      if (t1.$eq(other, receiver[i]) === true)
        return true;
    return false;
  },
  get$contains: function(receiver) {
    return new $.BoundClosure$i1(this, "contains$1", receiver);
  },
  get$isEmpty: function(receiver) {
    return receiver.length === 0;
  },
  toString$0: function(receiver) {
    return $.ToString_collectionToString(receiver);
  },
  toList$1$growable: function(receiver, growable) {
    var t1 = $.List_List$from(receiver, growable, $.getRuntimeTypeArgument(receiver, receiver["$asJSArray"], 0));
    $.setRuntimeTypeInfo(t1, [$.getRuntimeTypeArgument(receiver, receiver["$asJSArray"], 0)]);
    return t1;
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  toSet$0: function(receiver) {
    var t1 = $.HashSet$($.getRuntimeTypeArgument(receiver, receiver["$asJSArray"], 0));
    t1.addAll$1(t1, receiver);
    return t1;
  },
  get$iterator: function(receiver) {
    return $.ListIterator$(receiver, $.getRuntimeTypeArgument(receiver, receiver["$asJSArray"], 0));
  },
  get$hashCode: function(receiver) {
    return $.Primitives_objectHashCode(receiver);
  },
  get$length: function(receiver) {
    return receiver.length;
  },
  set$length: function(receiver, newLength) {
    if (!(typeof newLength === "number" && Math.floor(newLength) === newLength))
      throw $.$$throw($.ArgumentError$(newLength));
    if (newLength < 0)
      throw $.$$throw($.RangeError$value(newLength));
    $.checkGrowable(receiver, "set length");
    receiver.length = newLength;
  },
  $index: function(receiver, index) {
    if (!(typeof index === "number" && Math.floor(index) === index))
      throw $.$$throw($.ArgumentError$(index));
    if (index >= receiver.length || index < 0)
      throw $.$$throw($.RangeError$value(index));
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    $.checkMutable(receiver, "indexed set");
    if (!(typeof index === "number" && Math.floor(index) === index))
      throw $.$$throw($.ArgumentError$(index));
    if (index >= receiver.length || index < 0)
      throw $.$$throw($.RangeError$value(index));
    receiver[index] = value;
  },
  $isList: function() {
    return true;
  },
  $asList: function() {
    return null;
  },
  $isCollection: function() {
    return true;
  },
  $asCollection: function() {
    return null;
  },
  $isIterable: function() {
    return true;
  },
  $asIterable: function() {
    return null;
  },
  $eq: function(receiver, a) {
    return receiver === a;
  }
};

$$.JSNumber = {"": "Object;",
  compareTo$1: function(receiver, b) {
    var bIsNegative;
    if (!(typeof b === "number"))
      throw $.$$throw($.ArgumentError$(b));
    if (receiver < b)
      return -1;
    else if (receiver > b)
      return 1;
    else if (receiver === b) {
      if (receiver === 0) {
        bIsNegative = this.get$isNegative(b);
        if ($.$$eq$o(this.get$isNegative(receiver), bIsNegative) === true)
          return 0;
        if (this.get$isNegative(receiver) === true)
          return -1;
        return 1;
      }
      return 0;
    } else if (this.get$isNaN(receiver)) {
      if (this.get$isNaN(b))
        return 0;
      return 1;
    } else
      return -1;
  },
  get$isNegative: function(receiver) {
    return receiver === 0 ? 1 / receiver < 0 : receiver < 0;
  },
  get$isNaN: function(receiver) {
    return isNaN(receiver);
  },
  remainder$1: function(receiver, b) {
    $.checkNull(b);
    return receiver % b;
  },
  truncate$0: function(receiver) {
    return receiver < 0 ? Math.ceil(receiver) : Math.floor(receiver);
  },
  toString$0: function(receiver) {
    if (receiver === 0 && (1 / receiver) < 0)
      return "-0.0";
    else
      return String(receiver);
  },
  get$hashCode: function(receiver) {
    return receiver & 0x1FFFFFFF;
  },
  $negate: function(receiver) {
    return -receiver;
  },
  $add: function(receiver, other) {
    if (!(typeof other === "number"))
      throw $.$$throw($.ArgumentError$(other));
    return receiver + other;
  },
  $sub: function(receiver, other) {
    if (!(typeof other === "number"))
      throw $.$$throw($.ArgumentError$(other));
    return receiver - other;
  },
  $mul: function(receiver, other) {
    return receiver * other;
  },
  $tdiv: function(receiver, other) {
    return this.truncate$0(receiver / other);
  },
  $shl: function(receiver, other) {
    if (other < 0)
      throw $.$$throw($.ArgumentError$(other));
    if (other > 31)
      return 0;
    return (receiver << other) >>> 0;
  },
  $and: function(receiver, other) {
    if (!(typeof other === "number"))
      throw $.$$throw($.ArgumentError$(other));
    return (receiver & other) >>> 0;
  },
  $or: function(receiver, other) {
    if (!(typeof other === "number"))
      throw $.$$throw($.ArgumentError$(other));
    return (receiver | other) >>> 0;
  },
  $lt: function(receiver, other) {
    if (!(typeof other === "number"))
      throw $.$$throw($.ArgumentError$(other));
    return receiver < other;
  },
  $gt: function(receiver, other) {
    if (!(typeof other === "number"))
      throw $.$$throw($.ArgumentError$(other));
    return receiver > other;
  },
  $le: function(receiver, other) {
    if (!(typeof other === "number"))
      throw $.$$throw($.ArgumentError$(other));
    return receiver <= other;
  },
  $ge: function(receiver, other) {
    if (!(typeof other === "number"))
      throw $.$$throw($.ArgumentError$(other));
    return receiver >= other;
  },
  $isJSNumber: true,
  $isnum: true,
  $eq: function(receiver, a) {
    return receiver === a;
  }
};

$$.JSInt = {"": "JSNumber;", $is$int: true, $isnum: true,
  $eq: function(receiver, a) {
    return receiver === a;
  }
};

$$.JSDouble = {"": "JSNumber;", $is$double: true, $isnum: true,
  $eq: function(receiver, a) {
    return receiver === a;
  }
};

$$.JSString = {"": "Object;",
  codeUnitAt$1: function(receiver, index) {
    if (index < 0)
      throw $.$$throw($.RangeError$value(index));
    if (index >= receiver.length)
      throw $.$$throw($.RangeError$value(index));
    return receiver.charCodeAt(index);
  },
  allMatches$1: function(receiver, str) {
    $.checkString(str);
    return $.allMatchesInStringUnchecked(receiver, str);
  },
  endsWith$1: function(receiver, other) {
    var otherLength, t1;
    $.checkString(other);
    otherLength = other.length;
    t1 = receiver.length;
    if (otherLength > t1)
      return false;
    return other === this.substring$1(receiver, t1 - otherLength);
  },
  replaceAll$2: function(receiver, from, to) {
    $.checkString(to);
    return $.stringReplaceAllUnchecked(receiver, from, to);
  },
  split$1: function(receiver, pattern) {
    $.checkNull(pattern);
    return receiver.split(pattern);
  },
  substring$2: function(receiver, startIndex, endIndex) {
    var t1;
    $.checkNum(startIndex);
    if (endIndex == null)
      endIndex = receiver.length;
    $.checkNum(endIndex);
    t1 = $.getInterceptor$n(startIndex);
    if (t1.$lt(startIndex, 0) === true)
      throw $.$$throw($.RangeError$value(startIndex));
    if (t1.$gt(startIndex, endIndex) === true)
      throw $.$$throw($.RangeError$value(startIndex));
    if ($.$$gt$n(endIndex, receiver.length) === true)
      throw $.$$throw($.RangeError$value(endIndex));
    return receiver.substring(startIndex, endIndex);
  },
  substring$1: function($receiver, startIndex) {
    return this.substring$2($receiver, startIndex, null);
  },
  toLowerCase$0: function(receiver) {
    return receiver.toLowerCase();
  },
  toUpperCase$0: function(receiver) {
    return receiver.toUpperCase();
  },
  trim$0: function(receiver) {
    return receiver.trim();
  },
  indexOf$2: function(receiver, other, start) {
    $.checkNull(other);
    if (!(typeof start === "number" && Math.floor(start) === start))
      throw $.$$throw($.ArgumentError$(start));
    if (!(typeof other === "string"))
      throw $.$$throw($.ArgumentError$(other));
    if (start < 0)
      return -1;
    return receiver.indexOf(other, start);
  },
  indexOf$1: function($receiver, other) {
    return this.indexOf$2($receiver, other, 0);
  },
  contains$2: function(receiver, other, startIndex) {
    $.checkNull(other);
    return $.stringContainsUnchecked(receiver, other, startIndex);
  },
  contains$1: function($receiver, other) {
    return this.contains$2($receiver, other, 0);
  },
  get$contains: function(receiver) {
    return new $.Bound_contains_JSString(this, "contains$2", receiver);
  },
  get$isEmpty: function(receiver) {
    return receiver.length === 0;
  },
  compareTo$1: function(receiver, other) {
    var t1;
    if (!(typeof other === "string"))
      throw $.$$throw($.ArgumentError$(other));
    if (receiver === other)
      t1 = 0;
    else
      t1 = receiver < other ? -1 : 1;
    return t1;
  },
  toString$0: function(receiver) {
    return receiver;
  },
  get$hashCode: function(receiver) {
    var hash, i, hash0, hash1;
    for (hash = 0, i = 0; i < receiver.length; ++i, hash = hash1) {
      hash0 = 536870911 & hash + receiver.charCodeAt(i);
      hash1 = 536870911 & hash0 + ((524287 & hash0) << 10 >>> 0);
      hash1 = hash1 ^ (hash1 >> 6);
    }
    hash0 = 536870911 & hash + ((67108863 & hash) << 3 >>> 0);
    hash0 = hash0 ^ (hash0 >> 11);
    return 536870911 & hash0 + ((16383 & hash0) << 15 >>> 0);
  },
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    if (!(typeof index === "number" && Math.floor(index) === index))
      throw $.$$throw($.ArgumentError$(index));
    if (index >= receiver.length || index < 0)
      throw $.$$throw($.RangeError$value(index));
    return receiver[index];
  },
  $isString: true,
  $eq: function(receiver, a) {
    return receiver === a;
  }
};

$$.ListQueue = {"": "Collection;_table>,_liblib3$_head,_liblib3$_tail,_modificationCount>",
  get$iterator: function(_) {
    return $._ListQueueIterator$(this, null);
  },
  forEach$1: function(_, action) {
    var modificationCount, i, i0, t1;
    modificationCount = this._modificationCount;
    i = this._liblib3$_head;
    if (i !== (i | 0))
      return this.forEach$1$bailout1(1, action, modificationCount, i);
    for (; i !== this._liblib3$_tail; i0 = (i + 1 & this._table.length - 1) >>> 0, i = i0) {
      t1 = this._table;
      if (i < 0 || i >= t1.length)
        throw $.ioore(i);
      action.call$1(t1[i]);
      this._checkModification$1(modificationCount);
    }
  },
  forEach$1$bailout1: function(state0, action, modificationCount, i) {
    var i0, t1;
    for (; i !== this._liblib3$_tail; i0 = (i + 1 & this._table.length - 1) >>> 0, i = i0) {
      t1 = this._table;
      if (i !== (i | 0))
        throw $.iae(i);
      if (i < 0 || i >= t1.length)
        throw $.ioore(i);
      action.call$1(t1[i]);
      this._checkModification$1(modificationCount);
    }
  },
  get$isEmpty: function(_) {
    return this._liblib3$_head === this._liblib3$_tail;
  },
  get$length: function(_) {
    var t1, t3;
    t1 = this._liblib3$_tail;
    if (t1 !== (t1 | 0))
      return this.get$length$bailout1(1, t1);
    t3 = this._liblib3$_head;
    if (t3 !== (t3 | 0))
      return this.get$length$bailout1(2, t1, t3);
    return (t1 - t3 & this._table.length - 1) >>> 0;
  },
  get$length$bailout1: function(state0, t1, t3) {
    switch (state0) {
      case 0:
        t1 = this._liblib3$_tail;
      case 1:
        state0 = 0;
        t3 = this._liblib3$_head;
      case 2:
        state0 = 0;
        t3 = $.$$sub$n(t1, t3);
      case 3:
        state0 = 0;
        return $.$$and$n(t3, this._table.length - 1);
    }
  },
  get$last: function(_) {
    var t1, t2, t3;
    t1 = this._liblib3$_head;
    t2 = this._liblib3$_tail;
    if (t1 === t2)
      throw $.$$throw($.StateError$("No elements"));
    t1 = this._table;
    t3 = $.$$and$n($.$$sub$n(t2, 1), this._table.length - 1);
    if (t3 !== (t3 | 0))
      throw $.iae(t3);
    if (t3 < 0 || t3 >= t1.length)
      throw $.ioore(t3);
    return t1[t3];
  },
  elementAt$1: function(_, index) {
    var t1, t2, t3, t4;
    t1 = $.getInterceptor$n(index);
    if (t1.$lt(index, 0) === true || t1.$gt(index, this.get$length(this)) === true)
      throw $.$$throw($.RangeError$range(index, 0, this.get$length(this)));
    t1 = this._table;
    t2 = this._liblib3$_head;
    if (typeof index !== "number")
      throw $.iae(index);
    t3 = t1.length;
    t4 = (t2 + index & t3 - 1) >>> 0;
    if (t4 < 0 || t4 >= t3)
      throw $.ioore(t4);
    return t1[t4];
  },
  toList$1$growable: function(_, growable) {
    var t1, list;
    if (growable === true) {
      t1 = this.get$length(this);
      list = $.List_List($, $.getRuntimeTypeArgument(this, this["$asListQueue"], 0));
      $.setRuntimeTypeInfo(list, [$.getRuntimeTypeArgument(this, this["$asListQueue"], 0)]);
      $.CONSTANT0.set$length(list, t1);
    } else {
      list = $.List_List(this.get$length(this), $.getRuntimeTypeArgument(this, this["$asListQueue"], 0));
      $.setRuntimeTypeInfo(list, [$.getRuntimeTypeArgument(this, this["$asListQueue"], 0)]);
    }
    this._writeToList$1(list);
    return list;
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  add$1: function(_, element) {
    this._add$1(element);
  },
  addAll$1: function(_, elements) {
    var addCount, $length, t1, t2, t3, endSpace, preSpace;
    if (typeof elements === "object" && elements !== null && (elements.constructor === Array || elements.$isList())) {
      addCount = $.get$length$as(elements);
      $length = this.get$length(this);
      if (typeof addCount !== "number")
        throw $.iae(addCount);
      t1 = $length + addCount;
      t2 = this._table;
      t3 = t2.length;
      if (t1 >= t3) {
        this._preGrow$1(t1);
        $.CONSTANT0.setRange$4(this._table, $length, addCount, elements, 0);
        this._liblib3$_tail = $.$$add$n(this._liblib3$_tail, addCount);
      } else {
        t1 = this._liblib3$_tail;
        if (typeof t1 !== "number")
          throw $.iae(t1);
        endSpace = t3 - t1;
        if (addCount < endSpace) {
          $.CONSTANT0.setRange$4(t2, t1, addCount, elements, 0);
          this._liblib3$_tail = $.$$add$n(this._liblib3$_tail, addCount);
        } else {
          preSpace = addCount - endSpace;
          $.CONSTANT0.setRange$4(t2, t1, endSpace, elements, 0);
          $.CONSTANT0.setRange$4(this._table, 0, preSpace, elements, endSpace);
          this._liblib3$_tail = preSpace;
        }
      }
      this._modificationCount = $.$$add$n(this._modificationCount, 1);
    } else
      for (t1 = $.get$iterator$a(elements); t1.moveNext$0() === true;)
        this._add$1(t1.get$current());
  },
  remove$1: function(_, object) {
    var i, i0, t1;
    i = this._liblib3$_head;
    if (i !== (i | 0))
      return this.remove$1$bailout1(1, object, i);
    for (; i !== this._liblib3$_tail; i0 = (i + 1 & this._table.length - 1) >>> 0, i = i0) {
      t1 = this._table;
      if (i < 0 || i >= t1.length)
        throw $.ioore(i);
      if ($.$$eq$o(t1[i], object) === true) {
        this._remove$1(i);
        return;
      }
    }
    t1 = this._modificationCount;
    if (typeof t1 !== "number")
      return this.remove$1$bailout1(2, 0, 0, t1);
    this._modificationCount = t1 + 1;
  },
  remove$1$bailout1: function(state0, object, i, t1) {
    switch (state0) {
      case 0:
        i = this._liblib3$_head;
      case 1:
        state0 = 0;
        for (; i !== this._liblib3$_tail; i0 = (i + 1 & this._table.length - 1) >>> 0, i = i0) {
          t1 = this._table;
          if (i !== (i | 0))
            throw $.iae(i);
          if (i < 0 || i >= t1.length)
            throw $.ioore(i);
          if ($.$$eq$o(t1[i], object) === true) {
            this._remove$1(i);
            return;
          }
        }
        t1 = this._modificationCount;
      case 2:
        var i0;
        state0 = 0;
        this._modificationCount = $.$$add$n(t1, 1);
    }
  },
  get$remove: function(receiver) {
    return new $.BoundClosure$i1(this, "remove$1", receiver);
  },
  removeAll$1: function(_, objectsToRemove) {
    $.IterableMixinWorkaround_removeAllList(this, objectsToRemove);
  },
  _filterMatching$2: function(test, removeMatching) {
    var index, modificationCount, i, t1, remove, i0;
    index = this._liblib3$_head;
    if (index !== (index | 0))
      return this._filterMatching$2$bailout(1, test, removeMatching, index);
    modificationCount = this._modificationCount;
    if (typeof modificationCount !== "number")
      return this._filterMatching$2$bailout(2, test, removeMatching, index, modificationCount);
    for (i = index; !$.$$eq$o(i, this._liblib3$_tail);) {
      t1 = this._table;
      if (i !== (i | 0))
        throw $.iae(i);
      if (i < 0 || i >= t1.length)
        throw $.ioore(i);
      remove = $.$$eq$o(test.call$1(t1[i]), removeMatching);
      this._checkModification$1(modificationCount);
      if (remove === true) {
        i = this._remove$1(i);
        modificationCount = $.$$add$n(this._modificationCount, 1);
        this._modificationCount = modificationCount;
      } else {
        i0 = (i + 1 & this._table.length - 1) >>> 0;
        i = i0;
      }
    }
  },
  _filterMatching$2$bailout: function(state0, test, removeMatching, index, modificationCount) {
    switch (state0) {
      case 0:
        index = this._liblib3$_head;
      case 1:
        state0 = 0;
        modificationCount = this._modificationCount;
      case 2:
        var i, t1, remove, i0;
        state0 = 0;
        for (i = index; !$.$$eq$o(i, this._liblib3$_tail);) {
          t1 = this._table;
          if (i !== (i | 0))
            throw $.iae(i);
          if (i < 0 || i >= t1.length)
            throw $.ioore(i);
          remove = $.$$eq$o(test.call$1(t1[i]), removeMatching);
          this._checkModification$1(modificationCount);
          if (remove === true) {
            i = this._remove$1(i);
            modificationCount = $.$$add$n(this._modificationCount, 1);
            this._modificationCount = modificationCount;
          } else {
            i0 = (i + 1 & this._table.length - 1) >>> 0;
            i = i0;
          }
        }
    }
  },
  removeMatching$1: function(_, test) {
    this._filterMatching$2(test, true);
  },
  clear$0: function(_) {
    var t1, t3, t2, t4, t5, i, i0;
    t1 = this._liblib3$_head;
    if (t1 !== (t1 | 0))
      return this.clear$0$bailout1(1, t1);
    t3 = this._liblib3$_tail;
    if (t1 !== t3) {
      for (t2 = this._table, t4 = t2.length, t5 = t4 - 1, i = t1; i !== t3; i0 = (i + 1 & t5) >>> 0, i = i0) {
        if (i < 0 || i >= t4)
          throw $.ioore(i);
        t2[i] = null;
      }
      this._liblib3$_tail = 0;
      this._liblib3$_head = 0;
      this._modificationCount = $.$$add$n(this._modificationCount, 1);
    }
  },
  clear$0$bailout1: function(state0, t1) {
    var t3, t2, t4, t5, i, i0;
    t3 = this._liblib3$_tail;
    if (t1 !== t3) {
      for (t2 = this._table, t4 = t2.length, t5 = t4 - 1, i = t1; i !== t3; i0 = (i + 1 & t5) >>> 0, i = i0) {
        if (i !== (i | 0))
          throw $.iae(i);
        if (i < 0 || i >= t4)
          throw $.ioore(i);
        t2[i] = null;
      }
      this._liblib3$_tail = 0;
      this._liblib3$_head = 0;
      this._modificationCount = $.$$add$n(this._modificationCount, 1);
    }
  },
  toString$0: function(_) {
    return $.ToString_collectionToString(this);
  },
  addLast$1: function(_, element) {
    this._add$1(element);
  },
  removeFirst$0: function() {
    var t1, t2, t3, result;
    if (this._liblib3$_head === this._liblib3$_tail)
      throw $.$$throw($.StateError$("No elements"));
    this._modificationCount = $.$$add$n(this._modificationCount, 1);
    t1 = this._table;
    t2 = this._liblib3$_head;
    if (t2 !== (t2 | 0))
      throw $.iae(t2);
    t3 = t1.length;
    if (t2 < 0 || t2 >= t3)
      throw $.ioore(t2);
    result = t1[t2];
    this._liblib3$_head = (t2 + 1 & t3 - 1) >>> 0;
    return result;
  },
  removeLast$0: function(_) {
    var t1, t3, t5, t6;
    if (this._liblib3$_head === this._liblib3$_tail)
      throw $.$$throw($.StateError$("No elements"));
    t1 = this._modificationCount;
    if (typeof t1 !== "number")
      return this.removeLast$0$bailout(1, t1);
    this._modificationCount = t1 + 1;
    t3 = this._liblib3$_tail;
    if (t3 !== (t3 | 0))
      return this.removeLast$0$bailout(2, 0, t3);
    this._liblib3$_tail = (t3 - 1 & this._table.length - 1) >>> 0;
    t5 = this._table;
    t6 = this._liblib3$_tail;
    if (t6 !== (t6 | 0))
      throw $.iae(t6);
    if (t6 < 0 || t6 >= t5.length)
      throw $.ioore(t6);
    return t5[t6];
  },
  removeLast$0$bailout: function(state0, t1, t3) {
    switch (state0) {
      case 0:
        if (this._liblib3$_head === this._liblib3$_tail)
          throw $.$$throw($.StateError$("No elements"));
        t1 = this._modificationCount;
      case 1:
        state0 = 0;
        this._modificationCount = $.$$add$n(t1, 1);
        t3 = this._liblib3$_tail;
      case 2:
        state0 = 0;
        t3 = $.$$sub$n(t3, 1);
      case 3:
        var t6, t7;
        state0 = 0;
        this._liblib3$_tail = $.$$and$n(t3, this._table.length - 1);
        t6 = this._table;
        t7 = this._liblib3$_tail;
        if (t7 !== (t7 | 0))
          throw $.iae(t7);
        if (t7 < 0 || t7 >= t6.length)
          throw $.ioore(t7);
        return t6[t7];
    }
  },
  _checkModification$1: function(expectedModificationCount) {
    if ($.$$eq$o(expectedModificationCount, this._modificationCount) !== true)
      throw $.$$throw($.ConcurrentModificationError$(this));
  },
  _add$1: function(element) {
    var t1, t2, t3;
    t1 = this._table;
    t2 = this._liblib3$_tail;
    if (t2 !== (t2 | 0))
      throw $.iae(t2);
    t3 = t1.length;
    if (t2 < 0 || t2 >= t3)
      throw $.ioore(t2);
    t1[t2] = element;
    this._liblib3$_tail = (t2 + 1 & t3 - 1) >>> 0;
    if (this._liblib3$_head === this._liblib3$_tail)
      this._grow$0();
    t1 = this._modificationCount;
    if (typeof t1 !== "number")
      return this._add$1$bailout(1, t1);
    this._modificationCount = t1 + 1;
  },
  _add$1$bailout: function(state0, t1) {
    this._modificationCount = $.$$add$n(t1, 1);
  },
  _remove$1: function(offset) {
    var t1, t2, mask, t3, startDistance, t5, i, prevOffset, t4, nextOffset;
    if (offset !== (offset | 0))
      return this._remove$1$bailout(1, offset);
    t1 = this._table;
    t2 = t1.length;
    mask = t2 - 1;
    t3 = this._liblib3$_head;
    if (t3 !== (t3 | 0))
      return this._remove$1$bailout(2, offset, mask, t3);
    startDistance = (offset - t3 & mask) >>> 0;
    t5 = this._liblib3$_tail;
    if (t5 !== (t5 | 0))
      return this._remove$1$bailout(4, offset, mask, t5, $.CONSTANT11, startDistance);
    if (startDistance < (t5 - offset & mask) >>> 0) {
      for (i = offset; i !== t3; i = prevOffset) {
        prevOffset = (i - 1 & mask) >>> 0;
        if (prevOffset < 0 || prevOffset >= t2)
          throw $.ioore(prevOffset);
        t4 = t1[prevOffset];
        if (i < 0 || i >= t2)
          throw $.ioore(i);
        t1[i] = t4;
      }
      if (t3 < 0 || t3 >= t2)
        throw $.ioore(t3);
      t1[t3] = null;
      this._liblib3$_head = (t3 + 1 & mask) >>> 0;
      return (offset + 1 & mask) >>> 0;
    } else {
      this._liblib3$_tail = (t5 - 1 & mask) >>> 0;
      for (t1 = this._table, t2 = t1.length, i = offset; t3 = this._liblib3$_tail, i !== t3; i = nextOffset) {
        nextOffset = (i + 1 & mask) >>> 0;
        if (nextOffset < 0 || nextOffset >= t2)
          throw $.ioore(nextOffset);
        t3 = t1[nextOffset];
        if (i < 0 || i >= t2)
          throw $.ioore(i);
        t1[i] = t3;
      }
      if (t3 !== (t3 | 0))
        throw $.iae(t3);
      if (t3 < 0 || t3 >= t2)
        throw $.ioore(t3);
      t1[t3] = null;
      return offset;
    }
  },
  _remove$1$bailout: function(state0, offset, mask, t1, t3, startDistance, i, prevOffset, t2, nextOffset) {
    switch (state0) {
      case 0:
      case 1:
        state0 = 0;
        mask = this._table.length - 1;
        t1 = this._liblib3$_head;
      case 2:
        state0 = 0;
        t3 = $.getInterceptor$n(offset);
        t1 = t3.$sub(offset, t1);
      case 3:
        state0 = 0;
        startDistance = $.$$and$n(t1, mask);
        t1 = this._liblib3$_tail;
      case 4:
        state0 = 0;
        t1 = $.$$sub$n(t1, offset);
      case 5:
        state0 = 0;
      default:
        var t4, t5, t6;
        if (state0 === 9 || state0 === 8 || state0 === 7 || state0 === 6 || state0 === 0 && startDistance < $.$$and$n(t1, mask))
          switch (state0) {
            case 0:
              i = offset;
            default:
              L0:
                while (true)
                  switch (state0) {
                    case 0:
                      t1 = $.getInterceptor(i);
                      if (!(t1.$eq(i, this._liblib3$_head) !== true))
                        break L0;
                      t1 = t1.$sub(i, 1);
                    case 6:
                      state0 = 0;
                      prevOffset = $.$$and$n(t1, mask);
                    case 7:
                      state0 = 0;
                      t4 = this._table;
                      if (prevOffset !== (prevOffset | 0))
                        throw $.iae(prevOffset);
                      t5 = t4.length;
                      if (prevOffset < 0 || prevOffset >= t5)
                        throw $.ioore(prevOffset);
                      t6 = t4[prevOffset];
                      if (i !== (i | 0))
                        throw $.iae(i);
                      if (i < 0 || i >= t5)
                        throw $.ioore(i);
                      t4[i] = t6;
                      i = prevOffset;
                  }
              t1 = this._table;
              t2 = this._liblib3$_head;
            case 8:
              state0 = 0;
              if (t2 !== (t2 | 0))
                throw $.iae(t2);
              if (t2 < 0 || t2 >= t1.length)
                throw $.ioore(t2);
              t1[t2] = null;
              this._liblib3$_head = (t2 + 1 & mask) >>> 0;
              t3 = t3.$add(offset, 1);
            case 9:
              state0 = 0;
              return $.$$and$n(t3, mask);
          }
        else
          switch (state0) {
            case 0:
              t1 = this._liblib3$_tail;
            case 10:
              state0 = 0;
              t1 = $.$$sub$n(t1, 1);
            case 11:
              state0 = 0;
              this._liblib3$_tail = $.$$and$n(t1, mask);
              i = offset;
            default:
              L1:
                while (true)
                  switch (state0) {
                    case 0:
                      t1 = $.getInterceptor(i);
                      if (!(t1.$eq(i, this._liblib3$_tail) !== true))
                        break L1;
                      t1 = t1.$add(i, 1);
                    case 12:
                      state0 = 0;
                      nextOffset = $.$$and$n(t1, mask);
                    case 13:
                      state0 = 0;
                      t3 = this._table;
                      if (nextOffset !== (nextOffset | 0))
                        throw $.iae(nextOffset);
                      t4 = t3.length;
                      if (nextOffset < 0 || nextOffset >= t4)
                        throw $.ioore(nextOffset);
                      t5 = t3[nextOffset];
                      if (i !== (i | 0))
                        throw $.iae(i);
                      if (i < 0 || i >= t4)
                        throw $.ioore(i);
                      t3[i] = t5;
                      i = nextOffset;
                  }
              t1 = this._table;
              t2 = this._liblib3$_tail;
              if (t2 !== (t2 | 0))
                throw $.iae(t2);
              if (t2 < 0 || t2 >= t1.length)
                throw $.ioore(t2);
              t1[t2] = null;
              return offset;
          }
    }
  },
  _grow$0: function() {
    var newTable, t1, t2, t3, split;
    newTable = $.List_List(this._table.length * 2, $.getRuntimeTypeArgument(this, this["$asListQueue"], 0));
    $.setRuntimeTypeInfo(newTable, [$.getRuntimeTypeArgument(this, this["$asListQueue"], 0)]);
    t1 = this._table;
    t2 = t1.length;
    t3 = this._liblib3$_head;
    split = t2 - t3;
    $.CONSTANT0.setRange$4(newTable, 0, split, t1, t3);
    $.CONSTANT0.setRange$4(newTable, split, this._liblib3$_head, this._table, 0);
    this._liblib3$_head = 0;
    this._liblib3$_tail = this._table.length;
    this._table = newTable;
  },
  _writeToList$1: function(target) {
    var t1, t2, $length, firstPartSize;
    t1 = $.CONSTANT2.$le(this._liblib3$_head, this._liblib3$_tail);
    t2 = this._liblib3$_head;
    if (t1) {
      $length = $.$$sub$n(this._liblib3$_tail, t2);
      $.CONSTANT0.setRange$4(target, 0, $length, this._table, this._liblib3$_head);
      return $length;
    } else {
      t1 = this._table;
      firstPartSize = t1.length - t2;
      $.CONSTANT0.setRange$4(target, 0, firstPartSize, t1, t2);
      $.CONSTANT0.setRange$4(target, firstPartSize, this._liblib3$_tail, this._table, 0);
      return $.$$add$n(this._liblib3$_tail, firstPartSize);
    }
  },
  _preGrow$1: function(newElementCount) {
    var newTable = $.List_List($.ListQueue__nextPowerOf2(newElementCount), $.getRuntimeTypeArgument(this, this["$asListQueue"], 0));
    $.setRuntimeTypeInfo(newTable, [$.getRuntimeTypeArgument(this, this["$asListQueue"], 0)]);
    this._liblib3$_tail = this._writeToList$1(newTable);
    this._table = newTable;
    this._liblib3$_head = 0;
  },
  ListQueue$1: function(initialCapacity, E) {
    var t1;
    if (initialCapacity == null || $.$$lt$n(initialCapacity, 8) === true)
      initialCapacity = 8;
    else if ($.ListQueue__isPowerOf2(initialCapacity) !== true)
      initialCapacity = $.ListQueue__nextPowerOf2(initialCapacity);
    t1 = $.List_List(initialCapacity, E);
    $.setRuntimeTypeInfo(t1, [E]);
    this._table = t1;
  },
  $asCollection: function() {
    return null;
  },
  $asIterable: function() {
    return null;
  },
  $isCollection: function() {
    return true;
  },
  $isIterable: function() {
    return true;
  }
};

$$._ListQueueIterator = {"": "Object;_queue,_end,_modificationCount>,_liblib3$_position,_liblib3$_current",
  get$current: function() {
    return this._liblib3$_current;
  },
  moveNext$0: function() {
    var t1, t2, t3, t4;
    t1 = this._queue;
    t1._checkModification$1(this._modificationCount);
    if ($.$$eq$o(this._liblib3$_position, this._end) === true) {
      this._liblib3$_current = null;
      return false;
    }
    t2 = t1._table;
    t3 = this._liblib3$_position;
    if (t3 !== (t3 | 0))
      throw $.iae(t3);
    if (t3 < 0 || t3 >= t2.length)
      throw $.ioore(t3);
    this._liblib3$_current = t2[t3];
    t4 = this._liblib3$_position;
    if (t4 !== (t4 | 0))
      return this.moveNext$0$bailout(1, t4, t1);
    this._liblib3$_position = (t4 + 1 & t1._table.length - 1) >>> 0;
    return true;
  },
  moveNext$0$bailout: function(state0, t4, t1) {
    switch (state0) {
      case 0:
        t1 = this._queue;
        t1._checkModification$1(this._modificationCount);
        if ($.$$eq$o(this._liblib3$_position, this._end) === true) {
          this._liblib3$_current = null;
          return false;
        }
        t2 = t1._table;
        t3 = this._liblib3$_position;
        if (t3 !== (t3 | 0))
          throw $.iae(t3);
        if (t3 < 0 || t3 >= t2.length)
          throw $.ioore(t3);
        this._liblib3$_current = t2[t3];
        t4 = this._liblib3$_position;
      case 1:
        state0 = 0;
        t4 = $.$$add$n(t4, 1);
      case 2:
        var t2, t3;
        state0 = 0;
        this._liblib3$_position = $.$$and$n(t4, t1._table.length - 1);
        return true;
    }
  }
};

$$._SplayTreeNode = {"": "Object;key>,left=,right="};

$$._SplayTreeMapNode = {"": "_SplayTreeNode;value=,key,left,right", $as_SplayTreeNode: function (K, V) { return [K]; }};

$$._SplayTree = {"": "Object;_liblib3$_root>,_count>,_modificationCount>,_splayCount>",
  _splay$1: function(key) {
    var current, left, right, left0, comp, t1, tmp, current0;
    current = this._liblib3$_root;
    if (current == null)
      return -1;
    left = this._dummy;
    for (right = left, left0 = right, comp = null; true;) {
      comp = $.compareTo$1$ns(current.get$key(), key);
      t1 = $.getInterceptor$n(comp);
      if (t1.$gt(comp, 0) === true) {
        if (current.get$left() == null)
          break;
        comp = $.compareTo$1$ns(current.get$left().get$key(), key);
        if ($.$$gt$n(comp, 0) === true) {
          tmp = current.get$left();
          current.set$left(tmp.get$right());
          tmp.set$right(current);
          if (tmp.get$left() == null) {
            current = tmp;
            break;
          }
          current = tmp;
        }
        right.set$left(current);
        current0 = current.get$left();
        right = current;
        current = current0;
      } else {
        if (t1.$lt(comp, 0) === true) {
          if (current.get$right() == null)
            break;
          comp = $.compareTo$1$ns(current.get$right().get$key(), key);
          if ($.$$lt$n(comp, 0) === true) {
            tmp = current.get$right();
            current.set$right(tmp.get$left());
            tmp.set$left(current);
            if (tmp.get$right() == null) {
              current = tmp;
              break;
            }
            current = tmp;
          }
          left0.set$right(current);
          current0 = current.get$right();
        } else
          break;
        left0 = current;
        current = current0;
      }
    }
    left0.set$right(current.get$left());
    right.set$left(current.get$right());
    current.set$left(left.right);
    current.set$right(left.left);
    this._liblib3$_root = current;
    left.right = null;
    left.left = null;
    this._splayCount = this._splayCount + 1;
    return comp;
  },
  _remove$1: function(key) {
    var comp, result, t1, t2, right;
    if (this._liblib3$_root == null)
      return;
    comp = this._splay$1(key);
    if (typeof comp !== "number")
      return this._remove$1$bailout(1, key, comp);
    if (comp !== 0)
      return;
    result = this._liblib3$_root;
    this._count = this._count - 1;
    t1 = this._liblib3$_root.get$left();
    t2 = this._liblib3$_root;
    if (t1 == null)
      this._liblib3$_root = t2.get$right();
    else {
      right = t2.get$right();
      this._liblib3$_root = this._liblib3$_root.get$left();
      this._splay$1(key);
      this._liblib3$_root.set$right(right);
    }
    this._modificationCount = this._modificationCount + 1;
    return result;
  },
  _remove$1$bailout: function(state0, key, comp) {
    var result, t1, t2, right;
    if ($.$$eq$o(comp, 0) !== true)
      return;
    result = this._liblib3$_root;
    this._count = this._count - 1;
    t1 = this._liblib3$_root.get$left();
    t2 = this._liblib3$_root;
    if (t1 == null)
      this._liblib3$_root = t2.get$right();
    else {
      right = t2.get$right();
      this._liblib3$_root = this._liblib3$_root.get$left();
      this._splay$1(key);
      this._liblib3$_root.set$right(right);
    }
    this._modificationCount = this._modificationCount + 1;
    return result;
  },
  _addNewRoot$2: function(node, comp) {
    var t1, t2;
    this._count = this._count + 1;
    this._modificationCount = this._modificationCount + 1;
    if (this._liblib3$_root == null) {
      this._liblib3$_root = node;
      return;
    }
    t1 = $.$$lt$n(comp, 0);
    t2 = this._liblib3$_root;
    if (t1 === true) {
      node.left = t2;
      node.right = this._liblib3$_root.get$right();
      this._liblib3$_root.set$right(null);
    } else {
      node.right = t2;
      node.left = this._liblib3$_root.get$left();
      this._liblib3$_root.set$left(null);
    }
    this._liblib3$_root = node;
  },
  _clear$0: function() {
    this._liblib3$_root = null;
    this._count = 0;
    this._modificationCount = this._modificationCount + 1;
  }
};

$$.SplayTreeMap = {"": "_SplayTree;_comparator,_liblib3$_root,_dummy,_count,_modificationCount,_splayCount",
  $index: function(_, key) {
    var comp;
    if (this._liblib3$_root != null) {
      comp = this._splay$1(key);
      if (typeof comp !== "number")
        return this.$$index$bailout(1, comp);
      if (comp === 0)
        return this._liblib3$_root.get$value();
    }
    return;
  },
  $$index$bailout: function(state0, comp) {
    switch (state0) {
      case 0:
      case 1:
        if (state0 === 1 || state0 === 0 && this._liblib3$_root != null)
          switch (state0) {
            case 0:
              comp = this._splay$1(key);
            case 1:
              state0 = 0;
              if ($.$$eq$o(comp, 0) === true)
                return this._liblib3$_root.get$value();
          }
        return;
    }
  },
  remove$1: function(_, key) {
    var root = this._remove$1(key);
    if (root != null)
      return root.get$value();
    return;
  },
  get$remove: function(receiver) {
    return new $.BoundClosure$i1(this, "remove$1", receiver);
  },
  $indexSet: function(_, key, value) {
    var comp = this._splay$1(key);
    if (typeof comp !== "number")
      return this.$$indexSet$bailout(1, key, value, comp);
    if (comp === 0) {
      this._liblib3$_root.set$value(value);
      return;
    }
    this._addNewRoot$2($._SplayTreeMapNode$(key, value, null, null), comp);
  },
  $$indexSet$bailout: function(state0, key, value, comp) {
    if ($.$$eq$o(comp, 0) === true) {
      this._liblib3$_root.set$value(value);
      return;
    }
    this._addNewRoot$2($._SplayTreeMapNode$(key, value, null, null), comp);
  },
  get$isEmpty: function(_) {
    return this._liblib3$_root == null;
  },
  forEach$1: function(_, f) {
    var nodes, node;
    nodes = $._SplayTreeNodeIterator$(this, $.getRuntimeTypeArgument(this, this["$asSplayTreeMap"], 0));
    for (; nodes.moveNext$0();) {
      node = nodes.get$current();
      f.call$2(node.get$key(), node.get$value());
    }
  },
  get$length: function(_) {
    return this._count;
  },
  clear$0: function(_) {
    this._liblib3$_root = null;
    this._count = 0;
    this._modificationCount = this._modificationCount + 1;
  },
  containsKey$1: function(key) {
    return $.$$eq$o(this._splay$1(key), 0);
  },
  get$keys: function() {
    return $._SplayTreeKeyIterable$(this, $.getRuntimeTypeArgument(this, this["$asSplayTreeMap"], 0));
  },
  get$values: function() {
    return $._SplayTreeValueIterable$(this, $.getRuntimeTypeArgument(this, this["$asSplayTreeMap"], 0), $.getRuntimeTypeArgument(this, this["$asSplayTreeMap"], 1));
  },
  toString$0: function(_) {
    return $.ToString_mapToString(this);
  },
  $isSplayTreeMap: true,
  $as_SplayTree: function (K, V) { return [K]; },
  $asMap: null,
  $isMap: true
};

$$._SplayTreeIterator = {"": "Object;_modificationCount>,_splayCount>",
  get$current: function() {
    var t1 = this._currentNode;
    if (t1 == null)
      return;
    return this._getValue$1(t1);
  },
  _findLeftMostDescendent$1: function(node) {
    var t1;
    for (t1 = this._workList; node != null;) {
      $.CONSTANT0.add$1(t1, node);
      node = node.get$left();
    }
  },
  _rebuildWorkList$1: function(currentNode) {
    var t1;
    $.CONSTANT0.clear$0(this._workList);
    t1 = this._tree;
    if (currentNode == null)
      this._findLeftMostDescendent$1(t1.get$_liblib3$_root());
    else {
      t1._splay$1(currentNode.get$key());
      this._findLeftMostDescendent$1(t1.get$_liblib3$_root().get$right());
    }
  },
  moveNext$0: function() {
    var t1, t2;
    t1 = this._modificationCount;
    t2 = this._tree;
    if ($.$$eq$o(t1, t2.get$_modificationCount()) !== true)
      throw $.$$throw($.ConcurrentModificationError$(t2));
    t1 = this._workList;
    if ($.CONSTANT0.get$isEmpty(t1) === true) {
      this._currentNode = null;
      return false;
    }
    if ($.$$eq$o(t2.get$_splayCount(), this._splayCount) !== true)
      this._rebuildWorkList$1(this._currentNode);
    this._currentNode = $.CONSTANT0.removeLast$0(t1);
    this._findLeftMostDescendent$1(this._currentNode.get$right());
    return true;
  },
  _SplayTreeIterator$1: function(tree, T) {
    this._findLeftMostDescendent$1(tree.get$_liblib3$_root());
  }
};

$$._SplayTreeKeyIterable = {"": "Iterable;_tree",
  get$length: function(_) {
    return this._tree._count;
  },
  get$isEmpty: function(_) {
    return this._tree._count === 0;
  },
  get$iterator: function(_) {
    return $._SplayTreeKeyIterator$(this._tree, $.getRuntimeTypeArgument(this, this["$as_SplayTreeKeyIterable"], 0));
  },
  $asIterable: function() {
    return null;
  }
};

$$._SplayTreeValueIterable = {"": "Iterable;_map",
  get$length: function(_) {
    return this._map._count;
  },
  get$isEmpty: function(_) {
    return this._map._count === 0;
  },
  get$iterator: function(_) {
    return $._SplayTreeValueIterator$(this._map, $.getRuntimeTypeArgument(this, this["$as_SplayTreeValueIterable"], 0), $.getRuntimeTypeArgument(this, this["$as_SplayTreeValueIterable"], 1));
  },
  $asIterable: function() {
    return function (K, V) { return [V]; };
  }
};

$$._SplayTreeKeyIterator = {"": "_SplayTreeIterator;_tree,_workList,_modificationCount,_splayCount,_currentNode",
  _getValue$1: function(node) {
    return node.get$key();
  },
  $as_SplayTreeIterator: null
};

$$._SplayTreeValueIterator = {"": "_SplayTreeIterator;_tree,_workList,_modificationCount,_splayCount,_currentNode",
  _getValue$1: function(node) {
    return node.get$value();
  },
  $as_SplayTreeIterator: function (K, V) { return [V]; }
};

$$._SplayTreeNodeIterator = {"": "_SplayTreeIterator;_tree,_workList,_modificationCount,_splayCount,_currentNode",
  _getValue$1: function(node) {
    return node;
  },
  $as_SplayTreeIterator: function (K) { return [[$._SplayTreeNode, K]]; }
};

$$._DeadEntry = {"": "Object;"};

$$._NullKey = {"": "Object;",
  get$hashCode: function(_) {
    return $.CONSTANT5.get$hashCode(null);
  }
};

$$._HashTable = {"": "Object;_table>,_capacity,_entryCount,_deletedCount,_modificationCount>,_container",
  _key$1: function(offset) {
    var t1, key;
    t1 = this._table;
    if (typeof t1 !== "string" && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !t1.$isJavaScriptIndexingBehavior()))
      return this._key$1$bailout(1, offset, t1);
    if (offset !== (offset | 0))
      throw $.iae(offset);
    if (offset < 0 || offset >= t1.length)
      throw $.ioore(offset);
    key = t1[offset];
    if (key !== $.CONSTANT4)
      return key;
    return;
  },
  _key$1$bailout: function(state0, offset, t1) {
    var key = $.$$index$as(t1, offset);
    if (key !== $.CONSTANT4)
      return key;
    return;
  },
  _setKey$2: function(offset, key) {
    if (key == null)
      key = $.CONSTANT4;
    $.$$indexSet$a(this._table, offset, key);
  },
  get$_elementCount: function() {
    return $.$$sub$n(this._entryCount, this._deletedCount);
  },
  get$_entrySize: function() {
    return 1;
  },
  _checkModification$1: function(expectedModificationCount) {
    if (this._modificationCount !== expectedModificationCount)
      throw $.$$throw($.ConcurrentModificationError$(this._container));
  },
  _recordModification$0: function() {
    this._modificationCount = this._modificationCount + 1 & 1073741823;
  },
  _createTable$1: function(capacity) {
    return $.List_List($.$$mul$n(capacity, this.get$_entrySize()), null);
  },
  _nextProbe$3: function(previousIndex, probeCount, capacity) {
    if (typeof capacity !== "number")
      return this._nextProbe$3$bailout(1, previousIndex, probeCount, capacity);
    return (previousIndex + probeCount & capacity - 1) >>> 0;
  },
  _nextProbe$3$bailout: function(state0, previousIndex, probeCount, capacity) {
    var t1 = $.$$sub$n(capacity, 1);
    if (typeof t1 !== "number")
      throw $.iae(t1);
    return (previousIndex + probeCount & t1) >>> 0;
  },
  _isFree$1: function(marker) {
    return marker == null || marker === $.CONSTANT3;
  },
  _probeForAdd$2: function(hashCode, object) {
    var entrySize, index, t1, firstTombstone, probeCount, offset, entry;
    entrySize = this.get$_entrySize();
    index = $.$$and$n(hashCode, $.$$sub$n(this._capacity, 1));
    for (t1 = null == object, firstTombstone = -1, probeCount = 0; true;) {
      offset = index * entrySize;
      entry = $.$$index$as(this._table, offset);
      if (entry === $.CONSTANT3) {
        if (firstTombstone < 0)
          firstTombstone = offset;
      } else if (entry == null) {
        if (firstTombstone < 0)
          return offset;
        return firstTombstone;
      } else if (($.CONSTANT4 === entry ? t1 : $.$$eq$o(entry, object)) === true)
        return offset;
      ++probeCount;
      index = this._nextProbe$3(index, probeCount, this._capacity);
    }
  },
  _probeForLookup$2: function(hashCode, object) {
    var entrySize, index, t1, probeCount, offset, entry;
    entrySize = this.get$_entrySize();
    index = $.$$and$n(hashCode, $.$$sub$n(this._capacity, 1));
    for (t1 = null == object, probeCount = 0; true;) {
      offset = index * entrySize;
      entry = $.$$index$as(this._table, offset);
      if (entry == null)
        return -1;
      else if ($.CONSTANT3 !== entry)
        if (($.CONSTANT4 === entry ? t1 : $.$$eq$o(entry, object)) === true)
          return offset;
      ++probeCount;
      index = this._nextProbe$3(index, probeCount, this._capacity);
    }
  },
  _hashCodeOf$1: function(object) {
    return $.get$hashCode$abnosu(object);
  },
  _checkCapacity$0: function() {
    var freeCount, t1;
    freeCount = $.$$sub$n(this._capacity, this._entryCount);
    t1 = $.getInterceptor$n(freeCount);
    if ($.$$lt$n(t1.$mul(freeCount, 4), this._capacity) === true || t1.$lt(freeCount, this._deletedCount) === true)
      this._grow$1($.$$sub$n(this._entryCount, this._deletedCount));
  },
  _grow$1: function(contentCount) {
    var capacity, minCapacity, oldTable;
    capacity = this._capacity;
    if (typeof capacity !== "number")
      return this._grow$1$bailout(1, contentCount, capacity);
    minCapacity = $.$$mul$n(contentCount, 2);
    if (typeof minCapacity !== "number")
      return this._grow$1$bailout(2, 0, capacity, minCapacity);
    for (; capacity < minCapacity;)
      capacity *= 2;
    oldTable = this._table;
    this._table = this._createTable$1(capacity);
    this._capacity = capacity;
    this._entryCount = 0;
    this._deletedCount = 0;
    this._addAllEntries$1(oldTable);
    this._recordModification$0();
  },
  _grow$1$bailout: function(state0, contentCount, capacity, minCapacity) {
    switch (state0) {
      case 0:
        capacity = this._capacity;
      case 1:
        state0 = 0;
        minCapacity = $.$$mul$n(contentCount, 2);
      case 2:
        var t1, oldTable;
        state0 = 0;
        for (; t1 = $.getInterceptor$n(capacity), t1.$lt(capacity, minCapacity) === true;)
          capacity = t1.$mul(capacity, 2);
        oldTable = this._table;
        this._table = this._createTable$1(capacity);
        this._capacity = capacity;
        this._entryCount = 0;
        this._deletedCount = 0;
        this._addAllEntries$1(oldTable);
        this._recordModification$0();
    }
  },
  _addAllEntries$1: function(oldTable) {
    var i, t1, object;
    if (typeof oldTable !== "string" && (typeof oldTable !== "object" || oldTable === null || oldTable.constructor !== Array && !oldTable.$isJavaScriptIndexingBehavior()))
      return this._addAllEntries$1$bailout(1, oldTable);
    for (i = 0; t1 = oldTable.length, i < t1; i += this.get$_entrySize()) {
      if (i < 0)
        throw $.ioore(i);
      object = oldTable[i];
      if (!(object == null || object === $.CONSTANT3))
        this._copyEntry$3(oldTable, i, this._put$1(object));
    }
  },
  _addAllEntries$1$bailout: function(state0, oldTable) {
    var t1, i, object;
    for (t1 = $.getInterceptor$as(oldTable), i = 0; $.CONSTANT2.$lt(i, t1.get$length(oldTable)); i += this.get$_entrySize()) {
      object = t1.$index(oldTable, i);
      if (!(object == null || object === $.CONSTANT3))
        this._copyEntry$3(oldTable, i, this._put$1(object));
    }
  },
  _copyEntry$3: function(fromTable, fromOffset, toOffset) {
  },
  _get$1: function(key) {
    return this._probeForLookup$2($.get$hashCode$abnosu(key), key);
  },
  _put$1: function(key) {
    var offset, t1, oldEntry;
    offset = this._probeForAdd$2($.get$hashCode$abnosu(key), key);
    t1 = this._table;
    if (typeof t1 !== "string" && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !t1.$isJavaScriptIndexingBehavior()))
      return this._put$1$bailout(1, key, t1, offset);
    if (offset !== (offset | 0))
      throw $.iae(offset);
    if (offset < 0 || offset >= t1.length)
      throw $.ioore(offset);
    oldEntry = t1[offset];
    if (oldEntry == null) {
      t1 = this._entryCount;
      if (typeof t1 !== "number")
        return this._put$1$bailout(2, key, t1, offset);
      this._entryCount = t1 + 1;
    } else if (oldEntry === $.CONSTANT3) {
      t1 = this._deletedCount;
      if (typeof t1 !== "number")
        return this._put$1$bailout(3, key, t1, offset);
      this._deletedCount = t1 - 1;
    } else
      return offset;
    if (key == null)
      key = $.CONSTANT4;
    t1 = this._table;
    if (typeof t1 !== "object" || t1 === null || (t1.constructor !== Array || !!t1.immutable$list) && !t1.$isJavaScriptIndexingBehavior())
      return this._put$1$bailout(4, key, t1, offset);
    if (offset >= t1.length)
      throw $.ioore(offset);
    t1[offset] = key;
    this._recordModification$0();
    return offset;
  },
  _put$1$bailout: function(state0, key, t1, offset) {
    switch (state0) {
      case 0:
        offset = this._probeForAdd$2($.get$hashCode$abnosu(key), key);
        t1 = this._table;
      case 1:
        state0 = 0;
        oldEntry = $.$$index$as(t1, offset);
      default:
        if (state0 === 2 || state0 === 0 && oldEntry == null)
          switch (state0) {
            case 0:
              t1 = this._entryCount;
            case 2:
              state0 = 0;
              this._entryCount = $.$$add$n(t1, 1);
          }
        else
          switch (state0) {
            case 0:
            case 3:
              if (state0 === 3 || state0 === 0 && oldEntry === $.CONSTANT3)
                switch (state0) {
                  case 0:
                    t1 = this._deletedCount;
                  case 3:
                    state0 = 0;
                    this._deletedCount = $.$$sub$n(t1, 1);
                }
              else
                return offset;
          }
        if (key == null)
          key = $.CONSTANT4;
        t1 = this._table;
      case 4:
        var oldEntry;
        state0 = 0;
        $.$$indexSet$a(t1, offset, key);
        this._recordModification$0();
        return offset;
    }
  },
  _remove$1: function(key) {
    var offset = this._probeForLookup$2($.get$hashCode$abnosu(key), key);
    if ($.$$ge$n(offset, 0) === true)
      this._deleteEntry$1(offset);
    return offset;
  },
  _clear$0: function() {
    var i;
    if ($.$$eq$o(this.get$_elementCount(), 0) === true)
      return;
    for (var i = 0; $.CONSTANT2.$lt(i, $.get$length$as(this._table)); ++i)
      $.$$indexSet$a(this._table, i, null);
    this._deletedCount = 0;
    this._entryCount = 0;
    this._recordModification$0();
  },
  _deleteEntry$1: function(offset) {
    var key = $.CONSTANT3.$eq($.CONSTANT3, null) ? $.CONSTANT4 : $.CONSTANT3;
    $.$$indexSet$a(this._table, offset, key);
    this._deletedCount = $.$$add$n(this._deletedCount, 1);
    this._recordModification$0();
  },
  _HashTable$1: function(initialCapacity, K) {
    this._table = this._createTable$1(initialCapacity);
  }
};

$$._HashTableIterable = {"": "Iterable;_hashTable>",
  get$length: function(_) {
    return this._hashTable.get$_elementCount();
  },
  get$isEmpty: function(_) {
    return $.$$eq$o(this._hashTable.get$_elementCount(), 0);
  },
  forEach$1: function(_, action) {
    var t1, entrySize, table, modificationCount, offset, t2, entry;
    t1 = this._hashTable;
    entrySize = t1.get$_entrySize();
    table = t1._table;
    if (typeof table !== "string" && (typeof table !== "object" || table === null || table.constructor !== Array && !table.$isJavaScriptIndexingBehavior()))
      return this.forEach$1$bailout1(1, action, entrySize, t1, table);
    modificationCount = t1._modificationCount;
    for (offset = 0; t2 = table.length, offset < t2; offset += entrySize) {
      if (offset < 0)
        throw $.ioore(offset);
      entry = table[offset];
      if (!t1._isFree$1(entry))
        action.call$1(this._valueAt$2(offset, entry));
      t1._checkModification$1(modificationCount);
    }
  },
  forEach$1$bailout1: function(state0, action, entrySize, t1, table, offset, modificationCount, t3, t2) {
    switch (state0) {
      case 0:
        t1 = this._hashTable;
        entrySize = t1.get$_entrySize();
        table = t1._table;
      case 1:
        state0 = 0;
        modificationCount = t1._modificationCount;
        t2 = $.getInterceptor$as(table);
        offset = 0;
      case 2:
        var entry;
        L0:
          while (true)
            switch (state0) {
              case 0:
                t3 = t2.get$length(table);
              case 2:
                state0 = 0;
                if (!$.CONSTANT2.$lt(offset, t3))
                  break L0;
                entry = t2.$index(table, offset);
                if (!t1._isFree$1(entry))
                  action.call$1(this._valueAt$2(offset, entry));
                t1._checkModification$1(modificationCount);
                offset += entrySize;
            }
    }
  },
  $asIterable: function() {
    return null;
  }
};

$$._HashTableIterator = {"": "Object;_hashTable>,_modificationCount>",
  moveNext$0: function() {
    var t1, table, entrySize, t2, t3, entry;
    t1 = this._hashTable;
    t1._checkModification$1(this._modificationCount);
    table = t1.get$_table();
    if (typeof table !== "string" && (typeof table !== "object" || table === null || table.constructor !== Array && !table.$isJavaScriptIndexingBehavior()))
      return this.moveNext$0$bailout(1, t1, table);
    entrySize = t1.get$_entrySize();
    for (; t2 = this._offset, t3 = table.length, t2 < t3;) {
      if (t2 !== (t2 | 0))
        throw $.iae(t2);
      if (t2 < 0 || t2 >= t3)
        throw $.ioore(t2);
      entry = table[t2];
      this._offset = t2 + entrySize;
      if (!t1._isFree$1(entry)) {
        this._liblib3$_current = this._valueAt$2(t2, entry);
        return true;
      }
    }
    this._liblib3$_current = null;
    return false;
  },
  moveNext$0$bailout: function(state0, t1, table, entrySize, t3, t2, t4) {
    switch (state0) {
      case 0:
        t1 = this._hashTable;
        t1._checkModification$1(this._modificationCount);
        table = t1.get$_table();
      case 1:
        state0 = 0;
        entrySize = t1.get$_entrySize();
        t2 = $.getInterceptor$as(table);
      case 2:
        var currentOffset, entry;
        L0:
          while (true)
            switch (state0) {
              case 0:
                t3 = this._offset;
                t4 = t2.get$length(table);
              case 2:
                state0 = 0;
                if (!$.CONSTANT2.$lt(t3, t4))
                  break L0;
                currentOffset = this._offset;
                entry = t2.$index(table, currentOffset);
                this._offset = currentOffset + entrySize;
                if (!t1._isFree$1(entry)) {
                  this._liblib3$_current = this._valueAt$2(currentOffset, entry);
                  return true;
                }
            }
        this._liblib3$_current = null;
        return false;
    }
  },
  get$current: function() {
    return this._liblib3$_current;
  }
};

$$._HashTableKeyIterable = {"": "_HashTableIterable;_hashTable",
  get$iterator: function(_) {
    return $._HashTableKeyIterator$(this._hashTable, $.getRuntimeTypeArgument(this, this["$as_HashTableKeyIterable"], 0));
  },
  _valueAt$2: function(offset, key) {
    if (key === $.CONSTANT4)
      return;
    return key;
  },
  contains$1: function(_, value) {
    return $.$$ge$n(this._hashTable._get$1(value), 0);
  },
  get$contains: function(receiver) {
    return new $.BoundClosure$i1(this, "contains$1", receiver);
  },
  $as_HashTableIterable: null,
  $asIterable: function() {
    return null;
  }
};

$$._HashTableKeyIterator = {"": "_HashTableIterator;_hashTable,_modificationCount,_offset,_liblib3$_current",
  _valueAt$2: function(offset, key) {
    if (key === $.CONSTANT4)
      return;
    return key;
  },
  $as_HashTableIterator: null
};

$$._HashTableValueIterable = {"": "_HashTableIterable;_entryIndex,_hashTable",
  get$iterator: function(_) {
    return $._HashTableValueIterator$(this._hashTable, this._entryIndex, $.getRuntimeTypeArgument(this, this["$as_HashTableValueIterable"], 0));
  },
  _valueAt$2: function(offset, key) {
    var t1, t3;
    t1 = this._hashTable._table;
    if (typeof t1 !== "string" && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !t1.$isJavaScriptIndexingBehavior()))
      return this._valueAt$2$bailout1(1, offset, t1);
    t3 = offset + this._entryIndex;
    if (t3 < 0 || t3 >= t1.length)
      throw $.ioore(t3);
    return t1[t3];
  },
  _valueAt$2$bailout1: function(state0, offset, t1) {
    return $.$$index$as(t1, offset + this._entryIndex);
  },
  $as_HashTableIterable: null,
  $asIterable: function() {
    return null;
  }
};

$$._HashTableValueIterator = {"": "_HashTableIterator;_entryIndex,_hashTable,_modificationCount,_offset,_liblib3$_current",
  _valueAt$2: function(offset, key) {
    return $.$$index$as(this._hashTable.get$_table(), $.$$add$n(offset, this._entryIndex));
  },
  $as_HashTableIterator: null
};

$$.HashSet = {"": "Collection;_table>",
  get$iterator: function(_) {
    return $._HashTableKeyIterator$(this._table, $.getRuntimeTypeArgument(this, this["$asHashSet"], 0));
  },
  get$length: function(_) {
    return this._table.get$_elementCount();
  },
  get$isEmpty: function(_) {
    return $.$$eq$o(this._table.get$_elementCount(), 0);
  },
  contains$1: function(_, object) {
    return $.$$ge$n(this._table._get$1(object), 0);
  },
  get$contains: function(receiver) {
    return new $.BoundClosure$i1(this, "contains$1", receiver);
  },
  add$1: function(_, element) {
    var t1 = this._table;
    t1._put$1(element);
    t1._checkCapacity$0();
  },
  addAll$1: function(_, objects) {
    var t1, t2;
    for (t1 = $.get$iterator$a(objects), t2 = this._table; t1.moveNext$0() === true;) {
      t2._put$1(t1.get$current());
      t2._checkCapacity$0();
    }
  },
  remove$1: function(_, object) {
    var t1, offset;
    t1 = this._table;
    offset = t1._remove$1(object);
    if (typeof offset !== "number")
      return this.remove$1$bailout1(1, offset, t1);
    t1._checkCapacity$0();
    return offset >= 0;
  },
  remove$1$bailout1: function(state0, offset, t1) {
    t1._checkCapacity$0();
    return $.$$ge$n(offset, 0);
  },
  get$remove: function(receiver) {
    return new $.BoundClosure$i1(this, "remove$1", receiver);
  },
  removeAll$1: function(_, objectsToRemove) {
    var t1, t2;
    for (t1 = $.get$iterator$a(objectsToRemove), t2 = this._table; t1.moveNext$0() === true;) {
      t2._remove$1(t1.get$current());
      t2._checkCapacity$0();
    }
  },
  _filterMatching$2: function(test, removeMatching) {
    var t1, entrySize, $length, offset, entry, key, modificationCount, t2;
    t1 = this._table;
    entrySize = t1.get$_entrySize();
    $length = $.get$length$as(t1._table);
    if (typeof $length !== "number")
      return this._filterMatching$2$bailout(1, test, removeMatching, $length, t1, entrySize);
    for (offset = 0; offset < $length; offset += entrySize) {
      entry = $.$$index$as(t1._table, offset);
      if (!t1._isFree$1(entry)) {
        key = entry === $.CONSTANT4 ? null : entry;
        modificationCount = t1._modificationCount;
        t2 = test.call$1(key);
        t1._checkModification$1(modificationCount);
        if (removeMatching === t2)
          t1._deleteEntry$1(offset);
      }
    }
    t1._checkCapacity$0();
  },
  _filterMatching$2$bailout: function(state0, test, removeMatching, $length, t1, entrySize) {
    var offset, entry, key, modificationCount, t2;
    for (offset = 0; $.CONSTANT2.$lt(offset, $length); offset += entrySize) {
      entry = $.$$index$as(t1._table, offset);
      if (!t1._isFree$1(entry)) {
        key = entry === $.CONSTANT4 ? null : entry;
        modificationCount = t1._modificationCount;
        t2 = test.call$1(key);
        t1._checkModification$1(modificationCount);
        if (removeMatching === t2)
          t1._deleteEntry$1(offset);
      }
    }
    t1._checkCapacity$0();
  },
  removeMatching$1: function(_, test) {
    this._filterMatching$2(test, true);
  },
  clear$0: function(_) {
    this._table._clear$0();
  },
  toString$0: function(_) {
    return $.ToString_collectionToString(this);
  },
  HashSet$0: function(E) {
    this._table._container = this;
  },
  $asCollection: function() {
    return null;
  },
  $asIterable: function() {
    return null;
  },
  $asSet: null,
  $isSet: true,
  $isCollection: function() {
    return true;
  },
  $isIterable: function() {
    return true;
  }
};

$$._HashMapTable = {"": "_HashTable;_table,_capacity,_entryCount,_deletedCount,_modificationCount,_container",
  get$_entrySize: function() {
    return 2;
  },
  _value$1: function(offset) {
    var t1, t3;
    if (typeof offset !== "number")
      return this._value$1$bailout(1, offset);
    t1 = this._table;
    if (typeof t1 !== "string" && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !t1.$isJavaScriptIndexingBehavior()))
      return this._value$1$bailout(2, offset, t1);
    t3 = offset + 1;
    if (t3 !== (t3 | 0))
      throw $.iae(t3);
    if (t3 < 0 || t3 >= t1.length)
      throw $.ioore(t3);
    return t1[t3];
  },
  _value$1$bailout: function(state0, offset, t1) {
    switch (state0) {
      case 0:
      case 1:
        state0 = 0;
        t1 = this._table;
      case 2:
        state0 = 0;
        return $.$$index$as(t1, $.$$add$n(offset, 1));
    }
  },
  _setValue$2: function(offset, value) {
    $.$$indexSet$a(this._table, $.$$add$n(offset, 1), value);
  },
  _copyEntry$3: function(fromTable, fromOffset, toOffset) {
    var t1, t3, t4;
    if (typeof fromTable !== "string" && (typeof fromTable !== "object" || fromTable === null || fromTable.constructor !== Array && !fromTable.$isJavaScriptIndexingBehavior()))
      return this._copyEntry$3$bailout1(1, fromTable, fromOffset, toOffset);
    if (typeof toOffset !== "number")
      return this._copyEntry$3$bailout1(1, fromTable, fromOffset, toOffset);
    t1 = this._table;
    if (typeof t1 !== "object" || t1 === null || (t1.constructor !== Array || !!t1.immutable$list) && !t1.$isJavaScriptIndexingBehavior())
      return this._copyEntry$3$bailout1(2, fromTable, fromOffset, toOffset, t1);
    t3 = toOffset + 1;
    t4 = fromOffset + 1;
    if (t4 < 0 || t4 >= fromTable.length)
      throw $.ioore(t4);
    t4 = fromTable[t4];
    if (t3 !== (t3 | 0))
      throw $.iae(t3);
    if (t3 < 0 || t3 >= t1.length)
      throw $.ioore(t3);
    t1[t3] = t4;
  },
  _copyEntry$3$bailout1: function(state0, fromTable, fromOffset, toOffset, t1) {
    switch (state0) {
      case 0:
      case 1:
        state0 = 0;
        t1 = this._table;
      case 2:
        state0 = 0;
        $.$$indexSet$a(t1, $.$$add$n(toOffset, 1), $.$$index$as(fromTable, fromOffset + 1));
    }
  },
  $as_HashTable: function (K, V) { return [K]; }
};

$$.HashMap = {"": "Object;_hashTable>",
  containsKey$1: function(key) {
    return $.$$ge$n(this._hashTable._get$1(key), 0);
  },
  addAll$1: function(_, other) {
    $.forEach$1$a(other, new $.HashMap_addAll_anon(this));
  },
  $index: function(_, key) {
    var t1, offset;
    t1 = this._hashTable;
    offset = t1._get$1(key);
    if (typeof offset !== "number")
      return this.$$index$bailout(1, t1, offset);
    if (offset >= 0)
      return t1._value$1(offset);
    return;
  },
  $$index$bailout: function(state0, t1, offset) {
    if ($.$$ge$n(offset, 0) === true)
      return t1._value$1(offset);
    return;
  },
  $indexSet: function(_, key, value) {
    var t1 = this._hashTable;
    t1._setValue$2(t1._put$1(key), value);
    t1._checkCapacity$0();
  },
  putIfAbsent$2: function(key, ifAbsent) {
    var t1, offset, entry, modificationCount, value;
    t1 = this._hashTable;
    offset = t1._probeForAdd$2(t1._hashCodeOf$1(key), key);
    entry = $.$$index$as(t1._table, offset);
    if (!t1._isFree$1(entry))
      return t1._value$1(offset);
    modificationCount = t1._modificationCount;
    value = ifAbsent.call$0();
    if (modificationCount === t1._modificationCount) {
      t1._setKey$2(offset, key);
      t1._setValue$2(offset, value);
      if (entry == null) {
        t1._entryCount = $.$$add$n(t1._entryCount, 1);
        t1._checkCapacity$0();
      } else
        t1._deletedCount = $.$$sub$n(t1._deletedCount, 1);
      t1._recordModification$0();
    } else {
      t1._setValue$2(t1._put$1(key), value);
      t1._checkCapacity$0();
    }
    return value;
  },
  remove$1: function(_, key) {
    var t1, offset, oldValue;
    t1 = this._hashTable;
    offset = t1._remove$1(key);
    if ($.$$lt$n(offset, 0) === true)
      return;
    oldValue = t1._value$1(offset);
    t1._setValue$2(offset, null);
    t1._checkCapacity$0();
    return oldValue;
  },
  get$remove: function(receiver) {
    return new $.BoundClosure$i1(this, "remove$1", receiver);
  },
  clear$0: function(_) {
    this._hashTable._clear$0();
  },
  forEach$1: function(_, action) {
    var t1, modificationCount, table, entrySize, offset, t2, entry;
    t1 = this._hashTable;
    modificationCount = t1._modificationCount;
    table = t1._table;
    if (typeof table !== "string" && (typeof table !== "object" || table === null || table.constructor !== Array && !table.$isJavaScriptIndexingBehavior()))
      return this.forEach$1$bailout(1, action, table, t1, modificationCount);
    entrySize = t1.get$_entrySize();
    for (offset = 0; t2 = table.length, offset < t2; offset += entrySize) {
      if (offset < 0)
        throw $.ioore(offset);
      entry = table[offset];
      if (!t1._isFree$1(entry)) {
        action.call$2(entry, t1._value$1(offset));
        t1._checkModification$1(modificationCount);
      }
    }
  },
  forEach$1$bailout: function(state0, action, table, t1, modificationCount) {
    var entrySize, t2, offset, entry;
    entrySize = t1.get$_entrySize();
    for (t2 = $.getInterceptor$as(table), offset = 0; $.CONSTANT2.$lt(offset, t2.get$length(table)); offset += entrySize) {
      entry = t2.$index(table, offset);
      if (!t1._isFree$1(entry)) {
        action.call$2(entry, t1._value$1(offset));
        t1._checkModification$1(modificationCount);
      }
    }
  },
  get$keys: function() {
    return $._HashTableKeyIterable$(this._hashTable, $.getRuntimeTypeArgument(this, this["$asHashMap"], 0));
  },
  get$values: function() {
    return $._HashTableValueIterable$(this._hashTable, 1, $.getRuntimeTypeArgument(this, this["$asHashMap"], 1));
  },
  get$length: function(_) {
    return this._hashTable.get$_elementCount();
  },
  get$isEmpty: function(_) {
    return $.$$eq$o(this._hashTable.get$_elementCount(), 0);
  },
  toString$0: function(_) {
    return $.ToString_mapToString(this);
  },
  HashMap$0: function(K, V) {
    this._hashTable._container = this;
  },
  $isMap: true
};

$$._LinkedHashTableHeadMarker = {"": "Object;"};

$$._LinkedHashTable = {"": "_HashTable;_table,_capacity,_entryCount,_deletedCount,_modificationCount,_container",
  get$_entrySize: function() {
    return 3;
  },
  _createTable$1: function(capacity) {
    var result, t1;
    result = $.List_List($.$$mul$n(capacity, this.get$_entrySize()), null);
    t1 = result.length;
    if (0 >= t1)
      throw $.ioore(0);
    result[0] = $.CONSTANT6;
    if (1 >= t1)
      throw $.ioore(1);
    result[1] = 0;
    if (2 >= t1)
      throw $.ioore(2);
    result[2] = 0;
    return result;
  },
  _next$1: function(offset) {
    var t1, t3;
    if (typeof offset !== "number")
      return this._next$1$bailout(1, offset);
    t1 = this._table;
    if (typeof t1 !== "string" && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !t1.$isJavaScriptIndexingBehavior()))
      return this._next$1$bailout(2, offset, t1);
    t3 = offset + 1;
    if (t3 !== (t3 | 0))
      throw $.iae(t3);
    if (t3 < 0 || t3 >= t1.length)
      throw $.ioore(t3);
    return t1[t3];
  },
  _next$1$bailout: function(state0, offset, t1) {
    switch (state0) {
      case 0:
      case 1:
        state0 = 0;
        t1 = this._table;
      case 2:
        state0 = 0;
        return $.$$index$as(t1, $.$$add$n(offset, 1));
    }
  },
  _prev$1: function(offset) {
    return $.$$index$as(this._table, offset + 2);
  },
  _linkLast$1: function(offset) {
    var last, t1;
    last = $.$$index$as(this._table, 2);
    t1 = $.getInterceptor$n(offset);
    $.$$indexSet$a(this._table, t1.$add(offset, 1), 0);
    $.$$indexSet$a(this._table, t1.$add(offset, 2), last);
    $.$$indexSet$a(this._table, $.$$add$n(last, 1), offset);
    $.$$indexSet$a(this._table, 2, offset);
  },
  _unlink$1: function(offset) {
    var t1, next, prev;
    t1 = $.getInterceptor$n(offset);
    next = $.$$index$as(this._table, t1.$add(offset, 1));
    prev = $.$$index$as(this._table, t1.$add(offset, 2));
    $.$$indexSet$a(this._table, t1.$add(offset, 1), null);
    $.$$indexSet$a(this._table, t1.$add(offset, 2), null);
    $.$$indexSet$a(this._table, $.$$add$n(prev, 1), next);
    $.$$indexSet$a(this._table, $.$$add$n(next, 2), prev);
  },
  _addAllEntries$1: function(oldTable) {
    var t1, offset, object, t2, nextOffset;
    if (typeof oldTable !== "string" && (typeof oldTable !== "object" || oldTable === null || oldTable.constructor !== Array && !oldTable.$isJavaScriptIndexingBehavior()))
      return this._addAllEntries$1$bailout1(1, oldTable);
    t1 = $.getInterceptor$as(oldTable);
    if (1 >= oldTable.length)
      throw $.ioore(1);
    offset = oldTable[1];
    if (typeof offset !== "number")
      return this._addAllEntries$1$bailout1(2, oldTable, offset, t1);
    for (; !$.$$eq$o(offset, 0); offset = nextOffset) {
      if (offset !== (offset | 0))
        throw $.iae(offset);
      t1 = oldTable.length;
      if (offset < 0 || offset >= t1)
        throw $.ioore(offset);
      object = oldTable[offset];
      t2 = offset + 1;
      if (t2 >= t1)
        throw $.ioore(t2);
      nextOffset = oldTable[t2];
      this._copyEntry$3(oldTable, offset, this._put$1(object));
    }
  },
  _addAllEntries$1$bailout1: function(state0, oldTable, offset, t1) {
    switch (state0) {
      case 0:
      case 1:
        state0 = 0;
        t1 = $.getInterceptor$as(oldTable);
        offset = t1.$index(oldTable, 1);
      case 2:
        var t2, object, nextOffset;
        state0 = 0;
        for (; t2 = $.getInterceptor(offset), t2.$eq(offset, 0) !== true; offset = nextOffset) {
          object = t1.$index(oldTable, offset);
          nextOffset = t1.$index(oldTable, t2.$add(offset, 1));
          this._copyEntry$3(oldTable, offset, this._put$1(object));
        }
    }
  },
  _clear$0: function() {
    var i;
    if ($.$$eq$o(this.get$_elementCount(), 0) === true)
      return;
    $.$$indexSet$a(this._table, 1, 0);
    $.$$indexSet$a(this._table, 2, 0);
    for (var i = this.get$_entrySize(); $.CONSTANT2.$lt(i, $.get$length$as(this._table)); ++i)
      $.$$indexSet$a(this._table, i, null);
    this._deletedCount = 0;
    this._entryCount = 0;
    this._recordModification$0();
  },
  _put$1: function(key) {
    var offset, t1, oldEntry;
    offset = this._probeForAdd$2($.get$hashCode$abnosu(key), key);
    t1 = this._table;
    if (typeof t1 !== "string" && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !t1.$isJavaScriptIndexingBehavior()))
      return this._put$1$bailout1(1, key, t1, offset);
    if (offset !== (offset | 0))
      throw $.iae(offset);
    if (offset < 0 || offset >= t1.length)
      throw $.ioore(offset);
    oldEntry = t1[offset];
    if (oldEntry === $.CONSTANT3) {
      t1 = this._deletedCount;
      if (typeof t1 !== "number")
        return this._put$1$bailout1(2, key, t1, offset);
      this._deletedCount = t1 - 1;
    } else if (oldEntry == null) {
      t1 = this._entryCount;
      if (typeof t1 !== "number")
        return this._put$1$bailout1(3, key, t1, offset);
      this._entryCount = t1 + 1;
    } else
      return offset;
    this._recordModification$0();
    if (key == null)
      key = $.CONSTANT4;
    t1 = this._table;
    if (typeof t1 !== "object" || t1 === null || (t1.constructor !== Array || !!t1.immutable$list) && !t1.$isJavaScriptIndexingBehavior())
      return this._put$1$bailout1(4, key, t1, offset);
    if (offset >= t1.length)
      throw $.ioore(offset);
    t1[offset] = key;
    this._linkLast$1(offset);
    return offset;
  },
  _put$1$bailout1: function(state0, key, t1, offset) {
    switch (state0) {
      case 0:
        offset = this._probeForAdd$2($.get$hashCode$abnosu(key), key);
        t1 = this._table;
      case 1:
        state0 = 0;
        oldEntry = $.$$index$as(t1, offset);
      default:
        if (state0 === 2 || state0 === 0 && oldEntry === $.CONSTANT3)
          switch (state0) {
            case 0:
              t1 = this._deletedCount;
            case 2:
              state0 = 0;
              this._deletedCount = $.$$sub$n(t1, 1);
          }
        else
          switch (state0) {
            case 0:
            case 3:
              if (state0 === 3 || state0 === 0 && oldEntry == null)
                switch (state0) {
                  case 0:
                    t1 = this._entryCount;
                  case 3:
                    state0 = 0;
                    this._entryCount = $.$$add$n(t1, 1);
                }
              else
                return offset;
          }
        this._recordModification$0();
        if (key == null)
          key = $.CONSTANT4;
        t1 = this._table;
      case 4:
        var oldEntry;
        state0 = 0;
        $.$$indexSet$a(t1, offset, key);
        this._linkLast$1(offset);
        return offset;
    }
  },
  _deleteEntry$1: function(offset) {
    var key;
    this._unlink$1(offset);
    key = $.CONSTANT3.$eq($.CONSTANT3, null) ? $.CONSTANT4 : $.CONSTANT3;
    $.$$indexSet$a(this._table, offset, key);
    this._deletedCount = $.$$add$n(this._deletedCount, 1);
    this._recordModification$0();
  },
  $as_HashTable: null
};

$$._LinkedHashTableKeyIterable = {"": "Iterable;_table>",
  get$iterator: function(_) {
    return $._LinkedHashTableKeyIterator$(this._table, $.getRuntimeTypeArgument(this, this["$as_LinkedHashTableKeyIterable"], 0));
  },
  contains$1: function(_, value) {
    return $.$$ge$n(this._table._get$1(value), 0);
  },
  get$contains: function(receiver) {
    return new $.BoundClosure$i1(this, "contains$1", receiver);
  },
  get$length: function(_) {
    return this._table.get$_elementCount();
  },
  $asIterable: function() {
    return null;
  }
};

$$._LinkedHashTableKeyIterator = {"": "_LinkedHashTableIterator;_hashTable,_modificationCount,_offset,_liblib3$_current",
  _getCurrent$1: function(offset) {
    return this._hashTable._key$1(offset);
  },
  $as_LinkedHashTableIterator: null
};

$$._LinkedHashTableValueIterable = {"": "Iterable;_hashTable>,_valueIndex",
  get$iterator: function(_) {
    return $._LinkedHashTableValueIterator$(this._hashTable, this._valueIndex, $.getRuntimeTypeArgument(this, this["$as_LinkedHashTableValueIterable"], 0));
  },
  get$length: function(_) {
    return this._hashTable.get$_elementCount();
  },
  $asIterable: function() {
    return null;
  }
};

$$._LinkedHashTableValueIterator = {"": "_LinkedHashTableIterator;_valueIndex,_hashTable,_modificationCount,_offset,_liblib3$_current",
  _getCurrent$1: function(offset) {
    return $.$$index$as(this._hashTable.get$_table(), $.$$add$n(offset, this._valueIndex));
  },
  $as_LinkedHashTableIterator: null
};

$$._LinkedHashTableIterator = {"": "Object;_hashTable>,_modificationCount>",
  moveNext$0: function() {
    var t1, t2;
    t1 = this._hashTable;
    t1._checkModification$1(this._modificationCount);
    t2 = this._offset;
    if (typeof t2 !== "number")
      return this.moveNext$0$bailout(1, t1, t2);
    if (t2 === 0) {
      this._liblib3$_current = null;
      return false;
    }
    this._liblib3$_current = this._getCurrent$1(t2);
    this._offset = t1._next$1(this._offset);
    return true;
  },
  moveNext$0$bailout: function(state0, t1, t2) {
    if ($.$$eq$o(t2, 0) === true) {
      this._liblib3$_current = null;
      return false;
    }
    this._liblib3$_current = this._getCurrent$1(this._offset);
    this._offset = t1._next$1(this._offset);
    return true;
  },
  get$current: function() {
    return this._liblib3$_current;
  }
};

$$.LinkedHashSet = {"": "Collection;_table>",
  get$iterator: function(_) {
    return $._LinkedHashTableKeyIterator$(this._table, $.getRuntimeTypeArgument(this, this["$asLinkedHashSet"], 0));
  },
  forEach$1: function(_, action) {
    var offset, modificationCount;
    offset = this._table._next$1(0);
    if (typeof offset !== "number")
      return this.forEach$1$bailout1(1, action, offset);
    modificationCount = this._table._modificationCount;
    for (; !$.$$eq$o(offset, 0);) {
      action.call$1(this._table._key$1(offset));
      this._table._checkModification$1(modificationCount);
      offset = this._table._next$1(offset);
    }
  },
  forEach$1$bailout1: function(state0, action, offset) {
    var modificationCount = this._table._modificationCount;
    for (; $.$$eq$o(offset, 0) !== true;) {
      action.call$1(this._table._key$1(offset));
      this._table._checkModification$1(modificationCount);
      offset = this._table._next$1(offset);
    }
  },
  get$length: function(_) {
    return this._table.get$_elementCount();
  },
  get$isEmpty: function(_) {
    return $.$$eq$o(this._table.get$_elementCount(), 0);
  },
  contains$1: function(_, object) {
    return $.$$ge$n(this._table._get$1(object), 0);
  },
  get$contains: function(receiver) {
    return new $.BoundClosure$i1(this, "contains$1", receiver);
  },
  get$last: function(_) {
    var lastOffset = this._table._prev$1(0);
    if ($.$$eq$o(lastOffset, 0) === true)
      throw $.$$throw($.StateError$("No elements"));
    return this._table._key$1(lastOffset);
  },
  add$1: function(_, element) {
    this._table._put$1(element);
    this._table._checkCapacity$0();
  },
  addAll$1: function(_, objects) {
    var t1, t2;
    for (t1 = $.get$iterator$a(objects); t1.moveNext$0() === true;) {
      t2 = t1.get$current();
      this._table._put$1(t2);
      this._table._checkCapacity$0();
    }
  },
  remove$1: function(_, object) {
    var offset = this._table._remove$1(object);
    if (typeof offset !== "number")
      return this.remove$1$bailout1(1, offset);
    if (offset >= 0) {
      this._table._checkCapacity$0();
      return true;
    }
    return false;
  },
  remove$1$bailout1: function(state0, offset) {
    if ($.$$ge$n(offset, 0) === true) {
      this._table._checkCapacity$0();
      return true;
    }
    return false;
  },
  get$remove: function(receiver) {
    return new $.BoundClosure$i1(this, "remove$1", receiver);
  },
  removeAll$1: function(_, objectsToRemove) {
    var t1, t2;
    for (t1 = $.get$iterator$a(objectsToRemove); t1.moveNext$0() === true;) {
      t2 = t1.get$current();
      this._table._remove$1(t2);
      this._table._checkCapacity$0();
    }
  },
  _filterMatching$2: function(test, removeMatching) {
    var offset, t1, t2, key, nextOffset, modificationCount;
    this._table.get$_entrySize();
    $.get$length$as(this._table._table);
    offset = this._table._next$1(0);
    if (typeof offset !== "number")
      return this._filterMatching$2$bailout(1, test, removeMatching, offset);
    for (; t1 = $.$$eq$o(offset, 0), t2 = this._table, !t1; offset = nextOffset) {
      key = t2._key$1(offset);
      nextOffset = this._table._next$1(offset);
      modificationCount = this._table._modificationCount;
      t1 = test.call$1(key);
      this._table._checkModification$1(modificationCount);
      if (removeMatching === t1)
        this._table._deleteEntry$1(offset);
    }
    t2._checkCapacity$0();
  },
  _filterMatching$2$bailout: function(state0, test, removeMatching, offset) {
    var t1, t2, key, nextOffset, modificationCount;
    for (; t1 = $.$$eq$o(offset, 0), t2 = this._table, t1 !== true; offset = nextOffset) {
      key = t2._key$1(offset);
      nextOffset = this._table._next$1(offset);
      modificationCount = this._table._modificationCount;
      t1 = test.call$1(key);
      this._table._checkModification$1(modificationCount);
      if (removeMatching === t1)
        this._table._deleteEntry$1(offset);
    }
    t2._checkCapacity$0();
  },
  removeMatching$1: function(_, test) {
    this._filterMatching$2(test, true);
  },
  clear$0: function(_) {
    this._table._clear$0();
  },
  toString$0: function(_) {
    return $.ToString_collectionToString(this);
  },
  LinkedHashSet$0: function(E) {
    this._table._container = this;
  },
  $asCollection: function() {
    return null;
  },
  $asIterable: function() {
    return null;
  },
  $asSet: null,
  $isSet: true,
  $isCollection: function() {
    return true;
  },
  $isIterable: function() {
    return true;
  }
};

$$._LinkedHashMapTable = {"": "_LinkedHashTable;_table,_capacity,_entryCount,_deletedCount,_modificationCount,_container",
  get$_entrySize: function() {
    return 4;
  },
  _value$1: function(offset) {
    var t1, t3;
    if (typeof offset !== "number")
      return this._value$1$bailout(1, offset);
    t1 = this._table;
    if (typeof t1 !== "string" && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !t1.$isJavaScriptIndexingBehavior()))
      return this._value$1$bailout(2, offset, t1);
    t3 = offset + 3;
    if (t3 !== (t3 | 0))
      throw $.iae(t3);
    if (t3 < 0 || t3 >= t1.length)
      throw $.ioore(t3);
    return t1[t3];
  },
  _value$1$bailout: function(state0, offset, t1) {
    switch (state0) {
      case 0:
      case 1:
        state0 = 0;
        t1 = this._table;
      case 2:
        state0 = 0;
        return $.$$index$as(t1, $.$$add$n(offset, 3));
    }
  },
  _setValue$2: function(offset, value) {
    $.$$indexSet$a(this._table, $.$$add$n(offset, 3), value);
  },
  _copyEntry$3: function(oldTable, fromOffset, toOffset) {
    var t1, t3, t4;
    if (typeof oldTable !== "string" && (typeof oldTable !== "object" || oldTable === null || oldTable.constructor !== Array && !oldTable.$isJavaScriptIndexingBehavior()))
      return this._copyEntry$3$bailout1(1, oldTable, fromOffset, toOffset);
    if (typeof fromOffset !== "number")
      return this._copyEntry$3$bailout1(1, oldTable, fromOffset, toOffset);
    if (typeof toOffset !== "number")
      return this._copyEntry$3$bailout1(1, oldTable, fromOffset, toOffset);
    t1 = this._table;
    if (typeof t1 !== "object" || t1 === null || (t1.constructor !== Array || !!t1.immutable$list) && !t1.$isJavaScriptIndexingBehavior())
      return this._copyEntry$3$bailout1(2, oldTable, fromOffset, toOffset, t1);
    t3 = toOffset + 3;
    t4 = fromOffset + 3;
    if (t4 !== (t4 | 0))
      throw $.iae(t4);
    if (t4 < 0 || t4 >= oldTable.length)
      throw $.ioore(t4);
    t4 = oldTable[t4];
    if (t3 !== (t3 | 0))
      throw $.iae(t3);
    if (t3 < 0 || t3 >= t1.length)
      throw $.ioore(t3);
    t1[t3] = t4;
  },
  _copyEntry$3$bailout1: function(state0, oldTable, fromOffset, toOffset, t1) {
    switch (state0) {
      case 0:
      case 1:
        state0 = 0;
        t1 = this._table;
      case 2:
        state0 = 0;
        $.$$indexSet$a(t1, $.$$add$n(toOffset, 3), $.$$index$as(oldTable, $.$$add$n(fromOffset, 3)));
    }
  },
  $as_LinkedHashTable: function (K, V) { return [K]; }
};

$$.LinkedHashMap = {"": "Object;_hashTable>",
  containsKey$1: function(key) {
    return $.$$ge$n(this._hashTable._get$1(key), 0);
  },
  addAll$1: function(_, other) {
    $.forEach$1$a(other, new $.LinkedHashMap_addAll_anon(this));
  },
  $index: function(_, key) {
    var t1, offset;
    t1 = this._hashTable;
    offset = t1._get$1(key);
    if (typeof offset !== "number")
      return this.$$index$bailout(1, t1, offset);
    if (offset >= 0)
      return t1._value$1(offset);
    return;
  },
  $$index$bailout: function(state0, t1, offset) {
    if ($.$$ge$n(offset, 0) === true)
      return t1._value$1(offset);
    return;
  },
  $indexSet: function(_, key, value) {
    var t1 = this._hashTable;
    t1._setValue$2(t1._put$1(key), value);
    t1._checkCapacity$0();
  },
  remove$1: function(_, key) {
    var t1, offset, oldValue;
    t1 = this._hashTable;
    offset = t1._remove$1(key);
    if ($.$$lt$n(offset, 0) === true)
      return;
    oldValue = t1._value$1(offset);
    t1._setValue$2(offset, null);
    t1._checkCapacity$0();
    return oldValue;
  },
  get$remove: function(receiver) {
    return new $.BoundClosure$i1(this, "remove$1", receiver);
  },
  clear$0: function(_) {
    this._hashTable._clear$0();
  },
  forEach$1: function(_, action) {
    var t1, modificationCount, offset;
    t1 = this._hashTable;
    modificationCount = t1._modificationCount;
    offset = t1._next$1(0);
    if (typeof offset !== "number")
      return this.forEach$1$bailout(1, action, t1, modificationCount, offset);
    for (; !$.$$eq$o(offset, 0); offset = t1._next$1(offset)) {
      action.call$2(t1._key$1(offset), t1._value$1(offset));
      t1._checkModification$1(modificationCount);
    }
  },
  forEach$1$bailout: function(state0, action, t1, modificationCount, offset) {
    for (; $.$$eq$o(offset, 0) !== true; offset = t1._next$1(offset)) {
      action.call$2(t1._key$1(offset), t1._value$1(offset));
      t1._checkModification$1(modificationCount);
    }
  },
  get$keys: function() {
    return $._LinkedHashTableKeyIterable$(this._hashTable, $.getRuntimeTypeArgument(this, this["$asLinkedHashMap"], 0));
  },
  get$values: function() {
    return $._LinkedHashTableValueIterable$(this._hashTable, 3, $.getRuntimeTypeArgument(this, this["$asLinkedHashMap"], 1));
  },
  get$length: function(_) {
    return this._hashTable.get$_elementCount();
  },
  get$isEmpty: function(_) {
    return $.$$eq$o(this._hashTable.get$_elementCount(), 0);
  },
  toString$0: function(_) {
    return $.ToString_mapToString(this);
  },
  LinkedHashMap$0: function(K, V) {
    this._hashTable._container = this;
  },
  $isLinkedHashMap: true,
  $isMap: true
};

$$.ListIterable = {"": "Iterable;",
  get$iterator: function(_) {
    return $.ListIterator$(this, $.getRuntimeTypeArgument(this, this["$asListIterable"], 0));
  },
  forEach$1: function(_, action) {
    var $length, i;
    $length = this.get$length(this);
    if (typeof $length !== "number")
      return this.forEach$1$bailout1(1, action, $length);
    for (i = 0; i < $length; ++i) {
      action.call$1(this.elementAt$1(this, i));
      if ($length !== this.get$length(this))
        throw $.$$throw($.ConcurrentModificationError$(this));
    }
  },
  forEach$1$bailout1: function(state0, action, $length) {
    var t1, i;
    for (t1 = $.getInterceptor($length), i = 0; $.CONSTANT2.$lt(i, $length); ++i) {
      action.call$1(this.elementAt$1(this, i));
      if (t1.$eq($length, this.get$length(this)) !== true)
        throw $.$$throw($.ConcurrentModificationError$(this));
    }
  },
  get$isEmpty: function(_) {
    return $.$$eq$o(this.get$length(this), 0);
  },
  get$last: function(_) {
    if ($.$$eq$o(this.get$length(this), 0) === true)
      throw $.$$throw($.StateError$("No elements"));
    return this.elementAt$1(this, $.$$sub$n(this.get$length(this), 1));
  },
  contains$1: function(_, element) {
    var $length, i;
    $length = this.get$length(this);
    if (typeof $length !== "number")
      return this.contains$1$bailout1(1, element, $length);
    for (i = 0; i < $length; ++i) {
      if ($.$$eq$o(this.elementAt$1(this, i), element) === true)
        return true;
      if ($length !== this.get$length(this))
        throw $.$$throw($.ConcurrentModificationError$(this));
    }
    return false;
  },
  contains$1$bailout1: function(state0, element, $length) {
    var t1, i;
    for (t1 = $.getInterceptor($length), i = 0; $.CONSTANT2.$lt(i, $length); ++i) {
      if ($.$$eq$o(this.elementAt$1(this, i), element) === true)
        return true;
      if (t1.$eq($length, this.get$length(this)) !== true)
        throw $.$$throw($.ConcurrentModificationError$(this));
    }
    return false;
  },
  get$contains: function(receiver) {
    return new $.BoundClosure$i1(this, "contains$1", receiver);
  },
  every$1: function(_, test) {
    var $length, i;
    $length = this.get$length(this);
    if (typeof $length !== "number")
      return this.every$1$bailout1(1, test, $length);
    for (i = 0; i < $length; ++i) {
      if (test.call$1(this.elementAt$1(this, i)) !== true)
        return false;
      if ($length !== this.get$length(this))
        throw $.$$throw($.ConcurrentModificationError$(this));
    }
    return true;
  },
  every$1$bailout1: function(state0, test, $length) {
    var t1, i;
    for (t1 = $.getInterceptor($length), i = 0; $.CONSTANT2.$lt(i, $length); ++i) {
      if (test.call$1(this.elementAt$1(this, i)) !== true)
        return false;
      if (t1.$eq($length, this.get$length(this)) !== true)
        throw $.$$throw($.ConcurrentModificationError$(this));
    }
    return true;
  },
  join$1: function(_, separator) {
    var $length, first, buffer, i;
    $length = this.get$length(this);
    if (typeof $length !== "number")
      return this.join$1$bailout1(1, separator, $length);
    if (separator != null && $.get$isEmpty$as(separator) !== true) {
      if ($length === 0)
        return "";
      first = $.S(this.elementAt$1(this, 0));
      if ($length !== this.get$length(this))
        throw $.$$throw($.ConcurrentModificationError$(this));
      buffer = $.StringBuffer$(first);
      for (i = 1; i < $length; ++i) {
        buffer.add$1(buffer, separator);
        buffer.add$1(buffer, $.S(this.elementAt$1(this, i)));
        if ($length !== this.get$length(this))
          throw $.$$throw($.ConcurrentModificationError$(this));
      }
      return buffer.toString$0(buffer);
    } else {
      buffer = $.StringBuffer$("");
      for (i = 0; i < $length; ++i) {
        buffer.add$1(buffer, $.S(this.elementAt$1(this, i)));
        if ($length !== this.get$length(this))
          throw $.$$throw($.ConcurrentModificationError$(this));
      }
      return buffer.toString$0(buffer);
    }
  },
  join$1$bailout1: function(state0, separator, $length) {
    var t1, first, buffer, i;
    if (separator != null && $.get$isEmpty$as(separator) !== true) {
      t1 = $.getInterceptor($length);
      if (t1.$eq($length, 0) === true)
        return "";
      first = $.S(this.elementAt$1(this, 0));
      if (t1.$eq($length, this.get$length(this)) !== true)
        throw $.$$throw($.ConcurrentModificationError$(this));
      buffer = $.StringBuffer$(first);
      for (i = 1; $.CONSTANT2.$lt(i, $length); ++i) {
        buffer.add$1(buffer, separator);
        buffer.add$1(buffer, $.S(this.elementAt$1(this, i)));
        if (t1.$eq($length, this.get$length(this)) !== true)
          throw $.$$throw($.ConcurrentModificationError$(this));
      }
      return buffer.toString$0(buffer);
    } else {
      buffer = $.StringBuffer$("");
      for (t1 = $.getInterceptor($length), i = 0; $.CONSTANT2.$lt(i, $length); ++i) {
        buffer.add$1(buffer, $.S(this.elementAt$1(this, i)));
        if (t1.$eq($length, this.get$length(this)) !== true)
          throw $.$$throw($.ConcurrentModificationError$(this));
      }
      return buffer.toString$0(buffer);
    }
  },
  where$1: function(_, test) {
    return $.Iterable.prototype.where$1.call(this, this, test);
  },
  map$1: function(_, f) {
    return $.MappedListIterable$(this, f, null, null);
  },
  skip$1: function(_, count) {
    return $.SubListIterable$(this, count, null, null);
  },
  toList$1$growable: function(_, growable) {
    var t1, result, i;
    if (growable === true) {
      t1 = this.get$length(this);
      result = $.List_List($, $.getRuntimeTypeArgument(this, this["$asListIterable"], 0));
      $.setRuntimeTypeInfo(result, [$.getRuntimeTypeArgument(this, this["$asListIterable"], 0)]);
      $.CONSTANT0.set$length(result, t1);
    } else {
      result = $.List_List(this.get$length(this), $.getRuntimeTypeArgument(this, this["$asListIterable"], 0));
      $.setRuntimeTypeInfo(result, [$.getRuntimeTypeArgument(this, this["$asListIterable"], 0)]);
    }
    i = 0;
    while (true) {
      t1 = this.get$length(this);
      if (typeof t1 !== "number")
        return this.toList$1$growable$bailout1(1, i, t1, result);
      if (!(i < t1))
        break;
      t1 = this.elementAt$1(this, i);
      if (i >= result.length)
        throw $.ioore(i);
      result[i] = t1;
      ++i;
    }
    return result;
  },
  toList$1$growable$bailout1: function(state0, i, t1, result) {
    switch (state0) {
      case 0:
        if (growable === true) {
          t1 = this.get$length(this);
          result = $.List_List($, $.getRuntimeTypeArgument(this, this["$asListIterable"], 0));
          $.setRuntimeTypeInfo(result, [$.getRuntimeTypeArgument(this, this["$asListIterable"], 0)]);
          $.CONSTANT0.set$length(result, t1);
        } else {
          result = $.List_List(this.get$length(this), $.getRuntimeTypeArgument(this, this["$asListIterable"], 0));
          $.setRuntimeTypeInfo(result, [$.getRuntimeTypeArgument(this, this["$asListIterable"], 0)]);
        }
        i = 0;
      case 1:
        L0:
          while (true)
            switch (state0) {
              case 0:
                t1 = this.get$length(this);
              case 1:
                state0 = 0;
                if (!$.CONSTANT2.$lt(i, t1))
                  break L0;
                t1 = this.elementAt$1(this, i);
                if (i >= result.length)
                  throw $.ioore(i);
                result[i] = t1;
                ++i;
            }
        return result;
    }
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  toSet$0: function(_) {
    var result, i;
    result = $.HashSet$($.getRuntimeTypeArgument(this, this["$asListIterable"], 0));
    for (i = 0; $.CONSTANT2.$lt(i, this.get$length(this)); ++i)
      result.add$1(result, this.elementAt$1(this, i));
    return result;
  },
  $asIterable: function() {
    return null;
  }
};

$$.SubListIterable = {"": "ListIterable;_iterable,_start,_endOrLength",
  get$_endIndex: function() {
    var $length, t1;
    $length = $.get$length$as(this._iterable);
    t1 = this._endOrLength;
    if (t1 == null || $.$$gt$n(t1, $length))
      return $length;
    return t1;
  },
  get$_startIndex: function() {
    var $length, t1;
    $length = $.get$length$as(this._iterable);
    t1 = this._start;
    if ($.$$gt$n(t1, $length) === true)
      return $length;
    return t1;
  },
  get$length: function(_) {
    var $length, t1, t2;
    $length = $.get$length$as(this._iterable);
    if (typeof $length !== "number")
      return this.get$length$bailout2(1, $length);
    t1 = this._start;
    if (typeof t1 !== "number")
      return this.get$length$bailout2(2, $length, t1);
    if (t1 >= $length)
      return 0;
    t2 = this._endOrLength;
    if (t2 !== (t2 | 0))
      return this.get$length$bailout2(3, $length, t1, t2);
    if (t2 >= $length)
      return $length - t1;
    return t2 - t1;
  },
  get$length$bailout2: function(state0, $length, t1, t2) {
    switch (state0) {
      case 0:
        $length = $.get$length$as(this._iterable);
      case 1:
        state0 = 0;
        t1 = this._start;
      case 2:
        state0 = 0;
        if ($.$$ge$n(t1, $length) === true)
          return 0;
        t2 = this._endOrLength;
      case 3:
        state0 = 0;
        if (t2 == null || $.$$ge$n(t2, $length))
          return $.$$sub$n($length, t1);
        return $.$$sub$n(t2, t1);
    }
  },
  elementAt$1: function(_, index) {
    var t1, realIndex;
    if (typeof index !== "number")
      return this.elementAt$1$bailout2(1, index);
    t1 = this.get$_startIndex();
    if (typeof t1 !== "number")
      return this.elementAt$1$bailout2(2, index, t1);
    realIndex = t1 + index;
    if (!(index < 0)) {
      t1 = this.get$_endIndex();
      if (typeof t1 !== "number")
        return this.elementAt$1$bailout2(3, index, t1, realIndex);
      t1 = realIndex >= t1;
    } else
      t1 = true;
    if (t1)
      throw $.$$throw($.RangeError$range(index, 0, this.get$length(this)));
    return $.elementAt$1$a(this._iterable, realIndex);
  },
  elementAt$1$bailout2: function(state0, index, t1, realIndex) {
    switch (state0) {
      case 0:
      case 1:
        state0 = 0;
        t1 = this.get$_startIndex();
      case 2:
        state0 = 0;
        realIndex = $.$$add$n(t1, index);
      case 3:
        var t3;
        if (state0 === 3 || state0 === 0 && $.$$lt$n(index, 0) !== true)
          switch (state0) {
            case 0:
              t1 = this.get$_endIndex();
            case 3:
              state0 = 0;
              t3 = $.$$ge$n(realIndex, t1) === true;
              t1 = t3;
          }
        else
          t1 = true;
        if (t1)
          throw $.$$throw($.RangeError$range(index, 0, this.get$length(this)));
        return $.elementAt$1$a(this._iterable, realIndex);
    }
  },
  skip$1: function(_, count) {
    if ($.$$lt$n(count, 0) === true)
      throw $.$$throw($.ArgumentError$(count));
    return $.SubListIterable$(this._iterable, $.$$add$n(this._start, count), this._endOrLength, null);
  },
  $asListIterable: null,
  $asIterable: function() {
    return null;
  }
};

$$.ListIterator = {"": "Object;_iterable,_liblib$_length,_index,_liblib$_current",
  get$current: function() {
    return this._liblib$_current;
  },
  moveNext$0: function() {
    var t1, t2, t3;
    t1 = this._liblib$_length;
    t2 = this._iterable;
    if ($.$$eq$o(t1, $.get$length$as(t2)) !== true)
      throw $.$$throw($.ConcurrentModificationError$(t2));
    t3 = this._index;
    if (t3 === t1) {
      this._liblib$_current = null;
      return false;
    }
    this._liblib$_current = $.elementAt$1$a(t2, t3);
    this._index = this._index + 1;
    return true;
  }
};

$$.MappedIterable = {"": "Iterable;_iterable,_f",
  _f$1: function(arg0) {
    return this._f.call$1(arg0);
  },
  get$iterator: function(_) {
    var t1 = this._iterable;
    return $.MappedIterator$(t1.get$iterator(t1), this._f, $.getRuntimeTypeArgument(this, this["$asMappedIterable"], 0), $.getRuntimeTypeArgument(this, this["$asMappedIterable"], 1));
  },
  get$length: function(_) {
    var t1 = this._iterable;
    return t1.get$length(t1);
  },
  get$isEmpty: function(_) {
    var t1 = this._iterable;
    return t1.get$isEmpty(t1);
  },
  get$last: function(_) {
    var t1 = this._iterable;
    return this._f$1(t1.get$last(t1));
  },
  elementAt$1: function(_, index) {
    var t1 = this._iterable;
    return this._f$1(t1.elementAt$1(t1, index));
  },
  $asIterable: function() {
    return function (S, T) { return [T]; };
  }
};

$$.MappedIterator = {"": "Iterator;_liblib$_current,_iterator,_f",
  _f$1: function(arg0) {
    return this._f.call$1(arg0);
  },
  moveNext$0: function() {
    var t1 = this._iterator;
    if (t1.moveNext$0() === true) {
      this._liblib$_current = this._f$1(t1.get$current());
      return true;
    }
    this._liblib$_current = null;
    return false;
  },
  get$current: function() {
    return this._liblib$_current;
  },
  $asIterator: function (S, T) { return [T]; }
};

$$.MappedListIterable = {"": "ListIterable;_liblib$_source,_f",
  _f$1: function(arg0) {
    return this._f.call$1(arg0);
  },
  get$length: function(_) {
    return $.get$length$as(this._liblib$_source);
  },
  elementAt$1: function(_, index) {
    return this._f$1($.elementAt$1$a(this._liblib$_source, index));
  },
  $asListIterable: function (S, T) { return [T]; },
  $asIterable: function() {
    return function (S, T) { return [T]; };
  }
};

$$.WhereIterable = {"": "Iterable;_iterable,_f",
  get$iterator: function(_) {
    return $.WhereIterator$($.get$iterator$a(this._iterable), this._f, $.getRuntimeTypeArgument(this, this["$asWhereIterable"], 0));
  },
  $asIterable: function() {
    return null;
  }
};

$$.WhereIterator = {"": "Iterator;_iterator,_f",
  _f$1: function(arg0) {
    return this._f.call$1(arg0);
  },
  moveNext$0: function() {
    for (var t1 = this._iterator; t1.moveNext$0() === true;)
      if (this._f$1(t1.get$current()) === true)
        return true;
    return false;
  },
  get$current: function() {
    return this._iterator.get$current();
  },
  $asIterator: null
};

$$.SkipIterable = {"": "Iterable;_iterable,_skipCount",
  skip$1: function(_, n) {
    if (!(typeof n === "number" && Math.floor(n) === n) || n < 0)
      throw $.$$throw($.ArgumentError$(n));
    return $.SkipIterable$(this._iterable, $.$$add$n(this._skipCount, n), $.getRuntimeTypeArgument(this, this["$asSkipIterable"], 0));
  },
  get$iterator: function(_) {
    return $.SkipIterator$($.get$iterator$a(this._iterable), this._skipCount, $.getRuntimeTypeArgument(this, this["$asSkipIterable"], 0));
  },
  SkipIterable$2: function(_iterable, _skipCount, E) {
    var t1 = this._skipCount;
    if (!(typeof t1 === "number" && Math.floor(t1) === t1) || $.$$lt$n(t1, 0) === true)
      throw $.$$throw($.ArgumentError$(t1));
  },
  $asIterable: function() {
    return null;
  }
};

$$.SkipIterator = {"": "Iterator;_iterator,_skipCount",
  moveNext$0: function() {
    var t1, i, t2;
    t1 = this._iterator;
    i = 0;
    while (true) {
      t2 = this._skipCount;
      if (typeof t2 !== "number")
        return this.moveNext$0$bailout1(1, t1, i, t2);
      if (!(i < t2))
        break;
      t1.moveNext$0();
      ++i;
    }
    this._skipCount = 0;
    return t1.moveNext$0();
  },
  moveNext$0$bailout1: function(state0, t1, i, t2) {
    switch (state0) {
      case 0:
        t1 = this._iterator;
        i = 0;
      case 1:
        L0:
          while (true)
            switch (state0) {
              case 0:
                t2 = this._skipCount;
              case 1:
                state0 = 0;
                if (!$.CONSTANT2.$lt(i, t2))
                  break L0;
                t1.moveNext$0();
                ++i;
            }
        this._skipCount = 0;
        return t1.moveNext$0();
    }
  },
  get$current: function() {
    return this._iterator.get$current();
  },
  SkipIterator$2: function(_iterator, _skipCount, E) {
  },
  $asIterator: null
};

$$._Manager = {"": "Object;nextIsolateId=,currentManagerId,nextManagerId,currentContext>,rootContext,topEventLoop>,fromCommandLine,isWorker>,supportsWorkers,isolates,mainManager,managers",
  get$useWorkers: function() {
    return this.supportsWorkers;
  },
  get$needSerialization: function() {
    return this.get$useWorkers();
  },
  _nativeDetectEnvironment$0: function() {
    var t1, t2;
    t1 = $.get$globalWindow() == null;
    this.isWorker = t1 && $.get$globalPostMessageDefined() === true;
    if (this.isWorker !== true)
      t2 = $.get$globalWorker() != null && $.get$IsolateNatives_thisScript() != null;
    else
      t2 = true;
    this.supportsWorkers = t2;
    this.fromCommandLine = t1 && this.isWorker !== true;
  },
  _nativeInitWorkerMessageHandler$0: function() {
    var $function = function (e) { $.IsolateNatives__processWorkerMessage.call$2(this.mainManager, e); };
    $.get$globalThis().onmessage = $function;
    $.get$globalThis().dartPrint = function (object) {};
  },
  maybeCloseWorker$0: function() {
    if (this.isWorker === true && $.get$isEmpty$as(this.isolates) === true && $.$$eq$o(this.topEventLoop.get$activeTimerCount(), 0) === true)
      this.mainManager.postMessage$1($._serializeMessage($.makeLiteralMap(["command", "close"])));
  },
  _Manager$0: function() {
    this._nativeDetectEnvironment$0();
    this.topEventLoop = $._EventLoop$();
    this.isolates = $.Map_Map($.$int, $._IsolateContext);
    this.managers = $.Map_Map($.$int, $._ManagerStub);
    if (this.isWorker === true) {
      this.mainManager = $._MainManagerStub$();
      this._nativeInitWorkerMessageHandler$0();
    }
  }
};

$$._IsolateContext = {"": "Object;id>,ports>,isolateStatics",
  eval$1: function(code) {
    var old, result;
    old = $globalState.currentContext;
    $globalState.currentContext = this;
    $ = this.isolateStatics;
    result = null;
    try {
      result = code.call$0();
    } finally {
      $globalState.currentContext = old;
      if (old != null)
        old._setGlobals$0();
    }
    return result;
  },
  _setGlobals$0: function() {
    $ = this.isolateStatics;
  },
  lookup$1: function(portId) {
    return $.$$index$as(this.ports, portId);
  },
  register$2: function(portId, port) {
    if (this.ports.containsKey$1(portId) === true)
      throw $.$$throw($._ExceptionImplementation$("Registry: ports must be registered only once."));
    $.$$indexSet$a(this.ports, portId, port);
    $.$$indexSet$a($globalState.isolates, this.id, this);
  },
  unregister$1: function(portId) {
    $.remove$1$a(this.ports, portId);
    if ($.get$isEmpty$as(this.ports) === true)
      $.remove$1$a($globalState.isolates, this.id);
  },
  _IsolateContext$0: function() {
    var t1, t2;
    t1 = $._globalState();
    t2 = t1.get$nextIsolateId();
    t1.set$nextIsolateId($.$$add$n(t2, 1));
    this.id = t2;
    this.ports = $.Map_Map($.$int, $.ReceivePort);
    this.isolateStatics = new Isolate;
  }
};

$$._EventLoop = {"": "Object;events,activeTimerCount=",
  enqueue$3: function(isolate, fn, msg) {
    var t1 = this.events;
    t1.addLast$1(t1, $._IsolateEvent$(isolate, fn, msg));
  },
  dequeue$0: function() {
    var t1 = this.events;
    if (t1.get$isEmpty(t1) === true)
      return;
    return t1.removeFirst$0();
  },
  checkOpenReceivePortsFromCommandLine$0: function() {
    if ($globalState.rootContext != null && $globalState.isolates.containsKey$1($globalState.rootContext.get$id()) === true && $globalState.fromCommandLine === true && $.get$isEmpty$as($globalState.rootContext.get$ports()) === true)
      throw $.$$throw($._ExceptionImplementation$("Program exited with open ReceivePorts."));
  },
  runIteration$0: function() {
    var $event = this.dequeue$0();
    if ($event == null) {
      this.checkOpenReceivePortsFromCommandLine$0();
      $globalState.maybeCloseWorker$0();
      return false;
    }
    $event.process$0();
    return true;
  },
  _runHelper$0: function() {
    if ($.get$globalWindow() != null)
      new $._EventLoop__runHelper_next(this).call$0();
    else
      for (; this.runIteration$0();)
        ;
  },
  run$0: function() {
    var e, trace, exception, t1;
    if ($globalState.isWorker !== true)
      this._runHelper$0();
    else
      try {
        this._runHelper$0();
      } catch (exception) {
        t1 = $.unwrapException(exception);
        e = t1;
        trace = $.getTraceFromException(exception);
        $globalState.mainManager.postMessage$1($._serializeMessage($.makeLiteralMap(["command", "error", "msg", $.S(e) + "\n" + $.S(trace)])));
      }

  }
};

$$._IsolateEvent = {"": "Object;isolate,fn,message",
  process$0: function() {
    this.isolate.eval$1(this.fn);
  }
};

$$._MainManagerStub = {"": "Object;",
  get$id: function() {
    return 0;
  },
  postMessage$1: function(msg) {
    $.get$globalThis().postMessage(msg);
  },
  terminate$0: function() {
  }
};

$$._BaseSendPort = {"": "Object;_isolateId>",
  _checkReplyTo$1: function(replyTo) {
    if (replyTo != null && !(typeof replyTo === "object" && replyTo !== null && !!replyTo.$is_NativeJsSendPort) && !(typeof replyTo === "object" && replyTo !== null && !!replyTo.$is_WorkerSendPort) && !(typeof replyTo === "object" && replyTo !== null && !!replyTo.$is_BufferingSendPort))
      throw $.$$throw($._ExceptionImplementation$("SendPort.send: Illegal replyTo port type"));
  },
  call$1: function(message) {
    var completer, port;
    completer = $._CompleterImpl$(null);
    port = $.ReceivePortImpl$();
    this.send$2(message, port.toSendPort$0());
    port.receive$1(new $._BaseSendPort_call_anon(completer, port));
    return completer.future;
  },
  $isFunction: true,
  $isSendPort: true
};

$$._NativeJsSendPort = {"": "_BaseSendPort;_receivePort>,_isolateId",
  send$2: function(message, replyTo) {
    $._waitForPendingPorts([message, replyTo], new $._NativeJsSendPort_send_anon(this, message, replyTo));
  },
  send$1: function(message) {
    return this.send$2(message, null);
  },
  $eq: function(_, other) {
    if (other == null)
      return false;
    return typeof other === "object" && other !== null && !!other.$is_NativeJsSendPort && $.$$eq$o(this._receivePort, other._receivePort) === true;
  },
  get$hashCode: function(_) {
    return this._receivePort.get$_liblib8$_id();
  },
  $is_NativeJsSendPort: true,
  $isSendPort: true
};

$$._WorkerSendPort = {"": "_BaseSendPort;_workerId>,_receivePortId,_isolateId",
  send$2: function(message, replyTo) {
    $._waitForPendingPorts([message, replyTo], new $._WorkerSendPort_send_anon(this, message, replyTo));
  },
  $eq: function(_, other) {
    var t1;
    if (other == null)
      return false;
    if (typeof other === "object" && other !== null && !!other.$is_WorkerSendPort)
      t1 = $.$$eq$o(this._workerId, other._workerId) === true && $.$$eq$o(this._isolateId, other._isolateId) === true && $.$$eq$o(this._receivePortId, other._receivePortId) === true;
    else
      t1 = false;
    return t1;
  },
  get$hashCode: function(_) {
    var t1, t2, t3;
    t1 = $.$$shl$n(this._workerId, 16);
    t2 = $.$$shl$n(this._isolateId, 8);
    t3 = this._receivePortId;
    if (typeof t3 !== "number")
      throw $.iae(t3);
    return (t1 ^ t2 ^ t3) >>> 0;
  },
  $is_WorkerSendPort: true,
  $isSendPort: true
};

$$.ReceivePortImpl = {"": "Object;_liblib8$_id>,_liblib8$_callback>",
  _liblib8$_callback$2: function(arg0, arg1) {
    return this._liblib8$_callback.call$2(arg0, arg1);
  },
  receive$1: function(onMessage) {
    this._liblib8$_callback = onMessage;
  },
  close$0: function() {
    this._liblib8$_callback = null;
    $globalState.currentContext.unregister$1(this._liblib8$_id);
  },
  toSendPort$0: function() {
    return $._NativeJsSendPort$(this, $globalState.currentContext.get$id());
  },
  ReceivePortImpl$0: function() {
    $._globalState().get$currentContext().register$2(this._liblib8$_id, this);
  }
};

$$._PendingSendPortFinder = {"": "_MessageTraverser;ports>,_visited",
  visitPrimitive$1: function(x) {
  },
  visitList$1: function(list) {
    if ($.$$index$as(this._visited, list) != null)
      return;
    $.$$indexSet$a(this._visited, list, true);
    $.forEach$1$a(list, new $._PendingSendPortFinder_visitList_anon(this));
  },
  visitMap$1: function(map) {
    if ($.$$index$as(this._visited, map) != null)
      return;
    $.$$indexSet$a(this._visited, map, true);
    $.forEach$1$a(map.get$values(), new $._PendingSendPortFinder_visitMap_anon(this));
  },
  visitSendPort$1: function(port) {
    if (!!port.$is_BufferingSendPort && port.get$_port() == null)
      this.ports.push(port.get$_futurePort());
  },
  _PendingSendPortFinder$0: function() {
    this._visited = $._JsVisitedMap$();
  }
};

$$._JsSerializer = {"": "_Serializer;_nextFreeRefId,_visited",
  visitSendPort$1: function(x) {
    if (typeof x === "object" && x !== null && !!x.$is_NativeJsSendPort)
      return this.visitNativeJsSendPort$1(x);
    if (typeof x === "object" && x !== null && !!x.$is_WorkerSendPort)
      return ["sendport", x._workerId, x._isolateId, x._receivePortId];
    if (typeof x === "object" && x !== null && !!x.$is_BufferingSendPort)
      return this.visitBufferingSendPort$1(x);
    throw $.$$throw("Illegal underlying port " + $.S(x));
  },
  visitNativeJsSendPort$1: function(port) {
    return ["sendport", $globalState.currentManagerId, port._isolateId, port._receivePort.get$_liblib8$_id()];
  },
  visitBufferingSendPort$1: function(port) {
    var t1 = port.get$_port();
    if (t1 != null)
      return this.visitSendPort$1(t1);
    else
      throw $.$$throw("internal error: must call _waitForPendingPorts to ensure all ports are resolved at this point.");
  },
  _JsSerializer$0: function() {
    this._visited = $._JsVisitedMap$();
  }
};

$$._JsCopier = {"": "_Copier;_visited",
  visitSendPort$1: function(x) {
    if (typeof x === "object" && x !== null && !!x.$is_NativeJsSendPort)
      return this.visitNativeJsSendPort$1(x);
    if (typeof x === "object" && x !== null && !!x.$is_WorkerSendPort)
      return this.visitWorkerSendPort$1(x);
    if (typeof x === "object" && x !== null && !!x.$is_BufferingSendPort)
      return this.visitBufferingSendPort$1(x);
    throw $.$$throw("Illegal underlying port " + $.S(this.get$p()));
  },
  visitNativeJsSendPort$1: function(port) {
    return $._NativeJsSendPort$(port._receivePort, port._isolateId);
  },
  visitWorkerSendPort$1: function(port) {
    return $._WorkerSendPort$(port._workerId, port._isolateId, port._receivePortId);
  },
  visitBufferingSendPort$1: function(port) {
    var t1 = port.get$_port();
    if (t1 != null)
      return this.visitSendPort$1(t1);
    else
      throw $.$$throw("internal error: must call _waitForPendingPorts to ensure all ports are resolved at this point.");
  },
  _JsCopier$0: function() {
    this._visited = $._JsVisitedMap$();
  }
};

$$._JsDeserializer = {"": "_Deserializer;_deserialized",
  deserializeSendPort$1: function(x) {
    var t1, managerId, isolateId, receivePortId, isolate, receivePort;
    t1 = $.getInterceptor$as(x);
    managerId = t1.$index(x, 1);
    isolateId = t1.$index(x, 2);
    receivePortId = t1.$index(x, 3);
    if ($.$$eq$o(managerId, $globalState.currentManagerId) === true) {
      isolate = $.$$index$as($globalState.isolates, isolateId);
      if (isolate == null)
        return;
      receivePort = isolate.lookup$1(receivePortId);
      if (receivePort == null)
        return;
      return $._NativeJsSendPort$(receivePort, isolateId);
    } else
      return $._WorkerSendPort$(managerId, isolateId, receivePortId);
  }
};

$$._JsVisitedMap = {"": "Object;tagged",
  $index: function(_, object) {
    return object['__MessageTraverser__attached_info__'];
  },
  $indexSet: function(_, object, info) {
    $.add$1$a(this.tagged, object);
    object['__MessageTraverser__attached_info__'] = info;
  },
  reset$0: function() {
    this.tagged = $.List_List($, null);
  },
  cleanup$0: function() {
    var $length, i;
    for ($length = $.get$length$as(this.tagged), i = 0; i < $length; ++i)
      $.$$index$as(this.tagged, i)['__MessageTraverser__attached_info__'] = null;
    this.tagged = null;
  }
};

$$._MessageTraverserVisitedMap = {"": "Object;",
  $index: function(_, object) {
    return;
  },
  $indexSet: function(_, object, info) {
  },
  reset$0: function() {
  },
  cleanup$0: function() {
  }
};

$$._MessageTraverser = {"": "Object;",
  traverse$1: function(x) {
    var result, t1;
    t1 = x;
    if (t1 == null || typeof t1 === "string" || typeof t1 === "number" || typeof t1 === "boolean")
      return this.visitPrimitive$1(x);
    this._visited.reset$0();
    result = null;
    try {
      result = this._dispatch$1(x);
    } finally {
      this._visited.cleanup$0();
    }
    return result;
  },
  _dispatch$1: function(x) {
    if (x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean")
      return this.visitPrimitive$1(x);
    if (typeof x === "object" && x !== null && (x.constructor === Array || x.$isList()))
      return this.visitList$1(x);
    if (typeof x === "object" && x !== null && !!x.$isMap)
      return this.visitMap$1(x);
    if (typeof x === "object" && x !== null && !!x.$isSendPort)
      return this.visitSendPort$1(x);
    if (typeof x === "object" && x !== null && !!x.$isSendPortSync)
      return this.visitSendPortSync$1(x);
    return this.visitObject$1(x);
  },
  visitObject$1: function(x) {
    throw $.$$throw("Message serialization: Illegal value " + $.S(x) + " passed");
  }
};

$$._Copier = {"": "_MessageTraverser;",
  visitPrimitive$1: function(x) {
    return x;
  },
  visitList$1: function(list) {
    var copy, len, i, t1;
    if (typeof list !== "object" || list === null || list.constructor !== Array && !list.$isJavaScriptIndexingBehavior())
      return this.visitList$1$bailout1(1, list);
    copy = $.$$index$as(this._visited, list);
    if (copy != null)
      return copy;
    len = list.length;
    copy = $.List_List(len, null);
    $.$$indexSet$a(this._visited, list, copy);
    for (i = 0; i < len; ++i) {
      if (i >= list.length)
        throw $.ioore(i);
      t1 = this._dispatch$1(list[i]);
      if (i >= copy.length)
        throw $.ioore(i);
      copy[i] = t1;
    }
    return copy;
  },
  visitList$1$bailout1: function(state0, list) {
    var copy, t1, len, i, t2;
    copy = $.$$index$as(this._visited, list);
    if (copy != null)
      return copy;
    t1 = $.getInterceptor$as(list);
    len = t1.get$length(list);
    copy = $.List_List(len, null);
    $.$$indexSet$a(this._visited, list, copy);
    for (i = 0; $.CONSTANT2.$lt(i, len); ++i) {
      t2 = this._dispatch$1(t1.$index(list, i));
      if (i >= copy.length)
        throw $.ioore(i);
      copy[i] = t2;
    }
    return copy;
  },
  visitMap$1: function(map) {
    var t1, t2;
    t1 = {};
    t1.copy_0 = $.$$index$as(this._visited, map);
    t2 = t1.copy_0;
    if (t2 != null)
      return t2;
    t1.copy_0 = $.HashMap$(null, null);
    $.$$indexSet$a(this._visited, map, t1.copy_0);
    map.forEach$1(map, new $._Copier_visitMap_anon(t1, this));
    return t1.copy_0;
  }
};

$$._Serializer = {"": "_MessageTraverser;",
  visitPrimitive$1: function(x) {
    return x;
  },
  visitList$1: function(list) {
    var copyId, id;
    copyId = $.$$index$as(this._visited, list);
    if (copyId != null)
      return ["ref", copyId];
    id = this._nextFreeRefId;
    this._nextFreeRefId = id + 1;
    $.$$indexSet$a(this._visited, list, id);
    return ["list", id, this._serializeList$1(list)];
  },
  visitMap$1: function(map) {
    var copyId, id;
    copyId = $.$$index$as(this._visited, map);
    if (copyId != null)
      return ["ref", copyId];
    id = this._nextFreeRefId;
    this._nextFreeRefId = id + 1;
    $.$$indexSet$a(this._visited, map, id);
    return ["map", id, this._serializeList$1($.toList$0$a(map.get$keys())), this._serializeList$1($.toList$0$a(map.get$values()))];
  },
  _serializeList$1: function(list) {
    var len, result, i, t1;
    if (typeof list !== "string" && (typeof list !== "object" || list === null || list.constructor !== Array && !list.$isJavaScriptIndexingBehavior()))
      return this._serializeList$1$bailout(1, list);
    len = list.length;
    result = $.List_List(len, null);
    for (i = 0; i < len; ++i) {
      if (i >= list.length)
        throw $.ioore(i);
      t1 = this._dispatch$1(list[i]);
      if (i >= result.length)
        throw $.ioore(i);
      result[i] = t1;
    }
    return result;
  },
  _serializeList$1$bailout: function(state0, list, t1, len) {
    switch (state0) {
      case 0:
      case 1:
        state0 = 0;
        t1 = $.getInterceptor$as(list);
        len = t1.get$length(list);
      case 2:
        var result, i, t2;
        state0 = 0;
        result = $.List_List(len, null);
        for (i = 0; $.CONSTANT2.$lt(i, len); ++i) {
          t2 = this._dispatch$1(t1.$index(list, i));
          if (i >= result.length)
            throw $.ioore(i);
          result[i] = t2;
        }
        return result;
    }
  }
};

$$._Deserializer = {"": "Object;",
  deserialize$1: function(x) {
    if (x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean")
      return x;
    this._deserialized = $.HashMap$(null, null);
    return this._deserializeHelper$1(x);
  },
  _deserializeHelper$1: function(x) {
    if (x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean")
      return x;
    switch ($.$$index$as(x, 0)) {
      case "ref":
        return this._deserializeRef$1(x);
      case "list":
        return this._deserializeList$1(x);
      case "map":
        return this._deserializeMap$1(x);
      case "sendport":
        return this.deserializeSendPort$1(x);
      default:
        return this.deserializeObject$1(x);
    }
  },
  _deserializeRef$1: function(x) {
    var id = $.$$index$as(x, 1);
    return $.$$index$as(this._deserialized, id);
  },
  _deserializeList$1: function(x) {
    var t1, id, dartList, len, i;
    t1 = $.getInterceptor$as(x);
    id = t1.$index(x, 1);
    dartList = t1.$index(x, 2);
    if (typeof dartList !== "object" || dartList === null || (dartList.constructor !== Array || !!dartList.immutable$list) && !dartList.$isJavaScriptIndexingBehavior())
      return this._deserializeList$1$bailout(1, dartList, id);
    $.$$indexSet$a(this._deserialized, id, dartList);
    len = dartList.length;
    for (i = 0; i < len; ++i) {
      if (i >= dartList.length)
        throw $.ioore(i);
      t1 = this._deserializeHelper$1(dartList[i]);
      if (i >= dartList.length)
        throw $.ioore(i);
      dartList[i] = t1;
    }
    return dartList;
  },
  _deserializeList$1$bailout: function(state0, dartList, id) {
    var t2, len, i;
    $.$$indexSet$a(this._deserialized, id, dartList);
    t2 = $.getInterceptor$as(dartList);
    len = t2.get$length(dartList);
    for (i = 0; $.CONSTANT2.$lt(i, len); ++i)
      t2.$indexSet(dartList, i, this._deserializeHelper$1(t2.$index(dartList, i)));
    return dartList;
  },
  _deserializeMap$1: function(x) {
    var result, t1, id, keys, values, len, i, key;
    result = $.HashMap$(null, null);
    t1 = $.getInterceptor$as(x);
    id = t1.$index(x, 1);
    $.$$indexSet$a(this._deserialized, id, result);
    keys = t1.$index(x, 2);
    if (typeof keys !== "string" && (typeof keys !== "object" || keys === null || keys.constructor !== Array && !keys.$isJavaScriptIndexingBehavior()))
      return this._deserializeMap$1$bailout(1, keys, t1, x, result);
    values = t1.$index(x, 3);
    if (typeof values !== "string" && (typeof values !== "object" || values === null || values.constructor !== Array && !values.$isJavaScriptIndexingBehavior()))
      return this._deserializeMap$1$bailout(2, keys, 0, 0, result, values);
    len = keys.length;
    for (i = 0; i < len; ++i) {
      if (i >= keys.length)
        throw $.ioore(i);
      key = this._deserializeHelper$1(keys[i]);
      if (i >= values.length)
        throw $.ioore(i);
      result.$indexSet(result, key, this._deserializeHelper$1(values[i]));
    }
    return result;
  },
  _deserializeMap$1$bailout: function(state0, keys, t1, x, result, values, t3, len) {
    switch (state0) {
      case 0:
        result = $.HashMap$(null, null);
        t1 = $.getInterceptor$as(x);
        id = t1.$index(x, 1);
        $.$$indexSet$a(this._deserialized, id, result);
        keys = t1.$index(x, 2);
      case 1:
        state0 = 0;
        values = t1.$index(x, 3);
      case 2:
        state0 = 0;
        t3 = $.getInterceptor$as(keys);
        len = t3.get$length(keys);
      case 3:
        var id, i;
        state0 = 0;
        for (t1 = $.getInterceptor$as(values), i = 0; $.CONSTANT2.$lt(i, len); ++i)
          result.$indexSet(result, this._deserializeHelper$1(t3.$index(keys, i)), this._deserializeHelper$1(t1.$index(values, i)));
        return result;
    }
  },
  deserializeObject$1: function(x) {
    throw $.$$throw("Unexpected serialized object");
  }
};

$$.TimerImpl = {"": "Object;_once,_inEventLoop,_handle<",
  cancel$0: function() {
    if ($.get$globalThis().setTimeout != null) {
      if (this._inEventLoop === true)
        throw $.$$throw($.UnsupportedError$("Timer in event loop cannot be canceled."));
      if (this._handle == null)
        return;
      var t1 = $globalState.topEventLoop;
      t1.set$activeTimerCount($.$$sub$n(t1.get$activeTimerCount(), 1));
      if (this._once)
        $.get$globalThis().clearTimeout(this._handle);
      else
        $.get$globalThis().clearInterval(this._handle);
      this._handle = null;
    } else
      throw $.$$throw($.UnsupportedError$("Canceling a timer."));
  },
  TimerImpl$2: function(milliseconds, callback) {
    var t1;
    if ($.$$eq$o(milliseconds, 0) === true)
      t1 = $.hasTimer() !== true || $._globalState().get$isWorker() === true;
    else
      t1 = false;
    if (t1) {
      $._globalState().get$topEventLoop().enqueue$3($._globalState().get$currentContext(), callback, "timer");
      this._inEventLoop = true;
    } else if ($.hasTimer() === true) {
      t1 = $._globalState().get$topEventLoop();
      t1.set$activeTimerCount($.$$add$n(t1.get$activeTimerCount(), 1));
      t1 = new $.internalCallback(this, callback);
      this._handle = $.get$globalThis().setTimeout($.convertDartClosureToJS(t1, 0), milliseconds);
    } else
      throw $.$$throw($.UnsupportedError$("Timer greater than 0."));
  }
};

$$.AsyncError = {"": "Object;error>,stackTrace>,cause>",
  _writeOn$1: function(buffer) {
    var message, exception, t1;
    buffer.write$1("'");
    message = null;
    try {
      message = $.toString$0$abfnosu(this.error);
    } catch (exception) {
      $.unwrapException(exception);
      message = $.Error_safeToString(this.error);
    }

    buffer.write$1(message);
    buffer.write$1("'\n");
    t1 = this.stackTrace;
    if (t1 != null) {
      buffer.write$1("Stack trace:\n");
      buffer.writeln$1($.toString$0$abfnosu(t1));
    }
  },
  toString$0: function(_) {
    var buffer, cause;
    buffer = $.StringBuffer$("");
    buffer.write$1("AsyncError: ");
    this._writeOn$1(buffer);
    cause = this.cause;
    for (; cause != null;) {
      buffer.write$1("Caused by: ");
      cause._writeOn$1(buffer);
      cause = cause.get$cause();
    }
    return buffer.toString$0(buffer);
  },
  throwDelayed$0: function() {
    var reportError, exception;
    reportError = new $.AsyncError_throwDelayed_reportError(this);
    try {
      $.Timer_run(new $.AsyncError_throwDelayed_anon(this, reportError));
    } catch (exception) {
      $.unwrapException(exception);
      reportError.call$0();
    }

  },
  $isAsyncError: true
};

$$._CompleterImpl = {"": "Object;future>,_isComplete",
  complete$1: function(value) {
    if (this._isComplete)
      throw $.$$throw($.StateError$("Future already completed"));
    this._isComplete = true;
    this.future._liblib6$_setValue$1(value);
  },
  completeError$2: function(error, stackTrace) {
    var asyncError;
    if (this._isComplete)
      throw $.$$throw($.StateError$("Future already completed"));
    this._isComplete = true;
    asyncError = typeof error === "object" && error !== null && !!error.$isAsyncError ? error : $.AsyncError$(error, stackTrace);
    this.future._setError$1(asyncError);
  },
  completeError$1: function(error) {
    return this.completeError$2(error, null);
  }
};

$$._FutureListenerWrapper = {"": "Object;future>,_nextListener=",
  _sendValue$1: function(value) {
    this.future._liblib6$_setValue$1(value);
  },
  _sendError$1: function(error) {
    this.future._setError$1(error);
  }
};

$$._FutureImpl = {"": "Object;_state=,_resultOrListeners>",
  get$_isComplete: function() {
    return $.$$eq$o(this._state, 0) !== true;
  },
  get$_hasValue: function() {
    return $.$$eq$o(this._state, 1);
  },
  get$_hasError: function() {
    return $.$$and$n(this._state, 2) !== 0;
  },
  get$_hasUnhandledError: function() {
    return $.$$and$n(this._state, 4) !== 0;
  },
  then$2$onError: function(f, onError) {
    var t1;
    if (this.get$_isComplete() !== true) {
      if (onError == null) {
        t1 = $._ThenFuture$(f, null, null);
        t1._subscribeTo$1(this);
        return t1;
      }
      t1 = $._SubscribeFuture$(f, onError, null, null);
      t1._subscribeTo$1(this);
      return t1;
    }
    if (this.get$_hasError() === true) {
      if (onError != null)
        return this._handleError$2(onError, null);
      return $._FutureWrapper$(this, null);
    } else
      return this._handleValue$1(f);
  },
  then$1: function(f) {
    return this.then$2$onError(f, null);
  },
  catchError$2$test: function(f, test) {
    var t1;
    if (this.get$_hasValue() === true)
      return $._FutureWrapper$(this, null);
    if (this.get$_isComplete() !== true) {
      t1 = $._CatchErrorFuture$(f, test, null);
      t1._subscribeTo$1(this);
      return t1;
    } else
      return this._handleError$2(f, test);
  },
  catchError$1: function(f) {
    return this.catchError$2$test(f, null);
  },
  _handleValue$1: function(onValue) {
    var thenFuture = $._ThenFuture$(onValue, null, null);
    $.Timer_run(new $._FutureImpl__handleValue_anon(thenFuture, this._resultOrListeners));
    return thenFuture;
  },
  _handleError$2: function(onError, test) {
    var error, errorFuture;
    this._state = $.$$and$n(this._state, 4294967291);
    error = this._resultOrListeners;
    errorFuture = $._CatchErrorFuture$(onError, test, null);
    $.Timer_run(new $._FutureImpl__handleError_anon(error, errorFuture));
    return errorFuture;
  },
  _liblib6$_setValue$1: function(value) {
    var listeners, listeners0;
    if (this.get$_isComplete() === true)
      throw $.$$throw($.StateError$("Future already completed"));
    listeners = this._removeListeners$0();
    this._state = 1;
    this._resultOrListeners = value;
    for (; listeners != null; listeners = listeners0) {
      listeners0 = listeners.get$_nextListener();
      listeners.set$_nextListener(null);
      listeners._sendValue$1(value);
    }
  },
  get$_liblib6$_setValue: function() {
    return new $.BoundClosure$1(this, "_liblib6$_setValue$1");
  },
  _setError$1: function(error) {
    var listeners, listeners0;
    if (this.get$_isComplete() === true)
      throw $.$$throw($.StateError$("Future already completed"));
    listeners = this._removeListeners$0();
    this._state = 2;
    this._resultOrListeners = error;
    if (listeners == null) {
      this._scheduleUnhandledError$0();
      return;
    }
    do {
      listeners0 = listeners.get$_nextListener();
      listeners.set$_nextListener(null);
      listeners._sendError$1(error);
      if (listeners0 != null) {
        listeners = listeners0;
        continue;
      } else
        break;
    } while (true);
  },
  get$_setError: function() {
    return new $.BoundClosure$1(this, "_setError$1");
  },
  _scheduleUnhandledError$0: function() {
    this._state = $.$$or$n(this._state, 4);
    $.Timer_run(new $._FutureImpl__scheduleUnhandledError_anon(this));
  },
  _addListener$1: function(listener) {
    listener.set$_nextListener(this._resultOrListeners);
    this._resultOrListeners = listener;
  },
  _removeListeners$0: function() {
    var current, prev, next;
    current = this._resultOrListeners;
    this._resultOrListeners = null;
    for (prev = null; current != null; prev = current, current = next) {
      next = current.get$_nextListener();
      current.set$_nextListener(prev);
    }
    return prev;
  },
  _chain$1: function(future) {
    if (this.get$_isComplete() !== true)
      this._addListener$1(future._asListener$0());
    else if (this.get$_hasValue() === true)
      future._liblib6$_setValue$1(this._resultOrListeners);
    else {
      this._state = $.$$and$n(this._state, 4294967291);
      future._setError$1(this._resultOrListeners);
    }
  },
  _setOrChainValue$1: function(result) {
    if (typeof result === "object" && result !== null && !!result.$isFuture)
      if (!!result.$is_FutureImpl) {
        result._chain$1(this);
        return;
      } else {
        result.then$2$onError(this.get$_liblib6$_setValue(), this.get$_setError());
        return;
      }
    else
      this._liblib6$_setValue$1(result);
  },
  _asListener$0: function() {
    return $._FutureListenerWrapper$(this, null);
  },
  _FutureImpl$immediate$1: function(value, T) {
    this._state = 1;
    this._resultOrListeners = value;
  },
  $is_FutureImpl: true,
  $isFuture: true
};

$$._TransformFuture = {"": "_FutureImpl;_nextListener=",
  _subscribeTo$1: function(future) {
    future._addListener$1(this);
  },
  $as_FutureImpl: function (S, T) { return [T]; },
  $asFuture: function (S, T) { return [T]; }
};

$$._ThenFuture = {"": "_TransformFuture;_onValue,_nextListener,_state,_resultOrListeners",
  _onValue$1: function(arg0) {
    return this._onValue.call$1(arg0);
  },
  _sendValue$1: function(value) {
    var result, e, e0, s, exception, t1;
    result = null;
    try {
      result = this._onValue$1(value);
    } catch (exception) {
      t1 = $.unwrapException(exception);
      if (typeof t1 === "object" && t1 !== null && !!t1.$isAsyncError) {
        e = t1;
        this._setError$1(e);
        return;
      } else {
        e0 = t1;
        s = $.getTraceFromException(exception);
        this._setError$1($.AsyncError$(e0, s));
        return;
      }
    }

    this._setOrChainValue$1(result);
  },
  _sendError$1: function(error) {
    this._setError$1(error);
  },
  $as_TransformFuture: null,
  $as_FutureImpl: function (S, T) { return [T]; },
  $asFuture: function (S, T) { return [T]; }
};

$$._CatchErrorFuture = {"": "_TransformFuture;_test,_onError,_nextListener,_state,_resultOrListeners",
  _test$1: function(arg0) {
    return this._test.call$1(arg0);
  },
  _onError$1: function(arg0) {
    return this._onError.call$1(arg0);
  },
  _sendValue$1: function(value) {
    this._liblib6$_setValue$1(value);
  },
  _sendError$1: function(error) {
    var matchesTest, e, s, result, e0, e1, s0, exception, t1;
    if (this._test != null) {
      matchesTest = null;
      try {
        matchesTest = this._test$1(error.get$error());
      } catch (exception) {
        t1 = $.unwrapException(exception);
        e = t1;
        s = $.getTraceFromException(exception);
        this._setError$1($.AsyncError$withCause(e, s, error));
        return;
      }

      if (matchesTest !== true) {
        this._setError$1(error);
        return;
      }
    }
    result = null;
    try {
      result = this._onError$1(error);
    } catch (exception) {
      t1 = $.unwrapException(exception);
      if (typeof t1 === "object" && t1 !== null && !!t1.$isAsyncError) {
        e0 = t1;
        this._setError$1(e0);
        return;
      } else {
        e1 = t1;
        s0 = $.getTraceFromException(exception);
        this._setError$1($.AsyncError$withCause(e1, s0, error));
        return;
      }
    }

    this._setOrChainValue$1(result);
  },
  $as_TransformFuture: function (T) { return [T, T]; },
  $as_FutureImpl: null,
  $asFuture: null
};

$$._SubscribeFuture = {"": "_ThenFuture;_onError,_onValue,_nextListener,_state,_resultOrListeners",
  _onError$1: function(arg0) {
    return this._onError.call$1(arg0);
  },
  _sendError$1: function(error) {
    var result, e, e0, s, exception, t1;
    result = null;
    try {
      result = this._onError$1(error);
    } catch (exception) {
      t1 = $.unwrapException(exception);
      if (typeof t1 === "object" && t1 !== null && !!t1.$isAsyncError) {
        e = t1;
        this._setError$1(e);
        return;
      } else {
        e0 = t1;
        s = $.getTraceFromException(exception);
        this._setError$1($.AsyncError$withCause(e0, s, error));
        return;
      }
    }

    this._setOrChainValue$1(result);
  },
  $as_ThenFuture: null,
  $as_FutureImpl: function (S, T) { return [T]; },
  $asFuture: function (S, T) { return [T]; }
};

$$._FutureWrapper = {"": "Object;_future",
  then$2$onError: function($function, onError) {
    return this._future.then$2$onError($function, onError);
  },
  then$1: function($function) {
    return this.then$2$onError($function, null);
  },
  catchError$2$test: function($function, test) {
    return this._future.catchError$2$test($function, test);
  },
  catchError$1: function($function) {
    return this.catchError$2$test($function, null);
  },
  $isFuture: true
};

$$.Stream = {"": "Object;",
  where$1: function(_, test) {
    return $._WhereStream$(this, test, $.getRuntimeTypeArgument(this, this["$asStream"], 0));
  },
  map$1: function(_, convert) {
    return $._MapStream$(this, convert, $.getRuntimeTypeArgument(this, this["$asStream"], 0), null);
  },
  contains$1: function(_, match) {
    var t1, future, t2, t3;
    t1 = {};
    future = $._FutureImpl$($.bool);
    t1.subscription_0 = null;
    t2 = new $.Stream_contains_anon(t1, match, future);
    t3 = future.get$_setError();
    t1.subscription_0 = this.listen$4$onDone$onError$unsubscribeOnError(t2, new $.Stream_contains_anon0(future), t3, true);
    return future;
  },
  get$contains: function(receiver) {
    return new $.BoundClosure$i1(this, "contains$1", receiver);
  },
  every$1: function(_, test) {
    var t1, future, t2, t3;
    t1 = {};
    future = $._FutureImpl$($.bool);
    t1.subscription_0 = null;
    t2 = new $.Stream_every_anon(t1, test, future);
    t3 = future.get$_setError();
    t1.subscription_0 = this.listen$4$onDone$onError$unsubscribeOnError(t2, new $.Stream_every_anon0(future), t3, true);
    return future;
  },
  get$length: function(_) {
    var t1, future, t2, t3;
    t1 = {};
    future = $._FutureImpl$($.$int);
    t1.count_0 = 0;
    t2 = new $.Stream_length_anon(t1);
    t3 = future.get$_setError();
    this.listen$4$onDone$onError$unsubscribeOnError(t2, new $.Stream_length_anon0(t1, future), t3, true);
    return future;
  },
  get$isEmpty: function(_) {
    var t1, future, t2, t3;
    t1 = {};
    future = $._FutureImpl$($.bool);
    t1.subscription_0 = null;
    t2 = new $.Stream_isEmpty_anon(t1, future);
    t3 = future.get$_setError();
    t1.subscription_0 = this.listen$4$onDone$onError$unsubscribeOnError(t2, new $.Stream_isEmpty_anon0(future), t3, true);
    return future;
  },
  toList$0: function(_) {
    var result, future, t1, t2;
    result = [];
    future = $._FutureImpl$([$.List, $.getRuntimeTypeArgument(this, this["$asStream"], 0)]);
    t1 = new $.Stream_toList_anon(result);
    t2 = future.get$_setError();
    this.listen$4$onDone$onError$unsubscribeOnError(t1, new $.Stream_toList_anon0(result, future), t2, true);
    return future;
  },
  toSet$0: function(_) {
    var result, future, t1, t2;
    result = $.HashSet$($.getRuntimeTypeArgument(this, this["$asStream"], 0));
    future = $._FutureImpl$([$.Set, $.getRuntimeTypeArgument(this, this["$asStream"], 0)]);
    t1 = new $.Stream_toSet_anon(result);
    t2 = future.get$_setError();
    this.listen$4$onDone$onError$unsubscribeOnError(t1, new $.Stream_toSet_anon0(result, future), t2, true);
    return future;
  },
  skip$1: function(_, count) {
    return $._SkipStream$(this, count, null);
  },
  get$last: function(_) {
    var t1, future, t2, t3;
    t1 = {};
    future = $._FutureImpl$($.getRuntimeTypeArgument(this, this["$asStream"], 0));
    t1.result_0 = null;
    t1.foundResult_1 = false;
    t2 = new $.Stream_last_anon(t1);
    t3 = future.get$_setError();
    this.listen$4$onDone$onError$unsubscribeOnError(t2, new $.Stream_last_anon0(t1, future), t3, true);
    return future;
  },
  elementAt$1: function(_, index) {
    var t1, t2, future, t3;
    t1 = {};
    t1.index_0 = index;
    t2 = t1.index_0;
    if (!(typeof t2 === "number" && Math.floor(t2) === t2) || $.$$lt$n(t2, 0) === true)
      throw $.$$throw($.ArgumentError$(t1.index_0));
    future = $._FutureImpl$($.getRuntimeTypeArgument(this, this["$asStream"], 0));
    t1.subscription_1 = null;
    t2 = new $.Stream_elementAt_anon(t1, future);
    t3 = future.get$_setError();
    t1.subscription_1 = this.listen$4$onDone$onError$unsubscribeOnError(t2, new $.Stream_elementAt_anon0(future), t3, true);
    return future;
  }
};

$$.StreamSubscription = {"": "Object;"};

$$._ForwardingStream = {"": "Stream;",
  listen$4$onDone$onError$unsubscribeOnError: function(onData, onDone, onError, unsubscribeOnError) {
    if (onData == null)
      onData = $._nullDataHandler;
    if (onError == null)
      onError = $._nullErrorHandler;
    if (onDone == null)
      onDone = $._nullDoneHandler;
    return this._createSubscription$4(onData, onError, onDone, true === unsubscribeOnError);
  },
  listen$3$onDone$onError: function(onData, onDone, onError) {
    return this.listen$4$onDone$onError$unsubscribeOnError(onData, onDone, onError, null);
  },
  listen$1: function(onData) {
    return this.listen$4$onDone$onError$unsubscribeOnError(onData, null, null, null);
  },
  _createSubscription$4: function(onData, onError, onDone, unsubscribeOnError) {
    return $._ForwardingStreamSubscription$(this, onData, onError, onDone, unsubscribeOnError, $.getRuntimeTypeArgument(this, this["$as_ForwardingStream"], 0), $.getRuntimeTypeArgument(this, this["$as_ForwardingStream"], 1));
  },
  _handleData$2: function(data, sink) {
    sink._sendData$1(data);
  },
  _handleError$2: function(error, sink) {
    sink._sendError$1(error);
  },
  _handleDone$1: function(sink) {
    sink._sendDone$0();
  },
  $asStream: function (S, T) { return [T]; }
};

$$._BaseStreamSubscription = {"": "Object;",
  _onData$1: function(arg0) {
    return this._onData.call$1(arg0);
  },
  _onError$1: function(arg0) {
    return this._onError.call$1(arg0);
  },
  _onDone$0: function() {
    return this._onDone.call$0();
  },
  _BaseStreamSubscription$3: function(_onData, _onError, _onDone, T) {
    if (this._onData == null)
      this._onData = $._nullDataHandler;
    if (this._onError == null)
      this._onError = $._nullErrorHandler;
    if (this._onDone == null)
      this._onDone = $._nullDoneHandler;
  }
};

$$._ForwardingStreamSubscription = {"": "_BaseStreamSubscription;_stream,_unsubscribeOnError,_subscription,_onData,_onError,_onDone",
  cancel$0: function() {
    var t1 = this._subscription;
    if (t1 == null)
      throw $.$$throw($.StateError$("Subscription has been unsubscribed"));
    t1.cancel$0();
    this._subscription = null;
  },
  _sendData$1: function(data) {
    this._onData$1(data);
  },
  _sendError$1: function(error) {
    this._onError$1(error);
    if (this._unsubscribeOnError) {
      this._subscription.cancel$0();
      this._subscription = null;
    }
  },
  _sendDone$0: function() {
    var t1 = this._subscription;
    if (t1 != null) {
      t1.cancel$0();
      this._subscription = null;
    }
    this._onDone$0();
  },
  _handleData$1: function(data) {
    this._stream._handleData$2(data, this);
  },
  get$_handleData: function() {
    return new $.BoundClosure$1(this, "_handleData$1");
  },
  _handleError$1: function(error) {
    this._stream._handleError$2(error, this);
  },
  get$_handleError: function() {
    return new $.BoundClosure$1(this, "_handleError$1");
  },
  _handleDone$0: function() {
    this._subscription = null;
    this._stream._handleDone$1(this);
  },
  get$_handleDone: function() {
    return new $.BoundClosure$0(this, "_handleDone$0");
  },
  _ForwardingStreamSubscription$5: function(_stream, onData, onError, onDone, _unsubscribeOnError, S, T) {
    var t1, t2, t3;
    t1 = this._stream._source;
    t2 = this.get$_handleData();
    t3 = this.get$_handleError();
    this._subscription = t1.listen$3$onDone$onError(t2, this.get$_handleDone(), t3);
  },
  $as_BaseStreamSubscription: function (S, T) { return [T]; }
};

$$._WhereStream = {"": "_ForwardingStream;_test,_source",
  _test$1: function(arg0) {
    return this._test.call$1(arg0);
  },
  _handleData$2: function(inputEvent, sink) {
    var satisfies, e, s, exception, t1;
    satisfies = null;
    try {
      satisfies = this._test$1(inputEvent);
    } catch (exception) {
      t1 = $.unwrapException(exception);
      e = t1;
      s = $.getTraceFromException(exception);
      sink._sendError$1($._asyncError(e, s, null));
      return;
    }

    if (satisfies === true)
      sink._sendData$1(inputEvent);
  },
  $as_ForwardingStream: function (T) { return [T, T]; }
};

$$._MapStream = {"": "_ForwardingStream;_transform,_source",
  _transform$1: function(arg0) {
    return this._transform.call$1(arg0);
  },
  _handleData$2: function(inputEvent, sink) {
    var outputEvent, e, s, exception, t1;
    outputEvent = null;
    try {
      outputEvent = this._transform$1(inputEvent);
    } catch (exception) {
      t1 = $.unwrapException(exception);
      e = t1;
      s = $.getTraceFromException(exception);
      sink._sendError$1($._asyncError(e, s, null));
      return;
    }

    sink._sendData$1(outputEvent);
  },
  $as_ForwardingStream: null
};

$$._SkipStream = {"": "_ForwardingStream;_remaining,_source",
  _handleData$2: function(inputEvent, sink) {
    if ($.$$gt$n(this._remaining, 0) === true) {
      this._remaining = $.$$sub$n(this._remaining, 1);
      return;
    }
    return sink._sendData$1(inputEvent);
  },
  _SkipStream$2: function(source, count, T) {
    if (!(typeof count === "number" && Math.floor(count) === count) || count < 0)
      throw $.$$throw($.ArgumentError$(count));
  },
  $as_ForwardingStream: function (T) { return [T, T]; }
};

$$._Watcher = {"": "Object;debugName,_getter,_liblib16$_callback,_lastValue",
  _getter$0: function() {
    return this._getter.call$0();
  },
  _liblib16$_callback$1: function(arg0) {
    return this._liblib16$_callback.call$1(arg0);
  },
  toString$0: function(_) {
    var t1 = this.debugName;
    return t1 == null ? "<unnamed>" : t1;
  },
  compareAndNotify$0: function() {
    var currentValue, oldValue;
    currentValue = this._safeRead$0();
    if (this._compare$1(currentValue) === true) {
      oldValue = this._lastValue;
      this._update$1(currentValue);
      this._liblib16$_callback$1($.ChangeNotification$(oldValue, currentValue, null));
      return true;
    }
    return false;
  },
  _compare$1: function(currentValue) {
    return $.$$eq$o(this._lastValue, currentValue) !== true;
  },
  _update$1: function(currentValue) {
    this._lastValue = currentValue;
  },
  _safeRead$0: function() {
    var e, trace, t1, exception;
    try {
      t1 = this._getter$0();
      return t1;
    } catch (exception) {
      t1 = $.unwrapException(exception);
      e = t1;
      trace = $.getTraceFromException(exception);
      $.Primitives_printString("error: evaluating " + $.S(this) + " watcher threw an exception (" + $.S(e) + ", " + $.S(trace) + ")");
    }

    return this._lastValue;
  },
  _Watcher$3: function(_getter, _callback, debugName) {
    this._lastValue = this._getter$0();
  }
};

$$._ListWatcher = {"": "_Watcher;debugName,_getter,_liblib16$_callback,_lastValue",
  _compare$1: function(currentValue) {
    var i, t1;
    if (typeof currentValue !== "string" && (typeof currentValue !== "object" || currentValue === null || currentValue.constructor !== Array && !currentValue.$isJavaScriptIndexingBehavior()))
      return this._compare$1$bailout1(1, currentValue);
    if ($.$$eq$o($.get$length$as(this._lastValue), currentValue.length) !== true)
      return true;
    for (i = 0; $.CONSTANT2.$lt(i, $.get$length$as(this._lastValue)); ++i) {
      t1 = $.$$index$as(this._lastValue, i);
      if (i >= currentValue.length)
        throw $.ioore(i);
      if ($.$$eq$o(t1, currentValue[i]) !== true)
        return true;
    }
    return false;
  },
  _compare$1$bailout1: function(state0, currentValue) {
    var t1, i;
    t1 = $.getInterceptor$as(currentValue);
    if ($.$$eq$o($.get$length$as(this._lastValue), t1.get$length(currentValue)) !== true)
      return true;
    for (i = 0; $.CONSTANT2.$lt(i, $.get$length$as(this._lastValue)); ++i)
      if ($.$$eq$o($.$$index$as(this._lastValue, i), t1.$index(currentValue, i)) !== true)
        return true;
    return false;
  },
  _update$1: function(currentValue) {
    var t1 = $.List_List$from(currentValue, true, $.getRuntimeTypeArgument(this, this["$as_ListWatcher"], 0));
    $.setRuntimeTypeInfo(t1, [$.getRuntimeTypeArgument(this, this["$as_ListWatcher"], 0)]);
    this._lastValue = t1;
  },
  _ListWatcher$3: function(getter, callback, debugName, T) {
    this._update$1(this._safeRead$0());
  },
  $as_Watcher: null
};

$$.ObservableList = {"": "Collection;hashCode>,$$_observers=,$$_changes=,_liblib10$_list",
  get$iterator: function(_) {
    return $.ListIterator$0(this, $.getRuntimeTypeArgument(this, this["$asObservableList"], 0));
  },
  get$length: function(_) {
    if ($.observeReads() === true)
      $.notifyRead(this, 1, "length");
    return this._liblib10$_list.length;
  },
  set$length: function(_, value) {
    var t1, len, i;
    if (typeof value !== "number")
      return this.set$length$bailout1(1, value);
    t1 = this._liblib10$_list;
    len = t1.length;
    if (len === value)
      return;
    if ($.hasObservers(this))
      if (value < len) {
        for (i = len - 1; i >= value; --i) {
          if (i < 0 || i >= t1.length)
            throw $.ioore(i);
          $.notifyChange(this, 10, i, t1[i], null);
        }
        $.notifyChange(this, 1, "length", len, value);
      } else {
        $.notifyChange(this, 1, "length", len, value);
        for (i = len; i < value; ++i)
          $.notifyChange(this, 6, i, null, null);
      }
    $.CONSTANT0.set$length(t1, value);
  },
  set$length$bailout1: function(state0, value) {
    var t1, len, i;
    t1 = this._liblib10$_list;
    len = t1.length;
    if (len === value)
      return;
    if ($.hasObservers(this))
      if ($.$$lt$n(value, len) === true) {
        for (i = len - 1; $.CONSTANT2.$ge(i, value); --i) {
          if (i < 0 || i >= t1.length)
            throw $.ioore(i);
          $.notifyChange(this, 10, i, t1[i], null);
        }
        $.notifyChange(this, 1, "length", len, value);
      } else {
        $.notifyChange(this, 1, "length", len, value);
        for (i = len; $.CONSTANT2.$lt(i, value); ++i)
          $.notifyChange(this, 6, i, null, null);
      }
    $.CONSTANT0.set$length(t1, value);
  },
  $index: function(_, index) {
    var t1 = $._activeObserver;
    if (t1 != null)
      t1._addRead$3(this, 2, index);
    t1 = this._liblib10$_list;
    if (index !== (index | 0))
      throw $.iae(index);
    if (index < 0 || index >= t1.length)
      throw $.ioore(index);
    return t1[index];
  },
  $indexSet: function(_, index, value) {
    var t1, oldValue, t2;
    t1 = this._liblib10$_list;
    if (index !== (index | 0))
      throw $.iae(index);
    if (index < 0 || index >= t1.length)
      throw $.ioore(index);
    oldValue = t1[index];
    t2 = this.$$_observers;
    if (t2 != null && t2.get$head() != null)
      $.notifyChange(this, 2, index, oldValue, value);
    if (index >= t1.length)
      throw $.ioore(index);
    t1[index] = value;
  },
  add$1: function(_, value) {
    var t1, len, t2;
    t1 = this._liblib10$_list;
    len = t1.length;
    t2 = this.$$_observers;
    if (t2 != null && t2.get$head() != null) {
      $.notifyChange(this, 1, "length", len, len + 1);
      $.notifyChange(this, 6, len, null, value);
    }
    $.CONSTANT0.add$1(t1, value);
  },
  removeRange$2: function(_, start, $length) {
    var t1, i, t2;
    if (start !== (start | 0))
      return this.removeRange$2$bailout(1, start, $length);
    if ($length === 0)
      return;
    $.Arrays_rangeCheck(this, start, $length);
    t1 = this.$$_observers;
    if (t1 != null && t1.get$head() != null)
      for (t1 = this._liblib10$_list, i = start; i < $length; ++i) {
        t2 = $._activeObserver;
        if (t2 != null)
          t2._addRead$3(this, 2, i);
        if (i < 0 || i >= t1.length)
          throw $.ioore(i);
        $.notifyChange(this, 10, i, t1[i], null);
      }
    $.Arrays_copy(this, start + $length, this, start, $.$$sub$n($.$$sub$n(this.get$length(this), $length), start));
    this.set$length(this, $.$$sub$n(this.get$length(this), $length));
  },
  removeRange$2$bailout: function(state0, start, $length) {
    var t1, i, t2;
    if ($length === 0)
      return;
    $.Arrays_rangeCheck(this, start, $length);
    t1 = this.$$_observers;
    if (t1 != null && t1.get$head() != null)
      for (t1 = this._liblib10$_list, i = start; $.$$lt$n(i, $length) === true; ++i) {
        t2 = $._activeObserver;
        if (t2 != null)
          t2._addRead$3(this, 2, i);
        if (i !== (i | 0))
          throw $.iae(i);
        if (i < 0 || i >= t1.length)
          throw $.ioore(i);
        $.notifyChange(this, 10, i, t1[i], null);
      }
    $.Arrays_copy(this, $.$$add$n(start, $length), this, start, $.$$sub$n($.$$sub$n(this.get$length(this), $length), start));
    this.set$length(this, $.$$sub$n(this.get$length(this), $length));
  },
  remove$1: function(_, item) {
    var i, t1;
    i = $.Arrays_indexOf(this, item, 0, this.get$length(this));
    if (i === -1)
      return false;
    t1 = $._activeObserver;
    if (t1 != null)
      t1._addRead$3(this, 2, i);
    if (i < 0 || i >= this._liblib10$_list.length)
      throw $.ioore(i);
    this.removeRange$2(this, i, 1);
    return true;
  },
  get$remove: function(receiver) {
    return new $.BoundClosure$i1(this, "remove$1", receiver);
  },
  contains$1: function(_, item) {
    return $.IterableMixinWorkaround_contains(this._liblib10$_list, item);
  },
  get$contains: function(receiver) {
    return new $.BoundClosure$i1(this, "contains$1", receiver);
  },
  removeLast$0: function(_) {
    var t1, len, elem;
    t1 = this.get$length(this);
    if (t1 !== (t1 | 0))
      return this.removeLast$0$bailout(1, t1);
    len = t1 - 1;
    t1 = $._activeObserver;
    if (t1 != null)
      t1._addRead$3(this, 2, len);
    t1 = this._liblib10$_list;
    if (len < 0 || len >= t1.length)
      throw $.ioore(len);
    elem = t1[len];
    this.set$length(this, len);
    return elem;
  },
  removeLast$0$bailout: function(state0, t1, len) {
    switch (state0) {
      case 0:
        t1 = this.get$length(this);
      case 1:
        state0 = 0;
        len = $.$$sub$n(t1, 1);
      case 2:
        var elem;
        state0 = 0;
        t1 = $._activeObserver;
        if (t1 != null)
          t1._addRead$3(this, 2, len);
        t1 = this._liblib10$_list;
        if (len !== (len | 0))
          throw $.iae(len);
        if (len < 0 || len >= t1.length)
          throw $.ioore(len);
        elem = t1[len];
        this.set$length(this, len);
        return elem;
    }
  },
  indexOf$2: function(_, element, start) {
    return $.Arrays_indexOf(this, element, start, this.get$length(this));
  },
  indexOf$1: function($receiver, element) {
    return this.indexOf$2($receiver, element, 0);
  },
  get$isEmpty: function(_) {
    return $.$$eq$o(this.get$length(this), 0);
  },
  get$last: function(_) {
    return this.$index(this, $.$$sub$n(this.get$length(this), 1));
  },
  clear$0: function(_) {
    this.set$length(this, 0);
  },
  setRange$4: function(_, start, $length, from, startFrom) {
    $.IterableMixinWorkaround_setRangeList(this, start, $length, from, startFrom);
  },
  toString$0: function(_) {
    return $.ToString_collectionToString(this);
  },
  $asCollection: function() {
    return null;
  },
  $asIterable: function() {
    return null;
  },
  $asObservable: null,
  $asList: function() {
    return null;
  },
  $isObservable: true,
  $isList: function() {
    return true;
  },
  $isCollection: function() {
    return true;
  },
  $isIterable: function() {
    return true;
  }
};

$$.ListIterator0 = {"": "Object;_liblib10$_list,_liblib10$_length,_liblib10$_position,_liblib10$_current",
  moveNext$0: function() {
    var t1, t2, t4, nextPosition;
    t1 = this._liblib10$_list;
    t2 = t1.get$length(t1);
    if (typeof t2 !== "number")
      return this.moveNext$0$bailout(1, t1, t2);
    t4 = this._liblib10$_length;
    if (typeof t4 !== "number")
      return this.moveNext$0$bailout(2, t1, t2, t4);
    if (t2 !== t4)
      throw $.$$throw($.ConcurrentModificationError$(t1));
    nextPosition = this._liblib10$_position + 1;
    if (nextPosition < t4) {
      this._liblib10$_position = nextPosition;
      this._liblib10$_current = t1.$index(t1, nextPosition);
      return true;
    }
    this._liblib10$_current = null;
    return false;
  },
  moveNext$0$bailout: function(state0, t1, t2, t4) {
    switch (state0) {
      case 0:
        t1 = this._liblib10$_list;
        t2 = t1.get$length(t1);
      case 1:
        state0 = 0;
        t4 = this._liblib10$_length;
      case 2:
        var nextPosition;
        state0 = 0;
        if ($.$$eq$o(t2, t4) !== true)
          throw $.$$throw($.ConcurrentModificationError$(t1));
        nextPosition = this._liblib10$_position + 1;
        if ($.CONSTANT2.$lt(nextPosition, t4)) {
          this._liblib10$_position = nextPosition;
          this._liblib10$_current = t1.$index(t1, nextPosition);
          return true;
        }
        this._liblib10$_current = null;
        return false;
    }
  },
  get$current: function() {
    return this._liblib10$_current;
  }
};

$$.ChangeNotification = {"": "Object;oldValue>,newValue>,changes>",
  $eq: function(_, other) {
    var t1;
    if (other == null)
      return false;
    if (typeof other === "object" && other !== null && !!other.$isChangeNotification)
      t1 = $.$$eq$o(this.oldValue, other.oldValue) === true && $.$$eq$o(this.newValue, other.newValue) === true && $.$$eq$o(this.changes, other.changes) === true;
    else
      t1 = false;
    return t1;
  },
  get$hashCode: function(_) {
    return $.hash3(this.oldValue, this.newValue, this.changes);
  },
  toString$0: function(_) {
    var t1 = this.changes;
    if (t1 != null)
      return "#<ChangeNotification to " + $.S(this.newValue) + ": " + $.S(t1) + ">";
    return "#<ChangeNotification from " + $.S(this.oldValue) + " to " + $.S(this.newValue) + ">";
  },
  $isChangeNotification: true
};

$$.ChangeRecord = {"": "Object;type>,key>,oldValue>,newValue>",
  $eq: function(_, other) {
    var t1;
    if (other == null)
      return false;
    if (typeof other === "object" && other !== null && !!other.$isChangeRecord)
      t1 = this.type === other.type && $.$$eq$o(this.key, other.key) === true && $.$$eq$o(this.oldValue, other.oldValue) === true && $.$$eq$o(this.newValue, other.newValue) === true;
    else
      t1 = false;
    return t1;
  },
  get$hashCode: function(_) {
    return $.hash4(this.type, this.key, this.oldValue, this.newValue);
  },
  toString$0: function(_) {
    var typeStr = null;
    switch (this.type) {
      case 1:
        typeStr = "field";
        break;
      case 2:
        typeStr = "index";
        break;
      case 6:
        typeStr = "insert";
        break;
      case 10:
        typeStr = "remove";
        break;
    }
    return "#<ChangeRecord " + $.S(typeStr) + " " + $.S(this.key) + " from " + $.S(this.oldValue) + " to " + $.S(this.newValue) + ">";
  },
  $isChangeRecord: true
};

$$.Observable = {"": "Object;$$_observers=,$$_changes=,hashCode>", $isObservable: true};

$$._ExpressionObserver = {"": "Object;_id>,_expression,_callback,_debugName,_reads,_unobservers,_scheduled=,_liblib2$_value",
  _expression$0: function() {
    return this._expression.call$0();
  },
  _callback$1: function(arg0) {
    return this._callback.call$1(arg0);
  },
  toString$0: function(_) {
    var t1, t2;
    t1 = this._debugName;
    t2 = this._id;
    return t1 != null ? "<observer " + $.S(t2) + ": " + $.S(t1) + ">" : "<observer " + $.S(t2) + ">";
  },
  _observe$0: function() {
    var e, trace, $parent, exception, t1;
    $parent = $._activeObserver;
    $._activeObserver = this;
    try {
      this._liblib2$_value = this._expression$0();
    } catch (exception) {
      t1 = $.unwrapException(exception);
      e = t1;
      trace = $.getTraceFromException(exception);
      $.onObserveUnhandledError.call$4(e, trace, this._expression, "from " + $.S(this));
      this._liblib2$_value = null;
    }

    t1 = this._reads;
    t1.forEach$1(t1, this.get$_watchForChange());
    t1.clear$0(t1);
    $._activeObserver = $parent;
    this._observeValue$0();
    return this._unobservers.length > 0;
  },
  _runCallback$1: function(change) {
    var e, trace, exception, t1;
    try {
      this._callback$1(change);
    } catch (exception) {
      t1 = $.unwrapException(exception);
      e = t1;
      trace = $.getTraceFromException(exception);
      $.onObserveUnhandledError.call$4(e, trace, this._callback, "from " + $.S(this));
    }

  },
  _observeValue$0: function() {
    var value = this._liblib2$_value;
    if (!(typeof value === "object" && value !== null && !!value.$isObservable))
      return;
    $.CONSTANT0.add$1(this._unobservers, $.observeChanges(value, new $._ExpressionObserver__observeValue_anon(this, value)));
  },
  _addRead$3: function(target, type, key) {
    var reads, mask, e, trace, exception, t1;
    reads = this._reads.putIfAbsent$2(target, new $._ExpressionObserver__addRead_anon());
    try {
      mask = $.$$index$as(reads, key);
      if (mask == null)
        mask = 0;
      $.$$indexSet$a(reads, key, $.$$or$n(mask, type));
    } catch (exception) {
      t1 = $.unwrapException(exception);
      e = t1;
      trace = $.getTraceFromException(exception);
      $.onObserveUnhandledError.call$4(e, trace, key, "hashCode or operator == from " + $.S(this));
    }

  },
  _watchForChange$2: function(target, reads) {
    $.CONSTANT0.add$1(this._unobservers, $.observeChanges(target, new $._ExpressionObserver__watchForChange_anon(this, reads)));
  },
  get$_watchForChange: function() {
    return new $.BoundClosure$2(this, "_watchForChange$2");
  },
  _unobserve$0: function() {
    for (var t1 = $.CONSTANT0.get$iterator(this._unobservers); t1.moveNext$0();)
      t1.get$current().call$0();
    this._scheduled = false;
  },
  get$_unobserve: function() {
    return new $.BoundClosure$0(this, "_unobserve$0");
  },
  _deliver$0: function() {
    var oldValue, e, trace, t1, exception, change;
    if (this._scheduled !== true)
      return;
    oldValue = this._liblib2$_value;
    for (t1 = $.CONSTANT0.get$iterator(this._unobservers); t1.moveNext$0();)
      t1.get$current().call$0();
    this._scheduled = false;
    this._observe$0();
    try {
      if ($.$$eq$o(oldValue, this._liblib2$_value) === true)
        return;
    } catch (exception) {
      t1 = $.unwrapException(exception);
      e = t1;
      trace = $.getTraceFromException(exception);
      $.onObserveUnhandledError.call$4(e, trace, oldValue, "operator == from " + $.S(this));
      return;
    }

    change = $.ChangeNotification$(oldValue, this._liblib2$_value, null);
    this._runCallback$1(change);
    return change;
  }
};

$$.ObservableMap = {"": "Observable;_liblib12$_map>,_liblib12$_keys,_values,$$_observers,$$_changes,hashCode",
  get$keys: function() {
    return this._liblib12$_keys;
  },
  get$values: function() {
    return this._values;
  },
  get$length: function(_) {
    if ($.observeReads() === true)
      $.notifyRead(this, 1, "length");
    return $.get$length$as(this._liblib12$_map);
  },
  get$isEmpty: function(_) {
    return $.$$eq$o(this.get$length(this), 0);
  },
  _notifyReadKey$1: function(key) {
    return $._activeObserver._addRead$3(this, 2, key);
  },
  get$_notifyReadKey: function() {
    return new $.BoundClosure$1(this, "_notifyReadKey$1");
  },
  containsKey$1: function(key) {
    var t1 = $._activeObserver;
    if (t1 != null)
      t1._addRead$3(this, 2, key);
    return this._liblib12$_map.containsKey$1(key);
  },
  $index: function(_, key) {
    var t1 = $._activeObserver;
    if (t1 != null)
      t1._addRead$3(this, 2, key);
    t1 = this._liblib12$_map;
    if (typeof t1 !== "string" && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !t1.$isJavaScriptIndexingBehavior()))
      return this.$$index$bailout(1, t1, key);
    if (key !== (key | 0))
      throw $.iae(key);
    if (key < 0 || key >= t1.length)
      throw $.ioore(key);
    return t1[key];
  },
  $$index$bailout: function(state0, t1, key) {
    return $.$$index$as(t1, key);
  },
  $indexSet: function(_, key, value) {
    var t1, len, oldValue, t2;
    t1 = this._liblib12$_map;
    if (typeof t1 !== "object" || t1 === null || (t1.constructor !== Array || !!t1.immutable$list) && !t1.$isJavaScriptIndexingBehavior())
      return this.$$indexSet$bailout(1, key, value, t1);
    len = t1.length;
    if (key !== (key | 0))
      throw $.iae(key);
    if (key < 0 || key >= len)
      throw $.ioore(key);
    oldValue = t1[key];
    t1[key] = value;
    t2 = this.$$_observers;
    if (t2 != null && t2.get$head() != null) {
      t1 = t1.length;
      if (len !== t1) {
        $.notifyChange(this, 1, "length", len, t1);
        $.notifyChange(this, 6, key, oldValue, value);
      } else if ($.$$eq$o(oldValue, value) !== true)
        $.notifyChange(this, 2, key, oldValue, value);
    }
  },
  $$indexSet$bailout: function(state0, key, value, t1) {
    var t3, len, oldValue, t2;
    t3 = $.getInterceptor$as(t1);
    len = t3.get$length(t1);
    oldValue = t3.$index(t1, key);
    $.$$indexSet$a(t1, key, value);
    t2 = this.$$_observers;
    if (t2 != null && t2.get$head() != null)
      if ($.$$eq$o(len, t3.get$length(t1)) !== true) {
        $.notifyChange(this, 1, "length", len, t3.get$length(t1));
        $.notifyChange(this, 6, key, oldValue, value);
      } else if ($.$$eq$o(oldValue, value) !== true)
        $.notifyChange(this, 2, key, oldValue, value);
  },
  remove$1: function(_, key) {
    var t1, t2, len, result, t3;
    t1 = $._activeObserver;
    if (t1 != null)
      t1._addRead$3(this, 2, key);
    t1 = this._liblib12$_map;
    t2 = $.getInterceptor$as(t1);
    len = t2.get$length(t1);
    result = $.remove$1$a(t1, key);
    t3 = this.$$_observers;
    if (t3 != null && t3.get$head() != null && $.$$eq$o(len, t2.get$length(t1)) !== true) {
      $.notifyChange(this, 10, key, result, null);
      $.notifyChange(this, 1, "length", len, t2.get$length(t1));
    }
    return result;
  },
  get$remove: function(receiver) {
    return new $.BoundClosure$i1(this, "remove$1", receiver);
  },
  clear$0: function(_) {
    var t1, len, t2;
    t1 = this._liblib12$_map;
    len = $.get$length$as(t1);
    t2 = this.$$_observers;
    if (t2 != null && t2.get$head() != null && $.$$gt$n(len, 0) === true) {
      $.forEach$1$a(t1, new $.ObservableMap_clear_anon(this));
      $.notifyChange(this, 1, "length", len, 0);
    }
    $.clear$0$a(t1);
  },
  forEach$1: function(_, f) {
    var t1 = $._activeObserver;
    if (t1 != null) {
      t1._addRead$3(this, 1, "length");
      $.forEach$1$a(this._liblib12$_map.get$keys(), this.get$_notifyReadKey());
    }
    $.forEach$1$a(this._liblib12$_map, f);
  },
  toString$0: function(_) {
    return $.ToString_mapToString(this);
  },
  ObservableMap$1$createMap: function(createMap, K, V) {
    this._liblib12$_keys = $._ObservableMapKeyIterable$(this, K, V);
    this._values = $._ObservableMapValueIterable$(this, K, V);
  },
  $asObservable: null,
  $asMap: null,
  $isMap: true
};

$$._ObservableMapKeyIterable = {"": "Iterable;_liblib12$_map>",
  get$iterator: function(_) {
    return $._ObservableMapKeyIterator$(this._liblib12$_map, $.getRuntimeTypeArgument(this, this["$as_ObservableMapKeyIterable"], 0), $.getRuntimeTypeArgument(this, this["$as_ObservableMapKeyIterable"], 1));
  },
  $asIterable: function() {
    return function (K, V) { return [K]; };
  }
};

$$._ObservableMapKeyIterator = {"": "Object;_liblib12$_map>,_liblib12$_keys,_liblib12$_hasNext",
  moveNext$0: function() {
    var t1 = $._activeObserver;
    if (t1 != null)
      t1._addRead$3(this._liblib12$_map, 1, "length");
    t1 = this._liblib12$_keys.moveNext$0();
    this._liblib12$_hasNext = t1;
    return t1;
  },
  get$current: function() {
    var key = this._liblib12$_keys.get$current();
    if ($.observeReads() === true && this._liblib12$_hasNext === true)
      this._liblib12$_map._notifyReadKey$1(key);
    return key;
  }
};

$$._ObservableMapValueIterable = {"": "Iterable;_liblib12$_map>",
  get$iterator: function(_) {
    return $._ObservableMapValueIterator$(this._liblib12$_map, $.getRuntimeTypeArgument(this, this["$as_ObservableMapValueIterable"], 0), $.getRuntimeTypeArgument(this, this["$as_ObservableMapValueIterable"], 1));
  },
  $asIterable: function() {
    return function (K, V) { return [V]; };
  }
};

$$._ObservableMapValueIterator = {"": "Object;_liblib12$_map>,_liblib12$_keys,_values,_liblib12$_hasNext",
  moveNext$0: function() {
    var t1, moreKeys, moreValues;
    t1 = $._activeObserver;
    if (t1 != null)
      t1._addRead$3(this._liblib12$_map, 1, "length");
    moreKeys = this._liblib12$_keys.moveNext$0();
    moreValues = this._values.moveNext$0();
    if ($.$$eq$o(moreKeys, moreValues) !== true)
      throw $.$$throw($.StateError$("keys and values should be the same length"));
    this._liblib12$_hasNext = moreValues;
    return moreValues;
  },
  get$current: function() {
    if ($.observeReads() === true && this._liblib12$_hasNext === true)
      this._liblib12$_map._notifyReadKey$1(this._liblib12$_keys.get$current());
    return this._values.get$current();
  }
};

$$.ObservableReference = {"": "Observable;_liblib7$_value,$$_observers,$$_changes,hashCode",
  get$value: function() {
    if ($.observeReads() === true)
      $.notifyRead(this, 1, "value");
    return this._liblib7$_value;
  },
  set$value: function(newValue) {
    if ($.hasObservers(this))
      $.notifyChange(this, 1, "value", this._liblib7$_value, newValue);
    this._liblib7$_value = newValue;
  },
  toString$0: function(_) {
    return "#<" + $.S(this.get$runtimeType(this)) + " value: " + $.S(this.get$value()) + ">";
  },
  $asObservable: null
};

$$.ObservableSet = {"": "Collection;hashCode>,$$_observers=,$$_changes=,_liblib11$_map,_createMap",
  contains$1: function(_, value) {
    var t1 = $._activeObserver;
    if (t1 != null)
      t1._addRead$3(this, 2, value);
    return this._liblib11$_map.containsKey$1(value);
  },
  get$contains: function(receiver) {
    return new $.BoundClosure$i1(this, "contains$1", receiver);
  },
  add$1: function(_, value) {
    var t1, len;
    t1 = this._liblib11$_map;
    if (typeof t1 !== "object" || t1 === null || (t1.constructor !== Array || !!t1.immutable$list) && !t1.$isJavaScriptIndexingBehavior())
      return this.add$1$bailout1(1, value, t1);
    len = t1.length;
    if (value !== (value | 0))
      throw $.iae(value);
    if (value < 0 || value >= len)
      throw $.ioore(value);
    t1[value] = $.CONSTANT15;
    if (len !== len) {
      $.notifyChange(this, 1, "length", len, len);
      $.notifyChange(this, 6, value, null, value);
    }
  },
  add$1$bailout1: function(state0, value, t1) {
    var t3, len;
    t3 = $.getInterceptor$as(t1);
    len = t3.get$length(t1);
    $.$$indexSet$a(t1, value, $.CONSTANT15);
    if ($.$$eq$o(len, t3.get$length(t1)) !== true) {
      $.notifyChange(this, 1, "length", len, t3.get$length(t1));
      $.notifyChange(this, 6, value, null, value);
    }
  },
  get$add: function(receiver) {
    return new $.BoundClosure$i1(this, "add$1", receiver);
  },
  remove$1: function(_, value) {
    var t1, t2, len, t3;
    t1 = $._activeObserver;
    if (t1 != null)
      t1._addRead$3(this, 2, value);
    t1 = this._liblib11$_map;
    t2 = $.getInterceptor$as(t1);
    len = t2.get$length(t1);
    $.remove$1$a(t1, value);
    if ($.$$eq$o(len, t2.get$length(t1)) !== true) {
      t3 = this.$$_observers;
      if (t3 != null && t3.get$head() != null) {
        $.notifyChange(this, 10, value, value, null);
        $.notifyChange(this, 1, "length", len, t2.get$length(t1));
      }
      return true;
    }
    return false;
  },
  get$remove: function(receiver) {
    return new $.BoundClosure$i1(this, "remove$1", receiver);
  },
  clear$0: function(_) {
    var t1, t2, t3;
    t1 = this.$$_observers;
    if (t1 != null && t1.get$head() != null) {
      for (t1 = this._liblib11$_map, t2 = $.get$iterator$a(t1.get$keys()); t2.moveNext$0() === true;) {
        t3 = t2.get$current();
        $.notifyChange(this, 10, t3, t3, null);
      }
      $.notifyChange(this, 1, "length", $.get$length$as(t1), 0);
    }
    $.clear$0$a(this._liblib11$_map);
  },
  get$length: function(_) {
    if ($.observeReads() === true)
      $.notifyRead(this, 1, "length");
    return $.get$length$as(this._liblib11$_map);
  },
  get$isEmpty: function(_) {
    return $.$$eq$o(this.get$length(this), 0);
  },
  get$iterator: function(_) {
    return $._ObservableSetIterator$(this, $.getRuntimeTypeArgument(this, this["$asObservableSet"], 0));
  },
  addAll$1: function(_, collection) {
    return $.forEach$1$a(collection, this.get$add(this));
  },
  removeAll$1: function(_, collection) {
    return $.forEach$1$a(collection, this.get$remove(this));
  },
  toString$0: function(_) {
    return $.ToString_collectionToString(this);
  },
  $asCollection: function() {
    return null;
  },
  $asIterable: function() {
    return null;
  },
  $asObservable: null,
  $asSet: null,
  $isObservable: true,
  $isSet: true,
  $isCollection: function() {
    return true;
  },
  $isIterable: function() {
    return true;
  }
};

$$._ObservableSetIterator = {"": "Object;_set,_liblib11$_iterator,_hasNext",
  moveNext$0: function() {
    var t1 = this._set;
    t1.get$length(t1);
    t1 = this._liblib11$_iterator.moveNext$0();
    this._hasNext = t1;
    return t1;
  },
  get$current: function() {
    var result = this._liblib11$_iterator.get$current();
    if ($.observeReads() === true && this._hasNext === true)
      $.notifyRead(this._set, 2, result);
    return result;
  }
};

$$.LinkedListNode = {"": "Object;_previous<,_liblib1$_next<,_liblib1$_list>,_liblib1$_value",
  get$next: function() {
    return this._liblib1$_next;
  },
  get$value: function() {
    return this._liblib1$_value;
  },
  set$value: function(e) {
    this._liblib1$_value = e;
    return e;
  },
  _link$2: function(p, n) {
    this._liblib1$_next = n;
    this._previous = p;
    if (p != null)
      p.set$_liblib1$_next(this);
    if (n != null)
      n.set$_previous(this);
    return this;
  },
  remove$0: function(_) {
    var t1, t2;
    t1 = this._liblib1$_list;
    if (t1 == null)
      return;
    t2 = t1._liblib1$_length;
    if (typeof t2 !== "number")
      return this.remove$0$bailout(1, t2, t1);
    t1._liblib1$_length = t2 - 1;
    t1 = this._previous;
    t2 = this._liblib1$_next;
    if (t1 != null)
      t1.set$_liblib1$_next(t2);
    else
      this._liblib1$_list._head = t2;
    t1 = this._liblib1$_next;
    t2 = this._previous;
    if (t1 != null)
      t1.set$_previous(t2);
    else
      this._liblib1$_list._tail = t2;
    this._liblib1$_next = null;
    this._previous = null;
    this._liblib1$_list = null;
  },
  remove$0$bailout: function(state0, t2, t1) {
    t1._liblib1$_length = $.$$sub$n(t2, 1);
    t1 = this._previous;
    t2 = this._liblib1$_next;
    if (t1 != null)
      t1.set$_liblib1$_next(t2);
    else
      this._liblib1$_list._head = t2;
    t1 = this._liblib1$_next;
    t2 = this._previous;
    if (t1 != null)
      t1.set$_previous(t2);
    else
      this._liblib1$_list._tail = t2;
    this._liblib1$_next = null;
    this._previous = null;
    this._liblib1$_list = null;
  },
  get$remove: function(receiver) {
    return new $.BoundClosure$i0(this, "remove$0", receiver);
  },
  LinkedListNode$_$2: function(value, _list, E) {
    var t1 = this._liblib1$_list;
    if (t1 != null)
      t1._liblib1$_length = $.$$add$n(t1._liblib1$_length, 1);
  }
};

$$.LinkedList = {"": "Iterable;_head,_tail,_liblib1$_length",
  get$length: function(_) {
    return this._liblib1$_length;
  },
  get$head: function() {
    return this._head;
  },
  add$1: function(_, e) {
    var node, t1;
    node = $.LinkedListNode$_(e, this, $.getRuntimeTypeArgument(this, this["$asLinkedList"], 0));
    t1 = this._tail;
    if (t1 == null) {
      this._tail = node;
      this._head = node;
      return node;
    }
    t1 = node._link$2(t1, null);
    this._tail = t1;
    return t1;
  },
  get$add: function(receiver) {
    return new $.BoundClosure$i1(this, "add$1", receiver);
  },
  addAll$1: function(_, e) {
    return $.forEach$1$a(e, this.get$add(this));
  },
  get$iterator: function(_) {
    return $.LinkedListIterator$(this, $.getRuntimeTypeArgument(this, this["$asLinkedList"], 0));
  },
  $asIterable: function() {
    return null;
  }
};

$$.LinkedListIterator = {"": "Object;_copy,_liblib1$_list>,_liblib1$_current,_pos",
  get$current: function() {
    return this._liblib1$_current;
  },
  moveNext$0: function() {
    var t1, t3, t4, t2;
    do {
      this._pos = this._pos + 1;
      t1 = this._pos;
      if (t1 !== (t1 | 0))
        return this.moveNext$0$bailout(1, t1);
      t3 = this._copy;
      t4 = t3.length;
      if (t1 < t4) {
        if (t1 < 0)
          throw $.ioore(t1);
        t2 = $.$$eq$o(t3[t1].get$_liblib1$_list(), this._liblib1$_list) !== true;
        t1 = t2;
      } else
        t1 = false;
    } while (t1);
    t1 = this._pos;
    if (t1 !== (t1 | 0))
      return this.moveNext$0$bailout(2, t1);
    t3 = this._copy;
    t4 = t3.length;
    if (t1 < t4) {
      if (t1 < 0)
        throw $.ioore(t1);
      this._liblib1$_current = t3[t1].get$value();
      return true;
    } else {
      this._liblib1$_current = null;
      return false;
    }
  },
  moveNext$0$bailout: function(state0, t1) {
    switch (state0) {
      case 0:
      case 1:
        L0:
          while (true)
            switch (state0) {
              case 0:
                this._pos = this._pos + 1;
                t1 = this._pos;
              case 1:
                state0 = 0;
                t3 = this._copy;
                t4 = t3.length;
                if (t1 < t4) {
                  if (t1 !== (t1 | 0))
                    throw $.iae(t1);
                  if (t1 < 0 || t1 >= t4)
                    throw $.ioore(t1);
                  t2 = $.$$eq$o(t3[t1].get$_liblib1$_list(), this._liblib1$_list) !== true;
                  t1 = t2;
                } else
                  t1 = false;
                if (!t1)
                  break L0;
            }
        t1 = this._pos;
      case 2:
        var t3, t4, t2;
        state0 = 0;
        t3 = this._copy;
        t4 = t3.length;
        if (t1 < t4) {
          if (t1 !== (t1 | 0))
            throw $.iae(t1);
          if (t1 < 0 || t1 >= t4)
            throw $.ioore(t1);
          this._liblib1$_current = t3[t1].get$value();
          return true;
        } else {
          this._liblib1$_current = null;
          return false;
        }
    }
  },
  LinkedListIterator$1: function(_list, E) {
    var t1, t2, node, i, i0;
    t1 = this._liblib1$_list;
    t2 = $.List_List$fixedLength(t1.get$length(t1), null, $.LinkedListNode);
    $.setRuntimeTypeInfo(t2, [$.LinkedListNode]);
    this._copy = t2;
    node = this._liblib1$_list.get$head();
    for (i = 0; node != null; i = i0) {
      t1 = this._copy;
      i0 = i + 1;
      if (i >= t1.length)
        throw $.ioore(i);
      t1[i] = node;
      node = node.get$next();
    }
  }
};

$$._ChildrenElementList = {"": "Object;_liblib0$_element,_childElements",
  toList$1$growable: function(_, growable) {
    var t1, output, len, t3, i, t2;
    t1 = this._childElements;
    if (growable === true) {
      output = [];
      $.CONSTANT0.set$length(output, $.get$length$as(t1));
    } else {
      output = $.List_List($.get$length$as(t1), $.Element);
      $.setRuntimeTypeInfo(output, [$.Element]);
    }
    if (typeof t1 !== "string" && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !t1.$isJavaScriptIndexingBehavior()))
      return this.toList$1$growable$bailout(1, t1, output);
    len = t1.length;
    t3 = output.length;
    i = 0;
    for (; i < len; ++i) {
      t2 = t1[i];
      if (i >= t3)
        throw $.ioore(i);
      output[i] = t2;
    }
    return output;
  },
  toList$1$growable$bailout: function(state0, t1, output, t3, len) {
    switch (state0) {
      case 0:
        t1 = this._childElements;
        if (growable === true) {
          output = [];
          $.CONSTANT0.set$length(output, $.get$length$as(t1));
        } else {
          output = $.List_List($.get$length$as(t1), $.Element);
          $.setRuntimeTypeInfo(output, [$.Element]);
        }
        t1 = this._childElements;
      case 1:
        state0 = 0;
        t3 = $.getInterceptor$as(t1);
        len = t3.get$length(t1);
      case 2:
        var i, t2;
        state0 = 0;
        i = 0;
        for (; $.CONSTANT2.$lt(i, len); ++i) {
          t2 = t3.$index(t1, i);
          if (i >= output.length)
            throw $.ioore(i);
          output[i] = t2;
        }
        return output;
    }
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  toSet$0: function(_) {
    var output, t1, len, i;
    output = $.HashSet$($.Element);
    t1 = this._childElements;
    if (typeof t1 !== "string" && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !t1.$isJavaScriptIndexingBehavior()))
      return this.toSet$0$bailout(1, t1, output);
    len = t1.length;
    i = 0;
    for (; i < len; ++i) {
      if (i >= t1.length)
        throw $.ioore(i);
      output.add$1(output, t1[i]);
    }
    return output;
  },
  toSet$0$bailout: function(state0, t1, output, t3, len) {
    switch (state0) {
      case 0:
        output = $.HashSet$($.Element);
        t1 = this._childElements;
      case 1:
        state0 = 0;
        t3 = $.getInterceptor$as(t1);
        len = t3.get$length(t1);
      case 2:
        var i;
        state0 = 0;
        i = 0;
        for (; $.CONSTANT2.$lt(i, len); ++i)
          output.add$1(output, t3.$index(t1, i));
        return output;
    }
  },
  contains$1: function(_, element) {
    return $.contains$1$as(this._childElements, element);
  },
  get$contains: function(receiver) {
    return new $.BoundClosure$i1(this, "contains$1", receiver);
  },
  forEach$1: function(_, f) {
    var t1;
    for (t1 = $.get$iterator$a(this._childElements); t1.moveNext$0() === true;)
      f.call$1(t1.get$current());
  },
  every$1: function(_, f) {
    var t1;
    for (t1 = this.get$iterator(this); t1.moveNext$0() === true;)
      if (f.call$1(t1.get$current()) !== true)
        return false;
    return true;
  },
  map$1: function(_, f) {
    return $.MappedListIterable$(this, f, null, null);
  },
  where$1: function(_, f) {
    return $.WhereIterable$(this, f, null);
  },
  get$isEmpty: function(_) {
    return this._liblib0$_element.firstElementChild == null;
  },
  skip$1: function(_, n) {
    return $.IterableMixinWorkaround_skipList(this, n);
  },
  elementAt$1: function(_, index) {
    return $.$$index$as(this._childElements, index);
  },
  get$length: function(_) {
    return $.get$length$as(this._childElements);
  },
  $index: function(_, index) {
    var t1 = this._childElements;
    if (typeof t1 !== "string" && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !t1.$isJavaScriptIndexingBehavior()))
      return this.$$index$bailout(1, index, t1);
    if (index !== (index | 0))
      throw $.iae(index);
    if (index < 0 || index >= t1.length)
      throw $.ioore(index);
    return t1[index];
  },
  $$index$bailout: function(state0, index, t1) {
    return $.$$index$as(t1, index);
  },
  $indexSet: function(_, index, value) {
    this._liblib0$_element.replaceChild(value, $.$$index$as(this._childElements, index));
  },
  set$length: function(_, newLength) {
    throw $.$$throw($.UnsupportedError$(""));
  },
  add$1: function(_, value) {
    this._liblib0$_element.appendChild(value);
    return value;
  },
  get$iterator: function(_) {
    return $.CONSTANT0.get$iterator(this.toList$0(this));
  },
  addAll$1: function(_, iterable) {
    var t1, t2;
    if (typeof iterable === "object" && iterable !== null && !!iterable.$is_ChildNodeListLazy)
      iterable = $.List_List$from(iterable, true, null);
    for (t1 = $.get$iterator$a(iterable), t2 = this._liblib0$_element; t1.moveNext$0() === true;)
      t2.appendChild(t1.get$current());
  },
  setRange$4: function(_, start, rangeLength, from, startFrom) {
    throw $.$$throw($.UnimplementedError$(null));
  },
  remove$1: function(_, object) {
    var t1, t2;
    if (typeof object === "object" && object !== null && object.$isElement()) {
      t1 = object.get$parentNode();
      t2 = this._liblib0$_element;
      if (t1 === t2)
        t2.removeChild(object);
    }
  },
  get$remove: function(receiver) {
    return new $.BoundClosure$i1(this, "remove$1", receiver);
  },
  removeAll$1: function(_, elements) {
    $.IterableMixinWorkaround_removeAll(this, elements);
  },
  removeMatching$1: function(_, test) {
    $.IterableMixinWorkaround_removeMatching(this, test);
  },
  removeRange$2: function(_, start, rangeLength) {
    throw $.$$throw($.UnimplementedError$(null));
  },
  indexOf$2: function(_, element, start) {
    return $.Lists_indexOf(this, element, start, this.get$length(this));
  },
  indexOf$1: function($receiver, element) {
    return this.indexOf$2($receiver, element, 0);
  },
  clear$0: function(_) {
    this._liblib0$_element.textContent = "";
  },
  removeLast$0: function(_) {
    var result = this.get$last(this);
    if (result != null)
      this._liblib0$_element.removeChild(result);
    return result;
  },
  get$last: function(_) {
    var result = this._liblib0$_element.lastElementChild;
    if (result == null)
      throw $.$$throw($.StateError$("No elements"));
    return result;
  },
  $isList: function() {
    return true;
  },
  $asList: function() {
    return function () { return [null]; };
  },
  $isCollection: function() {
    return true;
  },
  $asCollection: function() {
    return function () { return [null]; };
  },
  $isIterable: function() {
    return true;
  },
  $asIterable: function() {
    return function () { return [null]; };
  }
};

$$._FrozenElementList = {"": "Object;_nodeList",
  contains$1: function(_, element) {
    var t1;
    for (t1 = this.get$iterator(this); t1.moveNext$0();)
      if ($.$$eq$o(t1.get$current(), element) === true)
        return true;
    return false;
  },
  get$contains: function(receiver) {
    return new $.BoundClosure$i1(this, "contains$1", receiver);
  },
  forEach$1: function(_, f) {
    var t1;
    for (t1 = this.get$iterator(this); t1.moveNext$0();)
      f.call$1(t1.get$current());
  },
  map$1: function(_, f) {
    return $.MappedListIterable$(this, f, null, null);
  },
  where$1: function(_, f) {
    return $.WhereIterable$(this, f, null);
  },
  every$1: function(_, f) {
    var t1;
    for (t1 = this.get$iterator(this); t1.moveNext$0();)
      if (f.call$1(t1.get$current()) !== true)
        return false;
    return true;
  },
  toList$1$growable: function(_, growable) {
    var t1 = $.List_List$from(this, growable, $.Element);
    $.setRuntimeTypeInfo(t1, [$.Element]);
    return t1;
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  toSet$0: function(_) {
    var t1 = $.HashSet$($.Element);
    t1.addAll$1(t1, this);
    return t1;
  },
  skip$1: function(_, n) {
    return $.IterableMixinWorkaround_skipList(this, n);
  },
  elementAt$1: function(_, index) {
    return $.$$index$as(this._nodeList, index);
  },
  get$isEmpty: function(_) {
    return $.get$isEmpty$as(this._nodeList);
  },
  get$length: function(_) {
    return $.get$length$as(this._nodeList);
  },
  $index: function(_, index) {
    var t1 = this._nodeList;
    if (typeof t1 !== "string" && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !t1.$isJavaScriptIndexingBehavior()))
      return this.$$index$bailout(1, index, t1);
    if (index !== (index | 0))
      throw $.iae(index);
    if (index < 0 || index >= t1.length)
      throw $.ioore(index);
    return t1[index];
  },
  $$index$bailout: function(state0, index, t1) {
    return $.$$index$as(t1, index);
  },
  $indexSet: function(_, index, value) {
    throw $.$$throw($.UnsupportedError$(""));
  },
  set$length: function(_, newLength) {
    $.set$length$as(this._nodeList, newLength);
  },
  add$1: function(_, value) {
    throw $.$$throw($.UnsupportedError$(""));
  },
  get$iterator: function(_) {
    return $._FrozenElementListIterator$(this);
  },
  addAll$1: function(_, iterable) {
    throw $.$$throw($.UnsupportedError$(""));
  },
  setRange$4: function(_, start, rangeLength, from, startFrom) {
    throw $.$$throw($.UnsupportedError$(""));
  },
  removeRange$2: function(_, start, rangeLength) {
    throw $.$$throw($.UnsupportedError$(""));
  },
  indexOf$2: function(_, element, start) {
    return $.indexOf$2$as(this._nodeList, element, start);
  },
  indexOf$1: function($receiver, element) {
    return this.indexOf$2($receiver, element, 0);
  },
  clear$0: function(_) {
    throw $.$$throw($.UnsupportedError$(""));
  },
  removeLast$0: function(_) {
    throw $.$$throw($.UnsupportedError$(""));
  },
  remove$1: function(_, element) {
    throw $.$$throw($.UnsupportedError$(""));
  },
  get$remove: function(receiver) {
    return new $.BoundClosure$i1(this, "remove$1", receiver);
  },
  removeAll$1: function(_, elements) {
    throw $.$$throw($.UnsupportedError$(""));
  },
  removeMatching$1: function(_, test) {
    throw $.$$throw($.UnsupportedError$(""));
  },
  get$last: function(_) {
    return $.get$last$a(this._nodeList);
  },
  $isList: function() {
    return true;
  },
  $asList: function() {
    return function () { return [null]; };
  },
  $isCollection: function() {
    return true;
  },
  $asCollection: function() {
    return function () { return [null]; };
  },
  $isIterable: function() {
    return true;
  },
  $asIterable: function() {
    return function () { return [null]; };
  }
};

$$._FrozenElementListIterator = {"": "Object;_list,_liblib0$_index,_current",
  moveNext$0: function() {
    var t1, nextIndex, t2;
    t1 = this._liblib0$_index;
    if (typeof t1 !== "number")
      return this.moveNext$0$bailout(1, t1);
    nextIndex = t1 + 1;
    t1 = this._list;
    t2 = t1.get$length(t1);
    if (typeof t2 !== "number")
      return this.moveNext$0$bailout(2, t1, t2, nextIndex);
    if (nextIndex < t2) {
      this._current = t1.$index(t1, nextIndex);
      this._liblib0$_index = nextIndex;
      return true;
    }
    this._liblib0$_index = t1.get$length(t1);
    this._current = null;
    return false;
  },
  moveNext$0$bailout: function(state0, t1, t2, nextIndex) {
    switch (state0) {
      case 0:
        t1 = this._liblib0$_index;
      case 1:
        state0 = 0;
        nextIndex = $.$$add$n(t1, 1);
        t1 = this._list;
        t2 = t1.get$length(t1);
      case 2:
        state0 = 0;
        if ($.$$lt$n(nextIndex, t2) === true) {
          this._current = t1.$index(t1, nextIndex);
          this._liblib0$_index = nextIndex;
          return true;
        }
        this._liblib0$_index = t1.get$length(t1);
        this._current = null;
        return false;
    }
  },
  get$current: function() {
    return this._current;
  }
};

$$._ElementCssClassSet = {"": "CssClassSet;_liblib0$_element",
  readClasses$0: function() {
    var s, t1, trimmed;
    s = $.LinkedHashSet$($.String);
    for (t1 = $.CONSTANT0.get$iterator($.split$1$s(this._liblib0$_element.className, " ")); t1.moveNext$0();) {
      trimmed = $.trim$0$s(t1.get$current());
      if ($.CONSTANT1.get$isEmpty(trimmed) !== true)
        s.add$1(s, trimmed);
    }
    return s;
  },
  writeClasses$1: function(s) {
    var t1;
    $.List_List$from(s, true, null);
    t1 = s.join$1(s, " ");
    this._liblib0$_element.className = t1;
  }
};

$$._ChildNodeListLazy = {"": "Object;_this",
  get$last: function(_) {
    var result = this._this.lastChild;
    if (result.$eq(result, null))
      throw $.$$throw($.StateError$("No elements"));
    return result;
  },
  add$1: function(_, value) {
    this._this.appendChild(value);
  },
  addAll$1: function(_, iterable) {
    var t1, t2, len, i;
    if (typeof iterable === "object" && iterable !== null && !!iterable.$is_ChildNodeListLazy) {
      t1 = iterable._this;
      t2 = this._this;
      if (!t1.$eq(t1, t2)) {
        len = iterable.get$length(iterable);
        if (typeof len !== "number")
          return this.addAll$1$bailout(1, iterable, t2, len);
        i = 0;
        for (; i < len; ++i)
          t2.appendChild(iterable.$index(iterable, 0));
      }
      return;
    }
    for (t1 = $.get$iterator$a(iterable), t2 = this._this; t1.moveNext$0() === true;)
      t2.appendChild(t1.get$current());
  },
  addAll$1$bailout: function(state0, iterable, t2, len) {
    switch (state0) {
      case 0:
      case 1:
        var t1, i;
        if (state0 === 1 || state0 === 0 && typeof iterable === "object" && iterable !== null && !!iterable.$is_ChildNodeListLazy)
          switch (state0) {
            case 0:
              t1 = iterable._this;
              t2 = this._this;
            case 1:
              if (state0 === 1 || state0 === 0 && !t1.$eq(t1, t2))
                switch (state0) {
                  case 0:
                    len = iterable.get$length(iterable);
                  case 1:
                    state0 = 0;
                    i = 0;
                    for (; $.CONSTANT2.$lt(i, len); ++i)
                      t2.appendChild(iterable.$index(iterable, 0));
                }
              return;
          }
        for (t1 = $.get$iterator$a(iterable), t2 = this._this; t1.moveNext$0() === true;)
          t2.appendChild(t1.get$current());
    }
  },
  removeLast$0: function(_) {
    var result = this.get$last(this);
    if (result != null)
      this._this.removeChild(result);
    return result;
  },
  remove$1: function(_, object) {
    var t1;
    if (!(typeof object === "object" && object !== null && object.$isNode()))
      return;
    t1 = this._this;
    if (t1 !== object.get$parentNode())
      return;
    t1.removeChild(object);
  },
  get$remove: function(receiver) {
    return new $.BoundClosure$i1(this, "remove$1", receiver);
  },
  removeAll$1: function(_, elements) {
    $.IterableMixinWorkaround_removeAll(this, elements);
  },
  removeMatching$1: function(_, test) {
    $.IterableMixinWorkaround_removeMatching(this, test);
  },
  clear$0: function(_) {
    this._this.textContent = "";
  },
  $indexSet: function(_, index, value) {
    var t1 = this._this;
    t1.replaceChild(value, $.$$index$as(t1.childNodes, index));
  },
  get$iterator: function(_) {
    return $.get$iterator$a(this._this.childNodes);
  },
  contains$1: function(_, element) {
    return $.IterableMixinWorkaround_contains(this, element);
  },
  get$contains: function(receiver) {
    return new $.BoundClosure$i1(this, "contains$1", receiver);
  },
  forEach$1: function(_, f) {
    var t1;
    for (t1 = this.get$iterator(this); t1.moveNext$0() === true;)
      f.call$1(t1.get$current());
    return;
  },
  map$1: function(_, f) {
    return $.MappedListIterable$(this, f, null, null);
  },
  where$1: function(_, f) {
    return $.WhereIterable$(this, f, null);
  },
  every$1: function(_, f) {
    return $.IterableMixinWorkaround_every(this, f);
  },
  toList$1$growable: function(_, growable) {
    var t1 = $.List_List$from(this, growable, $.Node);
    $.setRuntimeTypeInfo(t1, [$.Node]);
    return t1;
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  toSet$0: function(_) {
    var t1 = $.HashSet$($.Node);
    t1.addAll$1(t1, this);
    return t1;
  },
  get$isEmpty: function(_) {
    return $.$$eq$o(this.get$length(this), 0);
  },
  skip$1: function(_, n) {
    return $.IterableMixinWorkaround_skipList(this, n);
  },
  elementAt$1: function(_, index) {
    return $.$$index$as(this._this.childNodes, index);
  },
  indexOf$2: function(_, element, start) {
    return $.Lists_indexOf(this, element, start, this.get$length(this));
  },
  indexOf$1: function($receiver, element) {
    return this.indexOf$2($receiver, element, 0);
  },
  setRange$4: function(_, start, rangeLength, from, startFrom) {
    throw $.$$throw($.UnsupportedError$("Cannot setRange on immutable List."));
  },
  removeRange$2: function(_, start, rangeLength) {
    throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
  },
  get$length: function(_) {
    return $.get$length$as(this._this.childNodes);
  },
  set$length: function(_, value) {
    throw $.$$throw($.UnsupportedError$("Cannot set length on immutable List."));
  },
  $index: function(_, index) {
    var t1 = this._this.childNodes;
    if (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !t1.$isJavaScriptIndexingBehavior())
      return this.$$index$bailout(1, index, t1);
    if (index !== (index | 0))
      throw $.iae(index);
    if (index < 0 || index >= t1.length)
      throw $.ioore(index);
    return t1[index];
  },
  $$index$bailout: function(state0, index, t1) {
    return $.$$index$as(t1, index);
  },
  $is_ChildNodeListLazy: true,
  $isList: function() {
    return true;
  },
  $asList: function() {
    return function () { return [null]; };
  },
  $isCollection: function() {
    return true;
  },
  $asCollection: function() {
    return function () { return [null]; };
  },
  $isIterable: function() {
    return true;
  },
  $asIterable: function() {
    return function () { return [null]; };
  }
};

$$._AttributeMap = {"": "Object;",
  clear$0: function(_) {
    var t1;
    for (t1 = $.CONSTANT0.get$iterator(this.get$keys()); t1.moveNext$0();)
      this.remove$1(this, t1.get$current());
  },
  forEach$1: function(_, f) {
    var t1, t2;
    for (t1 = $.CONSTANT0.get$iterator(this.get$keys()); t1.moveNext$0();) {
      t2 = t1.get$current();
      f.call$2(t2, this.$index(this, t2));
    }
  },
  get$keys: function() {
    var attributes, keys, len, i;
    attributes = this._liblib0$_element.attributes;
    keys = $.List_List($, $.String);
    $.setRuntimeTypeInfo(keys, [$.String]);
    for (len = attributes.get$length(attributes), i = 0; i < len; ++i)
      if (this._matches$1(attributes.$index(attributes, i)) === true)
        keys.push(attributes.$index(attributes, i).get$$$dom_localName());
    return keys;
  },
  get$values: function() {
    var attributes, values, len, i;
    attributes = this._liblib0$_element.attributes;
    values = $.List_List($, $.String);
    $.setRuntimeTypeInfo(values, [$.String]);
    for (len = attributes.get$length(attributes), i = 0; i < len; ++i)
      if (this._matches$1(attributes.$index(attributes, i)) === true)
        values.push(attributes.$index(attributes, i).get$value());
    return values;
  },
  get$isEmpty: function(_) {
    return $.$$eq$o(this.get$length(this), 0);
  },
  $isMap: true,
  $asMap: function () { return [$.String, $.String]; }
};

$$._ElementAttributeMap = {"": "_AttributeMap;_liblib0$_element",
  containsKey$1: function(key) {
    return this._liblib0$_element.hasAttribute(key);
  },
  $index: function(_, key) {
    return this._liblib0$_element.getAttribute(key);
  },
  $indexSet: function(_, key, value) {
    this._liblib0$_element.setAttribute(key, $.S(value));
  },
  remove$1: function(_, key) {
    var t1, value;
    t1 = this._liblib0$_element;
    value = t1.getAttribute(key);
    t1.removeAttribute(key);
    return value;
  },
  get$remove: function(receiver) {
    return new $.BoundClosure$i1(this, "remove$1", receiver);
  },
  get$length: function(_) {
    return this.get$keys().length;
  },
  _matches$1: function(node) {
    return node.get$$$dom_namespaceUri() == null;
  }
};

$$.CssClassSet = {"": "Object;",
  toString$0: function(_) {
    var t1 = this.readClasses$0();
    return t1.join$1(t1, " ");
  },
  get$iterator: function(_) {
    var t1 = this.readClasses$0();
    return t1.get$iterator(t1);
  },
  forEach$1: function(_, f) {
    var t1 = this.readClasses$0();
    t1.forEach$1(t1, f);
  },
  map$1: function(_, f) {
    var t1 = this.readClasses$0();
    return t1.map$1(t1, f);
  },
  where$1: function(_, f) {
    var t1 = this.readClasses$0();
    return t1.where$1(t1, f);
  },
  every$1: function(_, f) {
    var t1 = this.readClasses$0();
    return t1.every$1(t1, f);
  },
  get$isEmpty: function(_) {
    var t1 = this.readClasses$0();
    return t1.get$isEmpty(t1);
  },
  get$length: function(_) {
    var t1 = this.readClasses$0();
    return t1.get$length(t1);
  },
  contains$1: function(_, value) {
    var t1 = this.readClasses$0();
    return t1.contains$1(t1, value);
  },
  get$contains: function(receiver) {
    return new $.BoundClosure$i1(this, "contains$1", receiver);
  },
  add$1: function(_, value) {
    var t1, s;
    t1 = new $.CssClassSet_add_anon(value);
    s = this.readClasses$0();
    t1.call$1(s);
    this.writeClasses$1(s);
  },
  remove$1: function(_, value) {
    var s, result;
    if (!(typeof value === "string"))
      return false;
    s = this.readClasses$0();
    result = s.remove$1(s, value);
    this.writeClasses$1(s);
    return result;
  },
  get$remove: function(receiver) {
    return new $.BoundClosure$i1(this, "remove$1", receiver);
  },
  addAll$1: function(_, iterable) {
    var t1, s;
    t1 = new $.CssClassSet_addAll_anon(iterable);
    s = this.readClasses$0();
    t1.call$1(s);
    this.writeClasses$1(s);
  },
  removeAll$1: function(_, iterable) {
    var t1, s;
    t1 = new $.CssClassSet_removeAll_anon(iterable);
    s = this.readClasses$0();
    t1.call$1(s);
    this.writeClasses$1(s);
  },
  removeMatching$1: function(_, test) {
    var t1, s;
    t1 = new $.CssClassSet_removeMatching_anon(test);
    s = this.readClasses$0();
    t1.call$1(s);
    this.writeClasses$1(s);
  },
  get$last: function(_) {
    var t1 = this.readClasses$0();
    return t1.get$last(t1);
  },
  toList$1$growable: function(_, growable) {
    var t1 = this.readClasses$0();
    return t1.toList$1$growable(t1, growable);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  toSet$0: function(_) {
    var t1 = this.readClasses$0();
    return t1.toSet$0(t1);
  },
  skip$1: function(_, n) {
    var t1 = this.readClasses$0();
    return t1.skip$1(t1, n);
  },
  elementAt$1: function(_, index) {
    var t1 = this.readClasses$0();
    return t1.elementAt$1(t1, index);
  },
  clear$0: function(_) {
    var t1, s;
    t1 = new $.CssClassSet_clear_anon();
    s = this.readClasses$0();
    t1.call$1(s);
    this.writeClasses$1(s);
  },
  $isSet: true,
  $asSet: function () { return [$.String]; },
  $isCollection: function() {
    return true;
  },
  $asCollection: function() {
    return function () { return [$.String]; };
  },
  $isIterable: function() {
    return true;
  },
  $asIterable: function() {
    return function () { return [$.String]; };
  }
};

$$._EventStream = {"": "Stream;_target,_eventType,_useCapture",
  listen$4$onDone$onError$unsubscribeOnError: function(onData, onDone, onError, unsubscribeOnError) {
    return $._EventStreamSubscription$(this._target, this._eventType, onData, this._useCapture, $.getRuntimeTypeArgument(this, this["$as_EventStream"], 0));
  },
  listen$1: function(onData) {
    return this.listen$4$onDone$onError$unsubscribeOnError(onData, null, null, null);
  },
  listen$3$onDone$onError: function(onData, onDone, onError) {
    return this.listen$4$onDone$onError$unsubscribeOnError(onData, onDone, onError, null);
  },
  $asStream: null
};

$$._EventStreamSubscription = {"": "StreamSubscription;_pauseCount,_target,_eventType,_liblib0$_onData,_useCapture",
  cancel$0: function() {
    if (this.get$_canceled() === true)
      throw $.$$throw($.StateError$("Subscription has been canceled."));
    var t1 = this._liblib0$_onData;
    if (t1 != null)
      this._target.$$dom_removeEventListener$3(this._eventType, t1, this._useCapture);
    this._target = null;
    this._liblib0$_onData = null;
  },
  get$_canceled: function() {
    return this._target == null;
  },
  get$_paused: function() {
    return this._pauseCount > 0;
  },
  _tryResume$0: function() {
    if (this._liblib0$_onData != null && this.get$_paused() !== true)
      this._target.$$dom_addEventListener$3(this._eventType, this._liblib0$_onData, this._useCapture);
  },
  _EventStreamSubscription$4: function(_target, _eventType, _onData, _useCapture, T) {
    this._tryResume$0();
  },
  $asStreamSubscription: null
};

$$.EventStreamProvider = {"": "Object;_eventType",
  forTarget$2$useCapture: function(e, useCapture) {
    return $._EventStream$(e, this._eventType, useCapture, null);
  },
  forTarget$1: function(e) {
    return this.forTarget$2$useCapture(e, false);
  }
};

$$._WrappedList = {"": "Object;_list",
  get$iterator: function(_) {
    var t1 = this._list;
    return $._WrappedIterator$(t1.get$iterator(t1), null);
  },
  map$1: function(_, f) {
    var t1 = this._list;
    return t1.map$1(t1, f);
  },
  where$1: function(_, f) {
    var t1 = this._list;
    return t1.where$1(t1, f);
  },
  contains$1: function(_, element) {
    var t1 = this._list;
    return t1.contains$1(t1, element);
  },
  get$contains: function(receiver) {
    return new $.BoundClosure$i1(this, "contains$1", receiver);
  },
  forEach$1: function(_, f) {
    var t1 = this._list;
    t1.forEach$1(t1, f);
  },
  every$1: function(_, f) {
    var t1 = this._list;
    return t1.every$1(t1, f);
  },
  toList$1$growable: function(_, growable) {
    return $.List_List$from(this._list, growable, null);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  toSet$0: function(_) {
    var t1 = this._list;
    return t1.toSet$0(t1);
  },
  get$length: function(_) {
    var t1 = this._list;
    return t1.get$length(t1);
  },
  get$isEmpty: function(_) {
    var t1 = this._list;
    return t1.get$isEmpty(t1);
  },
  skip$1: function(_, n) {
    var t1 = this._list;
    return t1.skip$1(t1, n);
  },
  get$last: function(_) {
    var t1 = this._list;
    return t1.get$last(t1);
  },
  elementAt$1: function(_, index) {
    var t1 = this._list;
    return t1.elementAt$1(t1, index);
  },
  add$1: function(_, element) {
    var t1 = this._list;
    t1.add$1(t1, element);
  },
  addAll$1: function(_, elements) {
    var t1 = this._list;
    t1.addAll$1(t1, elements);
  },
  remove$1: function(_, element) {
    var t1 = this._list;
    t1.remove$1(t1, element);
  },
  get$remove: function(receiver) {
    return new $.BoundClosure$i1(this, "remove$1", receiver);
  },
  removeAll$1: function(_, elements) {
    var t1 = this._list;
    t1.removeAll$1(t1, elements);
  },
  removeMatching$1: function(_, test) {
    var t1 = this._list;
    t1.removeMatching$1(t1, test);
  },
  clear$0: function(_) {
    var t1 = this._list;
    t1.clear$0(t1);
  },
  $index: function(_, index) {
    var t1 = this._list;
    return t1.$index(t1, index);
  },
  $indexSet: function(_, index, value) {
    var t1 = this._list;
    t1.$indexSet(t1, index, value);
  },
  set$length: function(_, newLength) {
    var t1 = this._list;
    t1.set$length(t1, newLength);
  },
  indexOf$2: function(_, element, start) {
    var t1 = this._list;
    return t1.indexOf$2(t1, element, start);
  },
  indexOf$1: function($receiver, element) {
    return this.indexOf$2($receiver, element, 0);
  },
  removeLast$0: function(_) {
    var t1 = this._list;
    return t1.removeLast$0(t1);
  },
  setRange$4: function(_, start, $length, from, startFrom) {
    var t1 = this._list;
    t1.setRange$4(t1, start, $length, from, startFrom);
  },
  removeRange$2: function(_, start, $length) {
    var t1 = this._list;
    t1.removeRange$2(t1, start, $length);
  },
  $isList: function() {
    return true;
  },
  $asList: function() {
    return null;
  },
  $isCollection: function() {
    return true;
  },
  $asCollection: function() {
    return null;
  },
  $isIterable: function() {
    return true;
  },
  $asIterable: function() {
    return null;
  }
};

$$._WrappedIterator = {"": "Object;_liblib0$_iterator",
  moveNext$0: function() {
    return this._liblib0$_iterator.moveNext$0();
  },
  get$current: function() {
    return this._liblib0$_iterator.get$current();
  }
};

$$._DOMWindowCrossFrame = {"": "Object;_window",
  get$location: function() {
    return $._LocationCrossFrame__createSafe(this._window.location);
  },
  get$parent: function() {
    return $._DOMWindowCrossFrame__createSafe(this._window.parent);
  },
  close$0: function() {
    return this._window.close();
  }
};

$$._LocationCrossFrame = {"": "Object;_location"};

$$._LocationWrapper = {"": "Object;_ptr",
  get$hash: function() {
    return $._LocationWrapper__get(this._ptr, "hash");
  },
  toString$0: function(_) {
    return this._ptr.toString();
  },
  $isLocation: function() {
    return true;
  },
  $asLocation: function() {
    return null;
  }
};

$$.FixedSizeListIterator = {"": "Object;_array,_length,_position,_current",
  moveNext$0: function() {
    var t1, nextPosition;
    t1 = this._position;
    if (typeof t1 !== "number")
      return this.moveNext$0$bailout(1, t1);
    nextPosition = t1 + 1;
    t1 = this._length;
    if (typeof t1 !== "number")
      return this.moveNext$0$bailout(2, t1, nextPosition);
    if (nextPosition < t1) {
      t1 = this._array;
      if (typeof t1 !== "string" && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !t1.$isJavaScriptIndexingBehavior()))
        return this.moveNext$0$bailout(3, t1, nextPosition);
      if (nextPosition !== (nextPosition | 0))
        throw $.iae(nextPosition);
      if (nextPosition < 0 || nextPosition >= t1.length)
        throw $.ioore(nextPosition);
      this._current = t1[nextPosition];
      this._position = nextPosition;
      return true;
    }
    this._current = null;
    this._position = t1;
    return false;
  },
  moveNext$0$bailout: function(state0, t1, nextPosition) {
    switch (state0) {
      case 0:
        t1 = this._position;
      case 1:
        state0 = 0;
        nextPosition = $.$$add$n(t1, 1);
        t1 = this._length;
      case 2:
        state0 = 0;
      case 3:
        if (state0 === 3 || state0 === 0 && $.$$lt$n(nextPosition, t1) === true)
          switch (state0) {
            case 0:
              t1 = this._array;
            case 3:
              state0 = 0;
              this._current = $.$$index$as(t1, nextPosition);
              this._position = nextPosition;
              return true;
          }
        this._current = null;
        this._position = t1;
        return false;
    }
  },
  get$current: function() {
    return this._current;
  }
};

$$.FilteredElementList = {"": "Object;_node,_childNodes",
  get$_filtered: function() {
    var t1 = $.List_List$from($.where$1$a(this._childNodes, new $.FilteredElementList__filtered_anon()), true, $.Element);
    $.setRuntimeTypeInfo(t1, [$.Element]);
    return t1;
  },
  forEach$1: function(_, f) {
    $.CONSTANT0.forEach$1(this.get$_filtered(), f);
  },
  $indexSet: function(_, index, value) {
    var t1 = this.get$_filtered();
    if (index !== (index | 0))
      throw $.iae(index);
    if (index < 0 || index >= t1.length)
      throw $.ioore(index);
    t1[index].replaceWith$1(value);
  },
  set$length: function(_, newLength) {
    var len, t1;
    len = this.get$length(this);
    t1 = $.getInterceptor$n(newLength);
    if (t1.$ge(newLength, len) === true)
      return;
    else if (t1.$lt(newLength, 0) === true)
      throw $.$$throw($.ArgumentError$("Invalid list length"));
    this.removeRange$2(this, newLength, $.$$sub$n(len, newLength));
  },
  add$1: function(_, value) {
    $.add$1$a(this._childNodes, value);
  },
  addAll$1: function(_, iterable) {
    var t1, t2, t3;
    for (t1 = $.get$iterator$a(iterable), t2 = this._childNodes, t3 = $.getInterceptor$a(t2); t1.moveNext$0() === true;)
      t3.add$1(t2, t1.get$current());
  },
  contains$1: function(_, element) {
    return typeof element === "object" && element !== null && element.$isElement() && $.contains$1$as(this._childNodes, element) === true;
  },
  get$contains: function(receiver) {
    return new $.BoundClosure$i1(this, "contains$1", receiver);
  },
  setRange$4: function(_, start, rangeLength, from, startFrom) {
    throw $.$$throw($.UnimplementedError$(null));
  },
  removeRange$2: function(_, start, rangeLength) {
    $.CONSTANT0.forEach$1($.CONSTANT0.getRange$2(this.get$_filtered(), start, rangeLength), new $.FilteredElementList_removeRange_anon());
  },
  clear$0: function(_) {
    $.clear$0$a(this._childNodes);
  },
  removeLast$0: function(_) {
    var result = this.get$last(this);
    if (result != null)
      $.remove$0$a(result);
    return result;
  },
  map$1: function(_, f) {
    return $.CONSTANT0.map$1(this.get$_filtered(), f);
  },
  where$1: function(_, f) {
    return $.CONSTANT0.where$1(this.get$_filtered(), f);
  },
  remove$1: function(_, element) {
    var i, t1, indexElement;
    if (!(typeof element === "object" && element !== null && element.$isElement()))
      return;
    for (i = 0; $.CONSTANT2.$lt(i, this.get$length(this)); ++i) {
      t1 = this.get$_filtered();
      if (i >= t1.length)
        throw $.ioore(i);
      indexElement = t1[i];
      if (indexElement === element) {
        $.remove$0$a(indexElement);
        return;
      }
    }
  },
  get$remove: function(receiver) {
    return new $.BoundClosure$i1(this, "remove$1", receiver);
  },
  removeAll$1: function(_, elements) {
    $.IterableMixinWorkaround_removeAll(this, elements);
  },
  removeMatching$1: function(_, test) {
    $.IterableMixinWorkaround_removeMatching(this, test);
  },
  every$1: function(_, f) {
    return $.CONSTANT0.every$1(this.get$_filtered(), f);
  },
  toList$1$growable: function(_, growable) {
    var t1 = $.List_List$from(this, growable, $.Element);
    $.setRuntimeTypeInfo(t1, [$.Element]);
    return t1;
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  toSet$0: function(_) {
    var t1 = $.HashSet$($.Element);
    t1.addAll$1(t1, this);
    return t1;
  },
  elementAt$1: function(_, index) {
    var t1 = this.get$_filtered();
    if (index !== (index | 0))
      throw $.iae(index);
    if (index < 0 || index >= t1.length)
      throw $.ioore(index);
    return t1[index];
  },
  get$isEmpty: function(_) {
    return $.CONSTANT0.get$isEmpty(this.get$_filtered());
  },
  get$length: function(_) {
    return this.get$_filtered().length;
  },
  $index: function(_, index) {
    var t1 = this.get$_filtered();
    if (index !== (index | 0))
      throw $.iae(index);
    if (index < 0 || index >= t1.length)
      throw $.ioore(index);
    return t1[index];
  },
  get$iterator: function(_) {
    return $.CONSTANT0.get$iterator(this.get$_filtered());
  },
  indexOf$2: function(_, element, start) {
    return $.CONSTANT0.indexOf$2(this.get$_filtered(), element, start);
  },
  indexOf$1: function($receiver, element) {
    return this.indexOf$2($receiver, element, 0);
  },
  skip$1: function(_, n) {
    return $.IterableMixinWorkaround_skipList(this, n);
  },
  get$last: function(_) {
    return $.CONSTANT0.get$last(this.get$_filtered());
  },
  $isList: function() {
    return true;
  },
  $asList: function() {
    return function () { return [null]; };
  },
  $isCollection: function() {
    return true;
  },
  $asCollection: function() {
    return function () { return [null]; };
  },
  $isIterable: function() {
    return true;
  },
  $asIterable: function() {
    return function () { return [null]; };
  }
};

$$._AttributeClassSet = {"": "CssClassSet;_liblib5$_element",
  readClasses$0: function() {
    var t1, classname, s, trimmed;
    t1 = this._liblib5$_element.get$attributes();
    classname = t1.$index(t1, "class");
    s = $.LinkedHashSet$($.String);
    if (classname == null)
      return s;
    for (t1 = $.CONSTANT0.get$iterator($.split$1$s(classname, " ")); t1.moveNext$0();) {
      trimmed = $.trim$0$s(t1.get$current());
      if ($.CONSTANT1.get$isEmpty(trimmed) !== true)
        s.add$1(s, trimmed);
    }
    return s;
  },
  writeClasses$1: function(s) {
    var t1 = this._liblib5$_element.get$attributes();
    t1.$indexSet(t1, "class", s.join$1(s, " "));
  }
};

$$.WebComponent = {"": "Object;",
  createShadowRoot$0: function() {
    if ($.useShadowDom === true && $.ShadowRoot_supported() === true)
      return this._element.createShadowRoot$0();
    if (this._shadowRoots == null)
      this._shadowRoots = [];
    $.add$1$a(this._shadowRoots, document.createElement("div"));
    return $.get$last$a(this._shadowRoots);
  },
  created$0: function() {
  },
  inserted$0: function() {
  },
  removed$0: function() {
  },
  composeChildren$0: function() {
    var treeStack, t1, tree, pool, shadowInsertionPoints, shadowInsertionTrees, tree0, point, i;
    if ($.useShadowDom === true && $.ShadowRoot_supported() === true)
      return;
    if ($.get$length$as(this._shadowRoots) === 0)
      throw $.$$throw($.StateError$("Distribution algorithm requires at least one shadow root and can only be run once."));
    treeStack = this._shadowRoots;
    t1 = $.getInterceptor$a(treeStack);
    tree = t1.removeLast$0(treeStack);
    pool = $.List_List$from(this.get$nodes(), true, null);
    shadowInsertionPoints = [];
    shadowInsertionTrees = [];
    for (tree0 = tree; true;) {
      pool = this._distributeNodes$2(tree0, pool);
      point = tree0.query$1("shadow");
      if (point != null)
        if (t1.get$length(treeStack) > 0) {
          tree0 = t1.removeLast$0(treeStack);
          shadowInsertionPoints.push(point);
          shadowInsertionTrees.push(tree0);
        } else {
          $.WebComponent__distribute(point, pool);
          break;
        }
      else
        break;
    }
    for (i = 0; i < shadowInsertionPoints.length; ++i) {
      point = shadowInsertionPoints[i];
      if (i >= shadowInsertionTrees.length)
        throw $.ioore(i);
      $.WebComponent__distribute(point, $.toList$0$a(shadowInsertionTrees[i].get$nodes()));
    }
    $.clear$0$a(this.get$nodes());
    $.addAll$1$a(this.get$nodes(), tree.get$nodes());
  },
  _distributeNodes$2: function(tree, pool) {
    var t1, t2, select, matching, notMatching, t3, t4;
    if (typeof pool !== "object" || pool === null || pool.constructor !== Array || !!pool.fixed$length)
      return this._distributeNodes$2$bailout(1, tree, pool);
    for (t1 = $.get$iterator$a(tree.queryAll$1("content")); t1.moveNext$0() === true;) {
      t2 = t1.get$current();
      if (!$.WebComponent__isActive(t2))
        continue;
      select = $.$$index$as(t2.get$attributes(), "select");
      if (typeof select !== "string")
        return this._distributeNodes$2$bailout(2, 0, pool, select, t1, t2);
      if (select === "")
        select = "*";
      matching = [];
      notMatching = [];
      for (t3 = $.CONSTANT0.get$iterator(pool); t3.moveNext$0();) {
        t4 = t3.get$current();
        ($.WebComponent__matches(t4, select) === true ? matching : notMatching).push(t4);
      }
      if (matching.length === 0) {
        matching = t2.get$nodes();
        if (typeof matching !== "object" || matching === null || matching.constructor !== Array || !!matching.fixed$length)
          return this._distributeNodes$2$bailout(3, 0, 0, 0, t1, t2, matching, notMatching);
      }
      $.WebComponent__distribute(t2, matching);
      pool = notMatching;
    }
    return pool;
  },
  _distributeNodes$2$bailout: function(state0, tree, pool, select, t1, t2, matching, notMatching) {
    switch (state0) {
      case 0:
      case 1:
        state0 = 0;
        t1 = $.get$iterator$a(tree.queryAll$1("content"));
      default:
        var t3, t4;
        L0:
          while (true)
            switch (state0) {
              case 0:
                if (!(t1.moveNext$0() === true))
                  break L0;
              default:
                c$0: {
                  switch (state0) {
                    case 0:
                      t2 = t1.get$current();
                      if (!$.WebComponent__isActive(t2))
                        break c$0;
                      select = $.$$index$as(t2.get$attributes(), "select");
                    case 2:
                      state0 = 0;
                      if (select == null || $.$$eq$o(select, "") === true)
                        select = "*";
                      matching = [];
                      notMatching = [];
                      for (t3 = $.get$iterator$a(pool); t3.moveNext$0() === true;) {
                        t4 = t3.get$current();
                        ($.WebComponent__matches(t4, select) === true ? matching : notMatching).push(t4);
                      }
                    case 3:
                      if (state0 === 3 || state0 === 0 && matching.length === 0)
                        switch (state0) {
                          case 0:
                            matching = t2.get$nodes();
                          case 3:
                            state0 = 0;
                        }
                      $.WebComponent__distribute(t2, matching);
                      pool = notMatching;
                  }
                }
            }
        return pool;
    }
  },
  get$nodes: function() {
    return this._element.get$nodes();
  },
  replaceWith$1: function(otherNode) {
    this._element.replaceWith$1(otherNode);
  },
  remove$0: function(_) {
    return $.remove$0$a(this._element);
  },
  get$remove: function(receiver) {
    return new $.BoundClosure$i0(this, "remove$0", receiver);
  },
  get$nextNode: function() {
    return this._element.get$nextNode();
  },
  set$text: function(v) {
    this._element.set$text(v);
  },
  contains$1: function(_, other) {
    return $.contains$1$as(this._element, other);
  },
  get$contains: function(receiver) {
    return new $.BoundClosure$i1(this, "contains$1", receiver);
  },
  insertBefore$2: function(newChild, refChild) {
    return this._element.insertBefore$2(newChild, refChild);
  },
  get$attributes: function() {
    return this._element.get$attributes();
  },
  get$children: function() {
    return this._element.get$children();
  },
  get$classes: function() {
    return this._element.get$classes();
  },
  clone$1: function(deep) {
    return this._element.clone$1(deep);
  },
  get$parent: function() {
    return this._element.get$parent();
  },
  get$parentNode: function() {
    return this._element.get$parentNode();
  },
  get$id: function() {
    return this._element.get$id();
  },
  set$innerHtml: function(v) {
    this._element.set$innerHtml(v);
  },
  get$tagName: function() {
    return this._element.get$tagName();
  },
  focus$0: function() {
    this._element.focus$0();
  },
  matches$1: function(selectors) {
    return this._element.matches$1(selectors);
  },
  query$1: function(selectors) {
    return this._element.query$1(selectors);
  },
  queryAll$1: function(selectors) {
    return this._element.queryAll$1(selectors);
  },
  get$$$dom_className: function() {
    return this._element.get$$$dom_className();
  },
  set$$$dom_className: function(value) {
    this._element.set$$$dom_className(value);
  },
  get$$$dom_lastElementChild: function() {
    return this._element.get$$$dom_lastElementChild();
  },
  $$dom_getAttribute$1: function($name) {
    return this._element.$$dom_getAttribute$1($name);
  },
  $$dom_removeAttribute$1: function($name) {
    return this._element.$$dom_removeAttribute$1($name);
  },
  get$$$dom_attributes: function() {
    return this._element.get$$$dom_attributes();
  },
  get$$$dom_childNodes: function() {
    return this._element.get$$$dom_childNodes();
  },
  get$$$dom_localName: function() {
    return this._element.get$$$dom_localName();
  },
  get$$$dom_namespaceUri: function() {
    return this._element.get$$$dom_namespaceUri();
  },
  $$dom_addEventListener$3: function(type, listener, useCapture) {
    this._element.$$dom_addEventListener$3(type, listener, useCapture);
  },
  $$dom_appendChild$1: function(newChild) {
    return this._element.$$dom_appendChild$1(newChild);
  },
  $$dom_removeChild$1: function(oldChild) {
    return this._element.$$dom_removeChild$1(oldChild);
  },
  $$dom_removeEventListener$3: function(type, listener, useCapture) {
    this._element.$$dom_removeEventListener$3(type, listener, useCapture);
  },
  $$dom_replaceChild$2: function(newChild, oldChild) {
    return this._element.$$dom_replaceChild$2(newChild, oldChild);
  },
  get$xtag: function() {
    return this._element.get$xtag();
  },
  set$xtag: function(value) {
    this._element.set$xtag(value);
  },
  get$onBlur: function() {
    return this._element.get$onBlur();
  },
  get$onChange: function() {
    return this._element.get$onChange();
  },
  get$onClick: function() {
    return this._element.get$onClick();
  },
  get$onDoubleClick: function() {
    return this._element.get$onDoubleClick();
  },
  get$onKeyUp: function() {
    return this._element.get$onKeyUp();
  },
  get$onSubmit: function() {
    return this._element.get$onSubmit();
  },
  WebComponent$forElement$1: function(element) {
    if (element == null || this._element.get$xtag() != null)
      throw $.$$throw($.ArgumentError$("element must be provided and not have its xtag property set"));
    this._element.set$xtag(this);
  },
  $isElement: function() {
    return true;
  },
  $asElement: function() {
    return null;
  },
  $isNode: function() {
    return true;
  },
  $asNode: function() {
    return null;
  }
};

$$.TemplateItem = {"": "Object;",
  create$0: function() {
  }
};

$$.Listener = {"": "TemplateItem;eventStream,_liblib15$_subscription,listener",
  insert$0: function() {
    this._liblib15$_subscription = this.eventStream.listen$1(this.listener);
  },
  remove$0: function(_) {
    this._liblib15$_subscription.cancel$0();
    this._liblib15$_subscription = null;
  },
  get$remove: function(receiver) {
    return new $.BoundClosure$i0(this, "remove$0", receiver);
  }
};

$$.Binding = {"": "TemplateItem;exp,action,isFinal,stopper",
  exp$0: function() {
    return this.exp.call$0();
  },
  action$1: function(arg0) {
    return this.action.call$1(arg0);
  },
  stopper$0: function() {
    return this.stopper.call$0();
  },
  insert$0: function() {
    if (this.isFinal)
      this.action$1($.ChangeNotification$(null, this.exp$0(), null));
    else if (this.stopper != null)
      throw $.$$throw($.StateError$("binding already attached"));
    else
      this.stopper = $.watchAndInvoke(this.exp, this.action, "generic-binding");
  },
  remove$0: function(_) {
    if (!this.isFinal) {
      this.stopper$0();
      this.stopper = null;
    }
  },
  get$remove: function(receiver) {
    return new $.BoundClosure$i0(this, "remove$0", receiver);
  }
};

$$.ClassAttrBinding = {"": "TemplateItem;elem,exp,isFinal,stopper",
  exp$0: function() {
    return this.exp.call$0();
  },
  stopper$0: function() {
    return this.stopper.call$0();
  },
  insert$0: function() {
    if (this.isFinal)
      $.updateCssClass(this.elem, true, this.exp$0());
    else if (this.stopper != null)
      throw $.$$throw($.StateError$("class binding already attached"));
    else
      this.stopper = $.bindCssClasses(this.elem, this.exp);
  },
  remove$0: function(_) {
    if (!this.isFinal) {
      this.stopper$0();
      this.stopper = null;
    }
  },
  get$remove: function(receiver) {
    return new $.BoundClosure$i0(this, "remove$0", receiver);
  }
};

$$.DomPropertyBinding = {"": "TemplateItem;setter,getter,isUrl>,isFinal,stopper",
  setter$1: function(arg0) {
    return this.setter.call$1(arg0);
  },
  getter$0: function() {
    return this.getter.call$0();
  },
  stopper$0: function() {
    return this.stopper.call$0();
  },
  insert$0: function() {
    if (this.isFinal === true) {
      var t1 = this.getter$0();
      this.setter$1(this.isUrl === true ? $.sanitizeUri(t1) : t1);
    } else if (this.stopper != null)
      throw $.$$throw($.StateError$("data binding already attached."));
    else
      this.stopper = $.watchAndInvoke(this.getter, new $.DomPropertyBinding_insert_anon(this), "dom-property-binding");
  },
  remove$0: function(_) {
    if (this.isFinal !== true) {
      this.stopper$0();
      this.stopper = null;
    }
  },
  get$remove: function(receiver) {
    return new $.BoundClosure$i0(this, "remove$0", receiver);
  }
};

$$.ComponentItem = {"": "TemplateItem;component",
  component$1: function(arg0) {
    return this.component.call$1(arg0);
  },
  create$0: function() {
    var t1 = this.component;
    t1.created_autogenerated$0();
    t1.created$0();
    t1.composeChildren$0();
  },
  insert$0: function() {
    var t1 = this.component;
    t1.inserted$0();
    t1.inserted_autogenerated$0();
  },
  remove$0: function(_) {
    var t1 = this.component;
    t1.removed_autogenerated$0();
    t1.removed$0();
  },
  get$remove: function(receiver) {
    return new $.BoundClosure$i0(this, "remove$0", receiver);
  }
};

$$.Template = {"": "TemplateItem;node>,children>,nodes>",
  listen$2: function(stream, listener) {
    $.CONSTANT0.add$1(this.children, $.Listener$(stream, new $.Template_listen_anon(listener)));
  },
  contentBind$2: function(exp, isFinal) {
    var t1 = {};
    t1.bindNode_0 = document.createTextNode("");
    $.CONSTANT0.add$1(this.children, $.Binding$(new $.Template_contentBind_anon(exp), new $.Template_contentBind_anon0(t1, exp), isFinal));
    return t1.bindNode_0;
  },
  bindClass$3: function(elem, exp, isFinal) {
    $.CONSTANT0.add$1(this.children, $.ClassAttrBinding$(elem, exp, isFinal));
  },
  oneWayBind$4: function(exp, setter, isFinal, isUrl) {
    $.CONSTANT0.add$1(this.children, $.DomPropertyBinding$(exp, setter, isUrl, isFinal));
  },
  oneWayBind$3: function(exp, setter, isFinal) {
    return this.oneWayBind$4(exp, setter, isFinal, false);
  },
  conditional$3: function(template, exp, bodySetup) {
    $.CONSTANT0.add$1(this.children, $.ConditionalTemplate$(template, exp, bodySetup));
  },
  loop$4$isTemplateElement: function(template, exp, iterSetup, isTemplateElement) {
    var t1 = this.children;
    $.CONSTANT0.add$1(t1, isTemplateElement === true ? $.LoopTemplate$(template, exp, iterSetup) : $.LoopTemplateInAttribute$(template, exp, iterSetup));
  },
  loop$3: function(template, exp, iterSetup) {
    return this.loop$4$isTemplateElement(template, exp, iterSetup, true);
  },
  component$1: function(component) {
    $.CONSTANT0.add$1(this.children, $.ComponentItem$(component));
  },
  add$1: function(_, n) {
    return $.CONSTANT0.add$1(this.nodes, n);
  },
  addAll$1: function(_, list) {
    return $.CONSTANT0.addAll$1(this.nodes, list);
  },
  create$0: function() {
    var t1, len, i;
    for (t1 = this.children, len = t1.length, i = 0; i < len; ++i) {
      if (i >= t1.length)
        throw $.ioore(i);
      t1[i].create$0();
    }
  },
  insert$0: function() {
    var t1, len, i;
    for (t1 = this.children, len = t1.length, i = 0; i < len; ++i) {
      if (i >= t1.length)
        throw $.ioore(i);
      t1[i].insert$0();
    }
  },
  remove$0: function(_) {
    var t1, i;
    for (t1 = this.children, i = t1.length - 1; i >= 0; --i) {
      if (i >= t1.length)
        throw $.ioore(i);
      $.remove$0$a(t1[i]);
    }
    $.CONSTANT0.clear$0(t1);
  },
  get$remove: function(receiver) {
    return new $.BoundClosure$i0(this, "remove$0", receiver);
  }
};

$$.PlaceholderTemplate = {"": "Template;",
  stopper$0: function() {
    return this.stopper.call$0();
  },
  create$0: function() {
  },
  insert$0: function() {
    var t1, t2, $parent, reference, len, i;
    $.Template.prototype.create$0.call(this);
    t1 = this.nodes;
    if (t1.length > 0) {
      t2 = this.node;
      $parent = t2.get$parentNode();
      reference = t2.get$nextNode();
      for (len = t1.length, i = 0; i < len; ++i) {
        if (i >= t1.length)
          throw $.ioore(i);
        $parent.insertBefore$2(t1[i], reference);
      }
    }
    $.Template.prototype.insert$0.call(this);
  },
  remove$0: function(_) {
    var t1, i;
    $.Template.prototype.remove$0.call(this, this);
    for (t1 = this.nodes, i = t1.length - 1; i >= 0; --i) {
      if (i >= t1.length)
        throw $.ioore(i);
      $.remove$0$a(t1[i]);
    }
    $.CONSTANT0.clear$0(t1);
  },
  get$remove: function(receiver) {
    return new $.BoundClosure$i0(this, "remove$0", receiver);
  }
};

$$.ConditionalTemplate = {"": "PlaceholderTemplate;isVisible=,bodySetup,exp,stopper,node,children,nodes",
  isVisible$1: function(arg0) {
    return this.isVisible.call$1(arg0);
  },
  bodySetup$1: function(arg0) {
    return this.bodySetup.call$1(arg0);
  },
  insert$0: function() {
    this.stopper = $.watchAndInvoke(this.exp, new $.ConditionalTemplate_insert_anon(this), "conditional-binding");
  },
  remove$0: function(_) {
    $.PlaceholderTemplate.prototype.remove$0.call(this, this);
    this.stopper$0();
    this.stopper = null;
  },
  get$remove: function(receiver) {
    return new $.BoundClosure$i0(this, "remove$0", receiver);
  }
};

$$.LoopTemplate = {"": "PlaceholderTemplate;iterSetup,exp,stopper,node,children,nodes",
  iterSetup$2: function(arg0, arg1) {
    return this.iterSetup.call$2(arg0, arg1);
  },
  insert$0: function() {
    this.stopper = $.watchAndInvoke(this.exp, new $.LoopTemplate_insert_anon(this), "loop-binding");
  },
  remove$0: function(_) {
    $.PlaceholderTemplate.prototype.remove$0.call(this, this);
    this.stopper$0();
    this.stopper = null;
  },
  get$remove: function(receiver) {
    return new $.BoundClosure$i0(this, "remove$0", receiver);
  }
};

$$.LoopTemplateInAttribute = {"": "Template;iterSetup,exp,stopper,node,children,nodes",
  iterSetup$2: function(arg0, arg1) {
    return this.iterSetup.call$2(arg0, arg1);
  },
  stopper$0: function() {
    return this.stopper.call$0();
  },
  create$0: function() {
  },
  insert$0: function() {
    this.stopper = $.watchAndInvoke(this.exp, new $.LoopTemplateInAttribute_insert_anon(this), "loop-attribute-binding");
  },
  remove$0: function(_) {
    $.Template.prototype.remove$0.call(this, this);
    $.clear$0$a(this.node.get$nodes());
    $.CONSTANT0.clear$0(this.nodes);
    this.stopper$0();
    this.stopper = null;
  },
  get$remove: function(receiver) {
    return new $.BoundClosure$i0(this, "remove$0", receiver);
  }
};

$$.Uri = {"": "Object;scheme,userInfo,domain,port,path,query,fragment",
  query$1: function(arg0) {
    return this.query.call$1(arg0);
  },
  get$hasAuthority: function() {
    return $.$$eq$o(this.userInfo, "") !== true || $.$$eq$o(this.domain, "") !== true || $.$$eq$o(this.port, 0) !== true;
  },
  toString$0: function(_) {
    var sb, t1;
    sb = $.StringBuffer$("");
    t1 = this.scheme;
    $.Uri__addIfNonEmpty(sb, t1, t1, ":");
    if (this.get$hasAuthority() || $.$$eq$o(t1, "file") === true) {
      sb.add$1(sb, "//");
      t1 = this.userInfo;
      $.Uri__addIfNonEmpty(sb, t1, t1, "@");
      t1 = this.domain;
      sb.add$1(sb, t1 == null ? "null" : t1);
      t1 = this.port;
      if ($.$$eq$o(t1, 0) !== true) {
        sb.add$1(sb, ":");
        sb.add$1(sb, $.toString$0$abfnosu(t1));
      }
    }
    t1 = this.path;
    sb.add$1(sb, t1 == null ? "null" : t1);
    t1 = this.query;
    $.Uri__addIfNonEmpty(sb, t1, "?", t1);
    t1 = this.fragment;
    $.Uri__addIfNonEmpty(sb, t1, "#", t1);
    return sb.toString$0(sb);
  },
  $eq: function(_, other) {
    if (other == null)
      return false;
    if (!(typeof other === "object" && other !== null && !!other.$isUri))
      return false;
    return $.$$eq$o(this.scheme, other.scheme) === true && $.$$eq$o(this.userInfo, other.userInfo) === true && $.$$eq$o(this.domain, other.domain) === true && $.$$eq$o(this.port, other.port) === true && $.$$eq$o(this.path, other.path) === true && $.$$eq$o(this.query, other.query) === true && $.$$eq$o(this.fragment, other.fragment) === true;
  },
  get$hashCode: function(_) {
    var t1 = new $.Uri_hashCode_combine();
    return t1.call$2(this.scheme, t1.call$2(this.userInfo, t1.call$2(this.domain, t1.call$2(this.port, t1.call$2(this.path, t1.call$2(this.query, t1.call$2(this.fragment, 1)))))));
  },
  $isUri: true
};

$$.TodoApp = {"": "WebComponent;_root,__e4,__e9,__header,__info,__main,__todoapp,__e1,__newTodo,__toggleAll>,__t,__todoList,_element,_shadowRoots",
  created_autogenerated$0: function() {
    this._root = this.createShadowRoot$0();
    this.__t = $.Template$(this._root);
    var t1 = this._root;
    if (typeof t1 === "object" && t1 !== null && t1.$isShadowRoot())
      t1.set$applyAuthorStyles(true);
    $.add$1$a(this._root.get$nodes(), $.get$TodoApp___shadowTemplate().clone$1(true));
    this.__todoapp = this._root.query$1("#todoapp");
    this.__header = this.__todoapp.query$1("#header");
    this.__e1 = this.__header.query$1("#__e-1");
    this.__newTodo = this.__e1.query$1("#new-todo");
    this.__t.listen$2(this.__newTodo.get$onChange(), new $.TodoApp_created_autogenerated_anon(this));
    this.__t.listen$2(this.__e1.get$onSubmit(), new $.TodoApp_created_autogenerated_anon0(this));
    this.__main = this.__todoapp.query$1("#main");
    this.__toggleAll = this.__main.query$1("#toggle-all");
    this.__t.listen$2(this.__toggleAll.get$onChange(), new $.TodoApp_created_autogenerated_anon1(this));
    this.__t.oneWayBind$4(new $.TodoApp_created_autogenerated_anon2(), new $.TodoApp_created_autogenerated_anon3(this), false, false);
    this.__todoList = this.__main.query$1("#todo-list");
    this.__e4 = this.__todoList.query$1("#__e-4");
    this.__t.loop$3(this.__e4, new $.TodoApp_created_autogenerated_anon4(), new $.TodoApp_created_autogenerated_anon5());
    this.__e9 = this.__todoapp.query$1("#__e-9");
    this.__t.conditional$3(this.__e9, new $.TodoApp_created_autogenerated_anon6(), new $.TodoApp_created_autogenerated_anon7());
    this.__info = this._root.query$1("#info");
    this.__t.create$0();
  },
  inserted_autogenerated$0: function() {
    this.__t.insert$0();
  },
  removed_autogenerated$0: function() {
    $.remove$0$a(this.__t);
    this.__info = null;
    this.__e9 = null;
    this.__e4 = null;
    this.__todoList = null;
    this.__toggleAll = null;
    this.__main = null;
    this.__newTodo = null;
    this.__e1 = null;
    this.__header = null;
    this.__todoapp = null;
    this.__t = null;
  },
  composeChildren$0: function() {
    $.WebComponent.prototype.composeChildren$0.call(this);
    var t1 = this._root;
    if (!(typeof t1 === "object" && t1 !== null && t1.$isShadowRoot()))
      this._root = this;
  },
  addTodo$1: function(e) {
    var input;
    e.preventDefault$0();
    input = document.query$1("#new-todo");
    if ($.$$eq$o(input.get$value(), "") === true)
      return;
    $.add$1$a($.get$app().get$todos(), $.Todo$(input.get$value()));
    input.set$value("");
  }
};

$$.TodoRow = {"": "WebComponent;_liblib13$_root,__e11,__e12,__e10>,_liblib13$__t,__label>,__$todo,hashCode>,$$_observers=,$$_changes=,_element,_shadowRoots",
  created_autogenerated$0: function() {
    this._liblib13$_root = this.createShadowRoot$0();
    this._liblib13$__t = $.Template$(this._liblib13$_root);
    var t1 = this._liblib13$_root;
    if (typeof t1 === "object" && t1 !== null && t1.$isShadowRoot())
      t1.set$applyAuthorStyles(true);
    $.add$1$a(this._liblib13$_root.get$nodes(), $.get$TodoRow___shadowTemplate().clone$1(true));
    this.__e12 = this._liblib13$_root.query$1("#__e-12");
    this.__e10 = this.__e12.query$1("#__e-10");
    this._liblib13$__t.listen$2(this.__e10.get$onChange(), new $.TodoRow_created_autogenerated_anon(this));
    this._liblib13$__t.oneWayBind$4(new $.TodoRow_created_autogenerated_anon0(this), new $.TodoRow_created_autogenerated_anon1(this), false, false);
    this.__label = this.__e12.query$1("#label");
    this._liblib13$__t.oneWayBind$4(new $.TodoRow_created_autogenerated_anon2(this), new $.TodoRow_created_autogenerated_anon3(this), false, false);
    this._liblib13$__t.oneWayBind$3(new $.TodoRow_created_autogenerated_anon4(this), new $.TodoRow_created_autogenerated_anon5(this), false);
    this._liblib13$__t.component$1($.EditableLabel$forElement(this.__label));
    this.__e11 = this.__e12.query$1("#__e-11");
    this._liblib13$__t.listen$2(this.__e11.get$onClick(), new $.TodoRow_created_autogenerated_anon6(this));
    this._liblib13$__t.bindClass$3(this.__e12, new $.TodoRow_created_autogenerated_anon7(this), false);
    this._liblib13$__t.bindClass$3(this.__e12, new $.TodoRow_created_autogenerated_anon8(this), false);
    this._liblib13$__t.create$0();
  },
  inserted_autogenerated$0: function() {
    this._liblib13$__t.insert$0();
  },
  removed_autogenerated$0: function() {
    $.remove$0$a(this._liblib13$__t);
    this.__e11 = null;
    this.__label = null;
    this.__e10 = null;
    this.__e12 = null;
    this._liblib13$__t = null;
  },
  composeChildren$0: function() {
    $.WebComponent.prototype.composeChildren$0.call(this);
    var t1 = this._liblib13$_root;
    if (!(typeof t1 === "object" && t1 !== null && t1.$isShadowRoot()))
      this._liblib13$_root = this;
  },
  get$todo: function() {
    if ($.observeReads() === true)
      $.notifyRead(this, 1, "todo");
    return this.__$todo;
  },
  set$todo: function(value) {
    if ($.hasObservers(this))
      $.notifyChange(this, 1, "todo", this.__$todo, value);
    this.__$todo = value;
  },
  get$editing: function() {
    return this._liblib13$_root.query$1("#label").get$xtag().get$editing();
  },
  get$_completedClass: function() {
    return this.get$todo().get$done() === true ? $.$$index$as($.get$TodoRow__css(), ".completed") : "";
  },
  get$_editingClass: function() {
    return this.get$editing() === true ? $.$$index$as($.get$TodoRow__css(), ".editing") : "";
  },
  $isObservable: true
};

$$.EditableLabel = {"": "WebComponent;_liblib14$_root,__e15,__e17,_liblib14$__t,__$editing,__$value,hashCode>,$$_observers=,$$_changes=,_element,_shadowRoots",
  created_autogenerated$0: function() {
    this._liblib14$_root = this.createShadowRoot$0();
    this._liblib14$__t = $.Template$(this._liblib14$_root);
    var t1 = this._liblib14$_root;
    if (typeof t1 === "object" && t1 !== null && t1.$isShadowRoot())
      t1.set$applyAuthorStyles(true);
    $.add$1$a(this._liblib14$_root.get$nodes(), $.get$EditableLabel___shadowTemplate().clone$1(true));
    this.__e15 = this._liblib14$_root.query$1("#__e-15");
    this._liblib14$__t.conditional$3(this.__e15, new $.EditableLabel_created_autogenerated_anon(this), new $.EditableLabel_created_autogenerated_anon0(this));
    this.__e17 = this._liblib14$_root.query$1("#__e-17");
    this._liblib14$__t.conditional$3(this.__e17, new $.EditableLabel_created_autogenerated_anon1(this), new $.EditableLabel_created_autogenerated_anon2(this));
    this._liblib14$__t.create$0();
  },
  inserted_autogenerated$0: function() {
    this._liblib14$__t.insert$0();
  },
  removed_autogenerated$0: function() {
    $.remove$0$a(this._liblib14$__t);
    this.__e17 = null;
    this.__e15 = null;
    this._liblib14$__t = null;
  },
  composeChildren$0: function() {
    $.WebComponent.prototype.composeChildren$0.call(this);
    var t1 = this._liblib14$_root;
    if (!(typeof t1 === "object" && t1 !== null && t1.$isShadowRoot()))
      this._liblib14$_root = this;
  },
  get$editing: function() {
    if ($.observeReads() === true)
      $.notifyRead(this, 1, "editing");
    return this.__$editing;
  },
  set$editing: function(value) {
    if ($.hasObservers(this))
      $.notifyChange(this, 1, "editing", this.__$editing, value);
    this.__$editing = value;
  },
  get$value: function() {
    if ($.observeReads() === true)
      $.notifyRead(this, 1, "value");
    return this.__$value;
  },
  set$value: function(value) {
    if ($.hasObservers(this))
      $.notifyChange(this, 1, "value", this.__$value, value);
    this.__$value = value;
  },
  get$_editBox: function() {
    return this._liblib14$_root.query$1("#edit");
  },
  created$0: function() {
    $.WebComponent.prototype.created$0.call(this);
    this.set$editing(false);
    this.set$value("");
  },
  edit$0: function() {
    this.set$editing(true);
    $.deliverChangesSync();
    this.get$_editBox().focus$0();
    this.get$_editBox().set$value("");
    var t1 = this.get$value();
    this.get$_editBox().set$value(t1);
  },
  update$1: function(e) {
    e.preventDefault$0();
    if (this.get$editing() !== true)
      return;
    this.set$value(this.get$_editBox().get$value());
    this.set$editing(false);
  },
  $isObservable: true
};

$$.ViewModel = {"": "Object;",
  isVisible$1: function(todo) {
    var t1;
    if (todo != null)
      if (!(this.get$showIncomplete() === true && todo.get$done() !== true))
        t1 = this.get$showDone() === true && todo.get$done() === true;
      else
        t1 = true;
    else
      t1 = false;
    return t1;
  },
  get$isVisible: function() {
    return new $.BoundClosure$1(this, "isVisible$1");
  },
  get$showIncomplete: function() {
    return $.$$eq$o($.locationHash(), "#/completed") !== true;
  },
  get$showDone: function() {
    return $.$$eq$o($.locationHash(), "#/active") !== true;
  }
};

$$.AppModel = {"": "Object;__$todos,hashCode>,$$_observers=,$$_changes=",
  get$todos: function() {
    if ($.observeReads() === true)
      $.notifyRead(this, 1, "todos");
    return this.__$todos;
  },
  set$todos: function(value) {
    if ($.hasObservers(this))
      $.notifyChange(this, 1, "todos", this.__$todos, value);
    this.__$todos = value;
  },
  removeTodo$1: function(todo) {
    var index = $.indexOf$1$as(this.get$todos(), todo);
    if ($.$$eq$o(index, -1) !== true)
      $.removeRange$2$a(this.get$todos(), index, 1);
  },
  get$allChecked: function() {
    return $.$$gt$n($.get$length$as(this.get$todos()), 0) === true && $.every$1$a(this.get$todos(), new $.AppModel_allChecked_anon()) === true;
  },
  set$allChecked: function(value) {
    return $.forEach$1$a(this.get$todos(), new $.AppModel_allChecked_anon0(value));
  },
  get$doneCount: function() {
    var t1 = {};
    t1.res_0 = 0;
    $.forEach$1$a(this.get$todos(), new $.AppModel_doneCount_anon(t1));
    return t1.res_0;
  },
  get$remaining: function() {
    return $.$$sub$n($.get$length$as(this.get$todos()), this.get$doneCount());
  },
  clearDone$0: function() {
    this.set$todos($.toObservable($.where$1$a(this.get$todos(), new $.AppModel_clearDone_anon())));
  },
  $isObservable: true
};

$$.Todo = {"": "Object;__$task,__$done,hashCode>,$$_observers=,$$_changes=",
  get$task: function() {
    if ($.observeReads() === true)
      $.notifyRead(this, 1, "task");
    return this.__$task;
  },
  set$task: function(value) {
    if ($.hasObservers(this))
      $.notifyChange(this, 1, "task", this.__$task, value);
    this.__$task = value;
  },
  get$done: function() {
    if ($.observeReads() === true)
      $.notifyRead(this, 1, "done");
    return this.__$done;
  },
  set$done: function(value) {
    if ($.hasObservers(this))
      $.notifyChange(this, 1, "done", this.__$done, value);
    this.__$done = value;
  },
  toString$0: function(_) {
    var t1 = $.S(this.get$task()) + " ";
    return t1 + (this.get$done() === true ? "(done)" : "(not done)");
  },
  $isObservable: true
};

$$.RouterOptions = {"": "WebComponent;_liblib9$_root,_liblib9$__t,_stopWatcher,_element,_shadowRoots",
  created_autogenerated$0: function() {
    this._liblib9$_root = this.createShadowRoot$0();
    this._liblib9$__t = $.Template$(this._liblib9$_root);
    var t1 = this._liblib9$_root;
    if (typeof t1 === "object" && t1 !== null && t1.$isShadowRoot())
      t1.set$applyAuthorStyles(true);
    $.add$1$a(this._liblib9$_root.get$nodes(), $.get$RouterOptions___shadowTemplate().clone$1(true));
    this._liblib9$__t.create$0();
  },
  inserted_autogenerated$0: function() {
    this._liblib9$__t.insert$0();
  },
  removed_autogenerated$0: function() {
    $.remove$0$a(this._liblib9$__t);
    this._liblib9$__t = null;
  },
  composeChildren$0: function() {
    $.WebComponent.prototype.composeChildren$0.call(this);
    var t1 = this._liblib9$_root;
    if (!(typeof t1 === "object" && t1 !== null && t1.$isShadowRoot()))
      this._liblib9$_root = this;
  },
  _stopWatcher$0: function() {
    return this._stopWatcher.call$0();
  },
  inserted$0: function() {
    $.WebComponent.prototype.inserted$0.call(this);
    var anchors = this._element.queryAll$1("a");
    this._stopWatcher = $.watchAndInvoke(new $.RouterOptions_inserted_anon(), new $.RouterOptions_inserted_anon0(anchors), null);
  },
  removed$0: function() {
    this._stopWatcher$0();
    $.WebComponent.prototype.removed$0.call(this);
  }
};

$$.anon = {"": "Closure;",
  call$1: function(message) {
    $.Primitives_printString($.toString$0$abfnosu(message));
    return;
  },
  $isFunction: true
};

$$.Collection_clear_anon = {"": "Closure;",
  call$1: function(e) {
    return true;
  },
  $isFunction: true
};

$$.CssClassSet_clear_anon = {"": "Closure;",
  call$1: function(s) {
    return $.clear$0$a(s);
  },
  $isFunction: true
};

$$.CssClassSet_removeMatching_anon = {"": "Closure;test_0",
  call$1: function(s) {
    return $.removeMatching$1$a(s, this.test_0);
  },
  $isFunction: true
};

$$.CssClassSet_removeAll_anon = {"": "Closure;iterable_0",
  call$1: function(s) {
    return $.removeAll$1$a(s, this.iterable_0);
  },
  $isFunction: true
};

$$.CssClassSet_addAll_anon = {"": "Closure;iterable_0",
  call$1: function(s) {
    return $.addAll$1$a(s, this.iterable_0);
  },
  $isFunction: true
};

$$.CssClassSet_add_anon = {"": "Closure;value_0",
  call$1: function(s) {
    return $.add$1$a(s, this.value_0);
  },
  $isFunction: true
};

$$.FilteredElementList__filtered_anon = {"": "Closure;",
  call$1: function(n) {
    return typeof n === "object" && n !== null && n.$isElement();
  },
  $isFunction: true
};

$$.ConstantMap_values_anon = {"": "Closure;this_0",
  call$1: function(key) {
    return $.$$index$as(this.this_0, key);
  },
  $isFunction: true
};

$$.AppModel_allChecked_anon0 = {"": "Closure;value_0",
  call$1: function(t) {
    t.set$done(this.value_0);
  },
  $isFunction: true
};

$$._cancelAndError_anon = {"": "Closure;subscription_0,future_1",
  call$1: function(error) {
    this.subscription_0.cancel$0();
    this.future_1._setError$1(error);
  },
  $isFunction: true
};

$$.AppModel_clearDone_anon = {"": "Closure;",
  call$1: function(t) {
    return t.get$done() !== true;
  },
  $isFunction: true
};

$$.ConstantMap_forEach_anon = {"": "Closure;this_0,f_1",
  call$1: function(key) {
    return this.f_1.call$2(key, $.$$index$as(this.this_0, key));
  },
  $isFunction: true
};

$$.FilteredElementList_removeRange_anon = {"": "Closure;",
  call$1: function(el) {
    return $.remove$0$a(el);
  },
  $isFunction: true
};

$$.Template_listen_anon = {"": "Closure;listener_0",
  call$1: function(e) {
    this.listener_0.call$1(e);
    $.dispatch();
  },
  $isFunction: true
};

$$.AppModel_allChecked_anon = {"": "Closure;",
  call$1: function(t) {
    return t.get$done();
  },
  $isFunction: true
};

$$._ElementFactoryProvider__getColgroup_anon = {"": "Closure;",
  call$1: function(n) {
    return $.$$eq$o(n.get$tagName(), "COLGROUP");
  },
  $isFunction: true
};

$$.AppModel_doneCount_anon = {"": "Closure;box_0",
  call$1: function(t) {
    var t1;
    if (t.get$done() === true) {
      t1 = this.box_0;
      t1.res_0 = $.$$add$n(t1.res_0, 1);
    }
  },
  $isFunction: true
};

$$._EventLoop__runHelper_next = {"": "Closure;this_0",
  call$0: function() {
    if (!this.this_0.runIteration$0())
      return;
    $.Timer_run(this);
  },
  $isFunction: true
};

$$.setImmediate_anon = {"": "Closure;callback_0,port_1",
  call$2: function(msg, sendPort) {
    this.port_1.close$0();
    this.callback_0.call$0();
  },
  $isFunction: true
};

$$.ObservableMap_ObservableMap$from_anon = {"": "Closure;result_0",
  call$2: function(key, value) {
    $.$$indexSet$a(this.result_0, key, value);
  },
  $isFunction: true
};

$$._waitForPendingPorts_anon = {"": "Closure;callback_0",
  call$1: function(_) {
    return this.callback_0.call$0();
  },
  $isFunction: true
};

$$.HashMap_addAll_anon = {"": "Closure;this_0",
  call$2: function(key, value) {
    var t1, offset;
    t1 = this.this_0;
    offset = t1.get$_hashTable()._put$1(key);
    t1.get$_hashTable()._setValue$2(offset, value);
    t1.get$_hashTable()._checkCapacity$0();
  },
  $isFunction: true
};

$$.Stream_toList_anon = {"": "Closure;result_0",
  call$1: function(data) {
    $.add$1$a(this.result_0, data);
  },
  $isFunction: true
};

$$.Stream_toList_anon0 = {"": "Closure;result_1,future_2",
  call$0: function() {
    this.future_2._liblib6$_setValue$1(this.result_1);
  },
  $isFunction: true
};

$$._ExpressionObserver__observeValue_anon = {"": "Closure;this_0,value_1",
  call$1: function(changes) {
    var t1, t2;
    t1 = this.this_0;
    t2 = this.value_1;
    t1._runCallback$1($.ChangeNotification$(t2, t2, changes));
  },
  $isFunction: true
};

$$.AsyncError_throwDelayed_reportError = {"": "Closure;this_0",
  call$0: function() {
    var t1 = this.this_0;
    $.Primitives_printString("Uncaught Error: " + $.S(t1.get$error()));
    t1 = t1.get$stackTrace();
    if (t1 != null)
      $.Primitives_printString("Stack Trace:\n" + $.S(t1) + "\n");
  },
  $isFunction: true
};

$$.AsyncError_throwDelayed_anon = {"": "Closure;this_1,reportError_2",
  call$0: function() {
    this.reportError_2.call$0();
    throw $.$$throw(this.this_1.get$error());
  },
  $isFunction: true
};

$$.Stream_length_anon = {"": "Closure;box_0",
  call$1: function(_) {
    var t1 = this.box_0;
    t1.count_0 = $.$$add$n(t1.count_0, 1);
  },
  $isFunction: true
};

$$.Stream_length_anon0 = {"": "Closure;box_0,future_1",
  call$0: function() {
    this.future_1._liblib6$_setValue$1(this.box_0.count_0);
  },
  $isFunction: true
};

$$.LinkedHashMap_addAll_anon = {"": "Closure;this_0",
  call$2: function(key, value) {
    var t1, offset;
    t1 = this.this_0;
    offset = t1.get$_hashTable()._put$1(key);
    t1.get$_hashTable()._setValue$2(offset, value);
    t1.get$_hashTable()._checkCapacity$0();
  },
  $isFunction: true
};

$$._FutureImpl__handleValue_anon = {"": "Closure;thenFuture_0,value_1",
  call$0: function() {
    this.thenFuture_0._sendValue$1(this.value_1);
  },
  $isFunction: true
};

$$._PendingSendPortFinder_visitList_anon = {"": "Closure;this_0",
  call$1: function(e) {
    return this.this_0._dispatch$1(e);
  },
  $isFunction: true
};

$$.LoopTemplate_insert_anon = {"": "Closure;this_0",
  call$1: function(e) {
    var t1, t2;
    t1 = this.this_0;
    $.PlaceholderTemplate.prototype.remove$0.call(t1, t1);
    for (t2 = $.get$iterator$a(e.get$newValue()); t2.moveNext$0() === true;)
      t1.iterSetup$2(t2.get$current(), t1);
    $.PlaceholderTemplate.prototype.insert$0.call(t1);
  },
  $isFunction: true
};

$$.Stream_toSet_anon = {"": "Closure;result_0",
  call$1: function(data) {
    $.add$1$a(this.result_0, data);
  },
  $isFunction: true
};

$$.Stream_toSet_anon0 = {"": "Closure;result_1,future_2",
  call$0: function() {
    this.future_2._liblib6$_setValue$1(this.result_1);
  },
  $isFunction: true
};

$$.Stream_isEmpty_anon = {"": "Closure;box_0,future_1",
  call$1: function(_) {
    this.box_0.subscription_0.cancel$0();
    this.future_1._liblib6$_setValue$1(false);
  },
  $isFunction: true
};

$$.Stream_isEmpty_anon0 = {"": "Closure;future_2",
  call$0: function() {
    this.future_2._liblib6$_setValue$1(true);
  },
  $isFunction: true
};

$$.DomPropertyBinding_insert_anon = {"": "Closure;this_0",
  call$1: function(e) {
    var t1, t2;
    t1 = e.get$newValue();
    t2 = this.this_0;
    t2.setter$1(t2.get$isUrl() === true ? $.sanitizeUri(t1) : t1);
    return;
  },
  $isFunction: true
};

$$._FutureImpl__handleError_anon = {"": "Closure;error_0,errorFuture_1",
  call$0: function() {
    this.errorFuture_1._sendError$1(this.error_0);
  },
  $isFunction: true
};

$$.Template_contentBind_anon = {"": "Closure;exp_1",
  call$0: function() {
    return $.S(this.exp_1.call$0());
  },
  $isFunction: true
};

$$.Template_contentBind_anon0 = {"": "Closure;box_0,exp_2",
  call$1: function(e) {
    var t1, t2;
    t1 = this.exp_2.call$0();
    t2 = this.box_0;
    t2.bindNode_0 = $.updateBinding(t1, t2.bindNode_0, e.get$newValue());
  },
  $isFunction: true
};

$$._PendingSendPortFinder_visitMap_anon = {"": "Closure;this_0",
  call$1: function(e) {
    return this.this_0._dispatch$1(e);
  },
  $isFunction: true
};

$$.ConditionalTemplate_insert_anon = {"": "Closure;this_0",
  call$1: function(e) {
    var t1, t2;
    t1 = this.this_0;
    t2 = t1.get$isVisible() === true;
    if (!t2 && e.get$newValue() === true) {
      t1.bodySetup$1(t1);
      $.PlaceholderTemplate.prototype.insert$0.call(t1);
      t1.set$isVisible(true);
    } else if (t2 && e.get$newValue() !== true) {
      $.PlaceholderTemplate.prototype.remove$0.call(t1, t1);
      t1.set$isVisible(false);
    }
  },
  $isFunction: true
};

$$.toObservable_anon = {"": "Closure;",
  call$0: function() {
    return $.SplayTreeMap$(null, null, null);
  },
  $isFunction: true
};

$$.toObservable_anon0 = {"": "Closure;",
  call$0: function() {
    return $.LinkedHashMap$(null, null);
  },
  $isFunction: true
};

$$.Stream_last_anon = {"": "Closure;box_0",
  call$1: function(value) {
    var t1 = this.box_0;
    t1.foundResult_1 = true;
    t1.result_0 = value;
  },
  $isFunction: true
};

$$.Stream_last_anon0 = {"": "Closure;box_0,future_1",
  call$0: function() {
    var t1 = this.box_0;
    if (t1.foundResult_1 === true) {
      this.future_1._liblib6$_setValue$1(t1.result_0);
      return;
    }
    this.future_1._setError$1($.AsyncError$($.StateError$("No elements"), null));
  },
  $isFunction: true
};

$$.LoopTemplateInAttribute_insert_anon = {"": "Closure;this_0",
  call$1: function(e) {
    var t1, t2;
    t1 = this.this_0;
    $.Template.prototype.remove$0.call(t1, t1);
    $.clear$0$a(t1.get$node().get$nodes());
    $.clear$0$a(t1.get$nodes());
    for (t2 = $.get$iterator$a(e.get$newValue()); t2.moveNext$0() === true;)
      t1.iterSetup$2(t2.get$current(), t1);
    $.Template.prototype.create$0.call(t1);
    $.addAll$1$a(t1.get$node().get$nodes(), t1.get$nodes());
    $.Template.prototype.insert$0.call(t1);
  },
  $isFunction: true
};

$$.observe_anon = {"": "Closure;callback_0,obs_1",
  call$1: function(changes) {
    var t1, t2;
    t1 = this.callback_0;
    t2 = this.obs_1;
    t1.call$1($.ChangeNotification$(t2, t2, changes));
  },
  $isFunction: true
};

$$.ObservableMap_clear_anon = {"": "Closure;this_0",
  call$2: function(key, value) {
    $.notifyChange(this.this_0, 10, key, value, null);
  },
  $isFunction: true
};

$$.invokeClosure_anon = {"": "Closure;closure_0",
  call$0: function() {
    return this.closure_0.call$0();
  },
  $isFunction: true
};

$$.invokeClosure_anon0 = {"": "Closure;closure_1,arg1_2",
  call$0: function() {
    return this.closure_1.call$1(this.arg1_2);
  },
  $isFunction: true
};

$$.invokeClosure_anon1 = {"": "Closure;closure_3,arg1_4,arg2_5",
  call$0: function() {
    return this.closure_3.call$2(this.arg1_4, this.arg2_5);
  },
  $isFunction: true
};

$$.Stream_every_anon = {"": "Closure;box_0,test_1,future_2",
  call$1: function(element) {
    var t1, t2, t3;
    t1 = new $.Stream_every__anon(this.test_1, element);
    t2 = this.box_0;
    t3 = this.future_2;
    $._runUserCode(t1, new $.Stream_every__anon0(t2, t3), $._cancelAndError(t2.subscription_0, t3), null);
  },
  $isFunction: true
};

$$.Stream_every__anon = {"": "Closure;test_3,element_4",
  call$0: function() {
    return this.test_3.call$1(this.element_4);
  },
  $isFunction: true
};

$$.Stream_every__anon0 = {"": "Closure;box_0,future_5",
  call$1: function(isMatch) {
    if (isMatch !== true) {
      this.box_0.subscription_0.cancel$0();
      this.future_5._liblib6$_setValue$1(false);
    }
  },
  $isFunction: true
};

$$.Stream_every_anon0 = {"": "Closure;future_6",
  call$0: function() {
    this.future_6._liblib6$_setValue$1(true);
  },
  $isFunction: true
};

$$._BaseSendPort_call_anon = {"": "Closure;completer_0,port_1",
  call$2: function(value, ignoreReplyTo) {
    var t1;
    this.port_1.close$0();
    t1 = this.completer_0;
    if (typeof value === "object" && value !== null && !!value.$isException)
      t1.completeError$1(value);
    else
      t1.complete$1(value);
  },
  $isFunction: true
};

$$.Uri_hashCode_combine = {"": "Closure;",
  call$2: function(part, current) {
    return $.$$and$n($.$$add$n($.$$mul$n(current, 31), $.get$hashCode$abnosu(part)), 1073741823);
  },
  $isFunction: true
};

$$._ExpressionObserver__addRead_anon = {"": "Closure;",
  call$0: function() {
    return $.HashMap$(null, null);
  },
  $isFunction: true
};

$$.Stream_contains_anon = {"": "Closure;box_0,match_1,future_2",
  call$1: function(element) {
    var t1, t2, t3;
    t1 = new $.Stream_contains__anon(this.match_1, element);
    t2 = this.box_0;
    t3 = this.future_2;
    $._runUserCode(t1, new $.Stream_contains__anon0(t2, t3), $._cancelAndError(t2.subscription_0, t3), null);
  },
  $isFunction: true
};

$$.Stream_contains__anon = {"": "Closure;match_3,element_4",
  call$0: function() {
    return $.$$eq$o(this.element_4, this.match_3);
  },
  $isFunction: true
};

$$.Stream_contains__anon0 = {"": "Closure;box_0,future_5",
  call$1: function(isMatch) {
    if (isMatch === true) {
      this.box_0.subscription_0.cancel$0();
      this.future_5._liblib6$_setValue$1(true);
    }
  },
  $isFunction: true
};

$$.Stream_contains_anon0 = {"": "Closure;future_6",
  call$0: function() {
    this.future_6._liblib6$_setValue$1(false);
  },
  $isFunction: true
};

$$.RouterOptions_inserted_anon = {"": "Closure;",
  call$0: function() {
    return $.locationHash();
  },
  $isFunction: true
};

$$.RouterOptions_inserted_anon0 = {"": "Closure;anchors_0",
  call$1: function(e) {
    var hash, t1, t2;
    hash = e.get$newValue();
    if (typeof hash !== "string")
      return this.call$1$bailout(1, hash);
    if (hash === "")
      hash = "#/";
    for (t1 = $.get$iterator$a(this.anchors_0); t1.moveNext$0() === true;) {
      t2 = t1.get$current();
      $.updateCssClass(t2, $.$$eq$o(t2.get$hash(), hash), "selected");
    }
  },
  call$1$bailout: function(state0, hash) {
    var t1, t2;
    if ($.$$eq$o(hash, "") === true)
      hash = "#/";
    for (t1 = $.get$iterator$a(this.anchors_0); t1.moveNext$0() === true;) {
      t2 = t1.get$current();
      $.updateCssClass(t2, $.$$eq$o(t2.get$hash(), hash), "selected");
    }
  },
  $isFunction: true
};

$$._FutureImpl__scheduleUnhandledError_anon = {"": "Closure;this_0",
  call$0: function() {
    var t1, error;
    t1 = this.this_0;
    if (t1.get$_hasUnhandledError() === true) {
      t1.set$_state($.$$and$n(t1.get$_state(), 4294967291));
      error = t1.get$_resultOrListeners();
      $.Primitives_printString("Uncaught Error: " + $.S(error.get$error()));
      t1 = error.get$stackTrace();
      if (t1 != null)
        $.Primitives_printString("Stack Trace:\n" + $.S(t1) + "\n");
      throw $.$$throw(error.get$error());
    }
  },
  $isFunction: true
};

$$._Copier_visitMap_anon = {"": "Closure;box_0,this_1",
  call$2: function(key, val) {
    var t1, t2;
    t1 = this.box_0.copy_0;
    t2 = this.this_1;
    $.$$indexSet$a(t1, t2._dispatch$1(key), t2._dispatch$1(val));
  },
  $isFunction: true
};

$$.bindCssClasses_anon = {"": "Closure;elem_0",
  call$1: function(e) {
    var t1, t2;
    t1 = e.get$changes();
    if (t1 != null)
      for (t1 = $.get$iterator$a(t1), t2 = this.elem_0; t1.moveNext$0() === true;)
        $.changeCssClasses(t2, t1.get$current());
    else {
      t1 = this.elem_0;
      $.updateCssClass(t1, false, e.get$oldValue());
      $.updateCssClass(t1, true, e.get$newValue());
    }
  },
  $isFunction: true
};

$$._WorkerSendPort_send_anon = {"": "Closure;this_0,message_1,replyTo_2",
  call$0: function() {
    var t1, t2, workerMessage, manager;
    t1 = this.this_0;
    t2 = this.replyTo_2;
    t1._checkReplyTo$1(t2);
    workerMessage = $._serializeMessage($.makeLiteralMap(["command", "message", "port", t1, "msg", this.message_1, "replyTo", t2]));
    if ($globalState.isWorker === true)
      $globalState.mainManager.postMessage$1(workerMessage);
    else {
      manager = $.$$index$as($globalState.managers, t1.get$_workerId());
      if (manager != null)
        manager.postMessage$1(workerMessage);
    }
  },
  $isFunction: true
};

$$.ToString__emitMap_anon = {"": "Closure;box_0,result_1,visiting_2",
  call$2: function(k, v) {
    var t1, t2;
    t1 = this.box_0;
    if (t1.first_0 !== true)
      $.add$1$a(this.result_1, ", ");
    t1.first_0 = false;
    t1 = this.result_1;
    t2 = this.visiting_2;
    $.ToString__emitObject(k, t1, t2);
    $.add$1$a(t1, ": ");
    $.ToString__emitObject(v, t1, t2);
  },
  $isFunction: true
};

$$.Stream_elementAt_anon = {"": "Closure;box_0,future_1",
  call$1: function(value) {
    var t1 = this.box_0;
    if ($.$$eq$o(t1.index_0, 0) === true) {
      this.future_1._liblib6$_setValue$1(value);
      t1.subscription_1.cancel$0();
      return;
    }
    t1.index_0 = $.$$sub$n(t1.index_0, 1);
  },
  $isFunction: true
};

$$.Stream_elementAt_anon0 = {"": "Closure;future_2",
  call$0: function() {
    this.future_2._setError$1($.AsyncError$($.StateError$("Not enough elements for elementAt"), null));
  },
  $isFunction: true
};

$$._ExpressionObserver__watchForChange_anon = {"": "Closure;this_0,reads_1",
  call$1: function(changes) {
    var t1, t2, t3, t4, t5, mask;
    t1 = this.this_0;
    if (t1.get$_scheduled() === true)
      return;
    t2 = $.get$iterator$a(changes);
    t3 = this.reads_1;
    if (typeof t3 !== "string" && (typeof t3 !== "object" || t3 === null || t3.constructor !== Array && !t3.$isJavaScriptIndexingBehavior()))
      return this.call$1$bailout(1, t1, t3, t2);
    for (; t2.moveNext$0() === true;) {
      t4 = t2.get$current();
      t5 = t4.get$key();
      if (t5 !== (t5 | 0))
        throw $.iae(t5);
      if (t5 < 0 || t5 >= t3.length)
        throw $.ioore(t5);
      mask = t3[t5];
      if (mask != null && $.$$and$n(mask, t4.get$type()) !== 0) {
        t1.set$_scheduled(true);
        if ($._changedExpressions == null)
          $._changedExpressions = $.SplayTreeMap$(null, null, null);
        $.$$indexSet$a($._changedExpressions, t1.get$_id(), t1);
        return;
      }
    }
  },
  call$1$bailout: function(state0, t1, t3, t2) {
    var t5, t4, mask;
    t5 = $.getInterceptor$as(t3);
    for (; t2.moveNext$0() === true;) {
      t4 = t2.get$current();
      mask = t5.$index(t3, t4.get$key());
      if (mask != null && $.$$and$n(mask, t4.get$type()) !== 0) {
        t1.set$_scheduled(true);
        if ($._changedExpressions == null)
          $._changedExpressions = $.SplayTreeMap$(null, null, null);
        $.$$indexSet$a($._changedExpressions, t1.get$_id(), t1);
        return;
      }
    }
  },
  $isFunction: true
};

$$.Timer_run_anon = {"": "Closure;",
  call$0: function() {
    var runCallbacks, i, callback, newCallbacks, exception;
    runCallbacks = $.get$Timer__runCallbacks();
    $.Timer__runCallbacks = [];
    for (i = 0; $.$$lt$n(i, $.get$length$as(runCallbacks)) === true; i = $.$$add$n(i, 1)) {
      callback = $.$$index$as(runCallbacks, i);
      try {
        callback.call$0();
      } catch (exception) {
        $.unwrapException(exception);
        newCallbacks = $.get$Timer__runCallbacks();
        $.Timer__runCallbacks = [];
        $.addAll$1$a($.get$Timer__runCallbacks(), $.skip$1$a(runCallbacks, $.$$add$n(i, 1)));
        $.addAll$1$a($.get$Timer__runCallbacks(), newCallbacks);
        throw exception;
      }

    }
  },
  $isFunction: true
};

$$.internalCallback = {"": "Closure;this_0,callback_1",
  call$0: function() {
    this.callback_1.call$0();
    this.this_0.set$_handle(null);
    var t1 = $globalState.topEventLoop;
    t1.set$activeTimerCount($.$$sub$n(t1.get$activeTimerCount(), 1));
  },
  $isFunction: true
};

$$.Duration_toString_sixDigits = {"": "Closure;",
  call$1: function(n) {
    var t1 = $.getInterceptor$n(n);
    if (t1.$ge(n, 100000) === true)
      return $.S(n);
    if (t1.$ge(n, 10000) === true)
      return "0" + $.S(n);
    if (t1.$ge(n, 1000) === true)
      return "00" + $.S(n);
    if (t1.$ge(n, 100) === true)
      return "000" + $.S(n);
    if (t1.$gt(n, 10) === true)
      return "0000" + $.S(n);
    return "00000" + $.S(n);
  },
  $isFunction: true
};

$$.Duration_toString_twoDigits = {"": "Closure;",
  call$1: function(n) {
    if ($.$$ge$n(n, 10) === true)
      return $.S(n);
    return "0" + $.S(n);
  },
  $isFunction: true
};

$$._FutureImpl__FutureImpl$wait_handleError = {"": "Closure;box_0",
  call$1: function(error) {
    var t1 = this.box_0;
    if (t1.values_1 != null) {
      t1.values_1 = null;
      t1.completer_0.completeError$2(error.get$error(), error.get$stackTrace());
    }
  },
  $isFunction: true
};

$$._FutureImpl__FutureImpl$wait_anon = {"": "Closure;box_0,pos_1",
  call$1: function(value) {
    var t1, t2;
    t1 = this.box_0;
    t2 = t1.values_1;
    if (t2 == null)
      return;
    $.$$indexSet$a(t2, this.pos_1, value);
    t1.remaining_2 = $.$$sub$n(t1.remaining_2, 1);
    if ($.$$eq$o(t1.remaining_2, 0) === true)
      t1.completer_0.complete$1(t1.values_1);
  },
  $isFunction: true
};

$$.deliverChangesSync_anon = {"": "Closure;",
  call$2: function(id, obs) {
    obs._deliver$0();
  },
  $isFunction: true
};

$$._NativeJsSendPort_send_anon = {"": "Closure;this_1,message_2,replyTo_3",
  call$0: function() {
    var t1, t2, t3, isolate, shouldSerialize, msg;
    t1 = {};
    t2 = this.this_1;
    t3 = this.replyTo_3;
    t2._checkReplyTo$1(t3);
    isolate = $.$$index$as($globalState.isolates, t2.get$_isolateId());
    if (isolate == null)
      return;
    if (t2.get$_receivePort().get$_liblib8$_callback() == null)
      return;
    shouldSerialize = $globalState.currentContext != null && $.$$eq$o($globalState.currentContext.get$id(), t2.get$_isolateId()) !== true;
    msg = this.message_2;
    t1.msg_0 = msg;
    t1.reply_1 = t3;
    if (shouldSerialize) {
      t1.msg_0 = $._serializeMessage(t1.msg_0);
      t1.reply_1 = $._serializeMessage(t1.reply_1);
    }
    $globalState.topEventLoop.enqueue$3(isolate, new $._NativeJsSendPort_send__anon(t1, t2, shouldSerialize), "receive " + $.S(msg));
  },
  $isFunction: true
};

$$._NativeJsSendPort_send__anon = {"": "Closure;box_0,this_4,shouldSerialize_5",
  call$0: function() {
    var t1, t2;
    t1 = this.this_4;
    if (t1.get$_receivePort().get$_liblib8$_callback() != null) {
      if (this.shouldSerialize_5 === true) {
        t2 = this.box_0;
        t2.msg_0 = $._deserializeMessage(t2.msg_0);
        t2.reply_1 = $._deserializeMessage(t2.reply_1);
      }
      t1 = t1.get$_receivePort();
      t2 = this.box_0;
      t1._liblib8$_callback$2(t2.msg_0, t2.reply_1);
    }
  },
  $isFunction: true
};

$$.updateCssClass_anon = {"": "Closure;",
  call$1: function(e) {
    return e != null && $.$$eq$o(e, "") !== true;
  },
  $isFunction: true
};

$$.updateCssClass_anon0 = {"": "Closure;",
  call$1: function(e) {
    return e != null && $.$$eq$o(e, "") !== true;
  },
  $isFunction: true
};

$$.watch_anon = {"": "Closure;",
  call$0: function() {
  },
  $isFunction: true
};

$$.watch_anon0 = {"": "Closure;target_0",
  call$0: function() {
    return $.toList$0$a(this.target_0.call$0());
  },
  $isFunction: true
};

$$.watch_anon1 = {"": "Closure;target_1",
  call$0: function() {
    return this.target_1;
  },
  $isFunction: true
};

$$.watch_anon2 = {"": "Closure;target_2",
  call$0: function() {
    return $.toList$0$a(this.target_2);
  },
  $isFunction: true
};

$$.IsolateNatives__processWorkerMessage_function = {"": "Closure;entryPoint_0,replyTo_1",
  call$0: function() {
    $.IsolateNatives__startIsolate(this.entryPoint_0, this.replyTo_1);
  },
  $isFunction: true
};

$$.TodoRow_created_autogenerated_anon = {"": "Closure;this_0",
  call$1: function($$event) {
    var t1, t2;
    t1 = this.this_0;
    t2 = t1.get$__e10().get$checked();
    t1.get$todo().set$done(t2);
  },
  $isFunction: true
};

$$.TodoRow_created_autogenerated_anon0 = {"": "Closure;this_1",
  call$0: function() {
    return this.this_1.get$todo().get$done();
  },
  $isFunction: true
};

$$.TodoRow_created_autogenerated_anon1 = {"": "Closure;this_2",
  call$1: function(e) {
    this.this_2.get$__e10().set$checked(e);
  },
  $isFunction: true
};

$$.TodoRow_created_autogenerated_anon2 = {"": "Closure;this_3",
  call$0: function() {
    return this.this_3.get$todo().get$task();
  },
  $isFunction: true
};

$$.TodoRow_created_autogenerated_anon3 = {"": "Closure;this_4",
  call$1: function(e) {
    this.this_4.get$__label().get$xtag().set$value(e);
  },
  $isFunction: true
};

$$.TodoRow_created_autogenerated_anon4 = {"": "Closure;this_5",
  call$0: function() {
    return this.this_5.get$__label().get$xtag().get$value();
  },
  $isFunction: true
};

$$.TodoRow_created_autogenerated_anon5 = {"": "Closure;this_6",
  call$1: function(__e) {
    this.this_6.get$todo().set$task(__e);
  },
  $isFunction: true
};

$$.TodoRow_created_autogenerated_anon6 = {"": "Closure;this_7",
  call$1: function($$event) {
    $.get$app().removeTodo$1(this.this_7.get$todo());
  },
  $isFunction: true
};

$$.TodoRow_created_autogenerated_anon7 = {"": "Closure;this_8",
  call$0: function() {
    return this.this_8.get$_editingClass();
  },
  $isFunction: true
};

$$.TodoRow_created_autogenerated_anon8 = {"": "Closure;this_9",
  call$0: function() {
    return this.this_9.get$_completedClass();
  },
  $isFunction: true
};

$$.NoSuchMethodError_toString_anon = {"": "Closure;box_0",
  call$2: function(key, value) {
    var t1 = this.box_0;
    if ($.$$gt$n(t1.i_1, 0) === true)
      $.add$1$a(t1.sb_0, ", ");
    $.add$1$a(t1.sb_0, key);
    $.add$1$a(t1.sb_0, ": ");
    $.add$1$a(t1.sb_0, $.Error_safeToString(value));
    t1.i_1 = $.$$add$n(t1.i_1, 1);
  },
  $isFunction: true
};

$$.EditableLabel_created_autogenerated_anon = {"": "Closure;this_0",
  call$0: function() {
    return this.this_0.get$editing() !== true;
  },
  $isFunction: true
};

$$.EditableLabel_created_autogenerated_anon0 = {"": "Closure;this_1",
  call$1: function(__t) {
    var __e14, t1, __binding13;
    __e14 = $.get$EditableLabel___html1().clone$1(true);
    t1 = this.this_1;
    __binding13 = __t.contentBind$2(new $.EditableLabel_created_autogenerated__anon3(t1), false);
    $.add$1$a(__e14.get$nodes(), __binding13);
    __t.listen$2(__e14.get$onDoubleClick(), new $.EditableLabel_created_autogenerated__anon4(t1));
    $.addAll$1$a(__t, [document.createTextNode("\n      "), __e14, document.createTextNode("\n    ")]);
  },
  $isFunction: true
};

$$.EditableLabel_created_autogenerated__anon3 = {"": "Closure;this_2",
  call$0: function() {
    return this.this_2.get$value();
  },
  $isFunction: true
};

$$.EditableLabel_created_autogenerated__anon4 = {"": "Closure;this_3",
  call$1: function($$event) {
    this.this_3.edit$0();
  },
  $isFunction: true
};

$$.EditableLabel_created_autogenerated_anon1 = {"": "Closure;this_4",
  call$0: function() {
    return this.this_4.get$editing();
  },
  $isFunction: true
};

$$.EditableLabel_created_autogenerated_anon2 = {"": "Closure;this_5",
  call$1: function(__t) {
    var __e16, __edit, t1, t2;
    __e16 = $.get$EditableLabel___html2().clone$1(true);
    __edit = __e16.query$1("#edit");
    t1 = __edit.get$onBlur();
    t2 = this.this_5;
    __t.listen$2(t1, new $.EditableLabel_created_autogenerated__anon(t2));
    __t.listen$2(__edit.get$onKeyUp(), new $.EditableLabel_created_autogenerated__anon0(t2));
    __t.bindClass$3(__edit, new $.EditableLabel_created_autogenerated__anon1(t2), false);
    __t.listen$2(__e16.get$onSubmit(), new $.EditableLabel_created_autogenerated__anon2(t2));
    $.addAll$1$a(__t, [document.createTextNode("\n      "), __e16, document.createTextNode("\n    ")]);
  },
  $isFunction: true
};

$$.EditableLabel_created_autogenerated__anon = {"": "Closure;this_6",
  call$1: function($$event) {
    this.this_6.update$1($$event);
  },
  $isFunction: true
};

$$.EditableLabel_created_autogenerated__anon0 = {"": "Closure;this_7",
  call$1: function($$event) {
    if ($.$$eq$o($$event.get$keyCode(), 27) === true)
      this.this_7.set$editing(false);
  },
  $isFunction: true
};

$$.EditableLabel_created_autogenerated__anon1 = {"": "Closure;this_8",
  call$0: function() {
    return this.this_8.get$editing() === true ? "editing" : "";
  },
  $isFunction: true
};

$$.EditableLabel_created_autogenerated__anon2 = {"": "Closure;this_9",
  call$1: function($$event) {
    this.this_9.update$1($$event);
  },
  $isFunction: true
};

$$.TodoApp_created_autogenerated_anon = {"": "Closure;this_1",
  call$1: function($$event) {
    this.this_1.addTodo$1($$event);
  },
  $isFunction: true
};

$$.TodoApp_created_autogenerated_anon0 = {"": "Closure;this_2",
  call$1: function($$event) {
    this.this_2.addTodo$1($$event);
  },
  $isFunction: true
};

$$.TodoApp_created_autogenerated_anon1 = {"": "Closure;this_3",
  call$1: function($$event) {
    var t1 = this.this_3.get$__toggleAll().get$checked();
    $.get$app().set$allChecked(t1);
  },
  $isFunction: true
};

$$.TodoApp_created_autogenerated_anon2 = {"": "Closure;",
  call$0: function() {
    return $.get$app().get$allChecked();
  },
  $isFunction: true
};

$$.TodoApp_created_autogenerated_anon3 = {"": "Closure;this_4",
  call$1: function(e) {
    this.this_4.get$__toggleAll().set$checked(e);
  },
  $isFunction: true
};

$$.TodoApp_created_autogenerated_anon4 = {"": "Closure;",
  call$0: function() {
    return $.get$app().get$todos();
  },
  $isFunction: true
};

$$.TodoApp_created_autogenerated_anon5 = {"": "Closure;",
  call$2: function(x, __t) {
    var __e3 = $.get$TodoApp___html1().clone$1(true);
    __t.conditional$3(__e3, new $.TodoApp_created_autogenerated__anon2(x), new $.TodoApp_created_autogenerated__anon3(x));
    $.addAll$1$a(__t, [document.createTextNode("\n          "), __e3, document.createTextNode("\n        ")]);
  },
  $isFunction: true
};

$$.TodoApp_created_autogenerated__anon2 = {"": "Closure;x_5",
  call$0: function() {
    return $.get$viewModel().isVisible$1(this.x_5);
  },
  $isFunction: true
};

$$.TodoApp_created_autogenerated__anon3 = {"": "Closure;x_6",
  call$1: function(__t) {
    var t1 = {};
    t1.__e2_0 = null;
    t1.__e2_0 = $.get$TodoApp___html2().clone$1(true);
    __t.oneWayBind$4(new $.TodoApp_created_autogenerated___anon1(this.x_6), new $.TodoApp_created_autogenerated___anon2(t1), false, false);
    __t.component$1($.TodoRow$forElement(t1.__e2_0));
    $.addAll$1$a(__t, [document.createTextNode("\n            "), t1.__e2_0, document.createTextNode("\n          ")]);
  },
  $isFunction: true
};

$$.TodoApp_created_autogenerated___anon1 = {"": "Closure;x_7",
  call$0: function() {
    return this.x_7;
  },
  $isFunction: true
};

$$.TodoApp_created_autogenerated___anon2 = {"": "Closure;box_0",
  call$1: function(e) {
    this.box_0.__e2_0.get$xtag().set$todo(e);
  },
  $isFunction: true
};

$$.TodoApp_created_autogenerated_anon6 = {"": "Closure;",
  call$0: function() {
    return $.$$gt$n($.get$length$as($.get$app().get$todos()), 0);
  },
  $isFunction: true
};

$$.TodoApp_created_autogenerated_anon7 = {"": "Closure;",
  call$1: function(__t) {
    var __footer, __e6, __binding5;
    __footer = $.get$TodoApp___html3().clone$1(true);
    __e6 = __footer.query$1("#todo-count").query$1("#__e-6");
    __binding5 = __t.contentBind$2(new $.TodoApp_created_autogenerated__anon(), false);
    $.add$1$a(__e6.get$nodes(), __binding5);
    __t.component$1($.RouterOptions$forElement(__footer.query$1("#filters")));
    __t.conditional$3(__footer.query$1("#__e-8"), new $.TodoApp_created_autogenerated__anon0(), new $.TodoApp_created_autogenerated__anon1());
    $.addAll$1$a(__t, [document.createTextNode("\n      "), __footer, document.createTextNode("\n    ")]);
  },
  $isFunction: true
};

$$.TodoApp_created_autogenerated__anon = {"": "Closure;",
  call$0: function() {
    return $.get$app().get$remaining();
  },
  $isFunction: true
};

$$.TodoApp_created_autogenerated__anon0 = {"": "Closure;",
  call$0: function() {
    return $.get$app().get$doneCount() > 0;
  },
  $isFunction: true
};

$$.TodoApp_created_autogenerated__anon1 = {"": "Closure;",
  call$1: function(__t) {
    var __clearCompleted, __binding7;
    __clearCompleted = $.get$TodoApp___html4().clone$1(true);
    __binding7 = __t.contentBind$2(new $.TodoApp_created_autogenerated___anon(), false);
    $.addAll$1$a(__clearCompleted.get$nodes(), [document.createTextNode("\n            Clear completed ("), __binding7, document.createTextNode(")\n          ")]);
    __t.listen$2(__clearCompleted.get$onClick(), new $.TodoApp_created_autogenerated___anon0());
    $.addAll$1$a(__t, [document.createTextNode("\n          "), __clearCompleted, document.createTextNode("\n        ")]);
  },
  $isFunction: true
};

$$.TodoApp_created_autogenerated___anon = {"": "Closure;",
  call$0: function() {
    return $.get$app().get$doneCount();
  },
  $isFunction: true
};

$$.TodoApp_created_autogenerated___anon0 = {"": "Closure;",
  call$1: function($$event) {
    $.get$app().clearDone$0();
  },
  $isFunction: true
};

$$.BoundClosure$i1 = {"": "Closure;self,target,receiver",
  call$1: function(p0) {
    return this.self[this.target](this.receiver, p0);
  }
};

$$.BoundClosure$i0 = {"": "Closure;self,target,receiver",
  call$0: function() {
    return this.self[this.target](this.receiver);
  }
};

$$.Bound_contains_JSString = {"": "Closure;self,target,receiver",
  call$2: function(p0, p1) {
    return this.self[this.target](this.receiver, p0, p1);
  },
  call$1: function(other) {
    return this.call$2(other, 0);
  }
};

$$.BoundClosure$1 = {"": "Closure;self,target",
  call$1: function(p0) {
    return this.self[this.target](p0);
  }
};

$$.BoundClosure$0 = {"": "Closure;self,target",
  call$0: function() {
    return this.self[this.target]();
  }
};

$$.BoundClosure$2 = {"": "Closure;self,target",
  call$2: function(p0, p1) {
    return this.self[this.target](p0, p1);
  }
};

Isolate.$finishClasses($$, $, null);
$$ = null;

$.Arrays_copy0 = function(src, srcStart, dst, dstStart, count) {
  var i, j, t1, t2, t3;
  if (typeof src !== "object" || src === null || src.constructor !== Array && !src.$isJavaScriptIndexingBehavior())
    return $.Arrays_copy0$bailout(1, src, srcStart, dst, dstStart, count);
  if (typeof dst !== "object" || dst === null || (dst.constructor !== Array || !!dst.immutable$list) && !dst.$isJavaScriptIndexingBehavior())
    return $.Arrays_copy0$bailout(1, src, srcStart, dst, dstStart, count);
  if (srcStart < dstStart)
    for (i = srcStart + count - 1, j = dstStart + count - 1, t1 = src.length, t2 = dst.length; i >= srcStart; --i, --j) {
      if (i < 0 || i >= t1)
        throw $.ioore(i);
      t3 = src[i];
      if (j < 0 || j >= t2)
        throw $.ioore(j);
      dst[j] = t3;
    }
  else
    for (t1 = src.length, t2 = dst.length, j = dstStart, i = srcStart; i < srcStart + count; ++i, ++j) {
      if (i < 0 || i >= t1)
        throw $.ioore(i);
      t3 = src[i];
      if (j < 0 || j >= t2)
        throw $.ioore(j);
      dst[j] = t3;
    }
};

$.Arrays_copy0$bailout = function(state0, src, srcStart, dst, dstStart, count) {
  var i, j, t1, t2;
  if (srcStart < dstStart)
    for (i = srcStart + count - 1, j = dstStart + count - 1, t1 = $.getInterceptor$as(src), t2 = $.getInterceptor$a(dst); i >= srcStart; --i, --j)
      t2.$indexSet(dst, j, t1.$index(src, i));
  else
    for (t1 = $.getInterceptor$as(src), t2 = $.getInterceptor$a(dst), j = dstStart, i = srcStart; i < srcStart + count; ++i, ++j)
      t2.$indexSet(dst, j, t1.$index(src, i));
};

$.Arrays_indexOf = function(a, element, startIndex, endIndex) {
  var i;
  if (typeof a !== "string" && (typeof a !== "object" || a === null || a.constructor !== Array && !a.$isJavaScriptIndexingBehavior()))
    return $.Arrays_indexOf$bailout(1, a, element, startIndex, endIndex);
  if (typeof startIndex !== "number")
    return $.Arrays_indexOf$bailout(1, a, element, startIndex, endIndex);
  if (typeof endIndex !== "number")
    return $.Arrays_indexOf$bailout(1, a, element, startIndex, endIndex);
  if (startIndex >= a.length)
    return -1;
  if (startIndex < 0)
    startIndex = 0;
  for (i = startIndex; i < endIndex; ++i) {
    if (i !== (i | 0))
      throw $.iae(i);
    if (i < 0 || i >= a.length)
      throw $.ioore(i);
    if ($.$$eq$o(a[i], element) === true)
      return i;
  }
  return -1;
};

$.Arrays_indexOf$bailout = function(state0, a, element, startIndex, endIndex) {
  var t1, t2, i;
  t1 = $.getInterceptor$as(a);
  t2 = $.getInterceptor$n(startIndex);
  if (t2.$ge(startIndex, t1.get$length(a)) === true)
    return -1;
  if (t2.$lt(startIndex, 0) === true)
    startIndex = 0;
  for (i = startIndex; t2 = $.getInterceptor$n(i), t2.$lt(i, endIndex) === true; i = t2.$add(i, 1))
    if ($.$$eq$o(t1.$index(a, i), element) === true)
      return i;
  return -1;
};

$.SubListIterable$ = function(_iterable, _start, _endOrLength, E) {
  var t1;
  E;
  t1 = new $.SubListIterable(_iterable, _start, _endOrLength);
  $.setRuntimeTypeInfo(t1, [E]);
  return t1;
};

$.ListIterator$ = function(iterable, E) {
  var t1 = new $.ListIterator(iterable, $.get$length$as(iterable), 0, null);
  $.setRuntimeTypeInfo(t1, [E]);
  return t1;
};

$.MappedIterable$ = function(_iterable, _f, S, T) {
  var t1;
  T;
  t1 = new $.MappedIterable(_iterable, _f);
  $.setRuntimeTypeInfo(t1, [S, T]);
  return t1;
};

$.MappedIterator$ = function(_iterator, _f, S, T) {
  var t1;
  T;
  t1 = new $.MappedIterator(null, _iterator, _f);
  $.setRuntimeTypeInfo(t1, [S, T]);
  return t1;
};

$.MappedListIterable$ = function(_source, _f, S, T) {
  var t1;
  T;
  t1 = new $.MappedListIterable(_source, _f);
  $.setRuntimeTypeInfo(t1, [S, T]);
  return t1;
};

$.WhereIterable$ = function(_iterable, _f, E) {
  var t1;
  E;
  t1 = new $.WhereIterable(_iterable, _f);
  $.setRuntimeTypeInfo(t1, [E]);
  return t1;
};

$.WhereIterator$ = function(_iterator, _f, E) {
  var t1;
  E;
  t1 = new $.WhereIterator(_iterator, _f);
  $.setRuntimeTypeInfo(t1, [E]);
  return t1;
};

$.SkipIterable$ = function(_iterable, _skipCount, E) {
  var t1;
  E;
  t1 = new $.SkipIterable(_iterable, _skipCount);
  $.setRuntimeTypeInfo(t1, [E]);
  t1.SkipIterable$2(_iterable, _skipCount, E);
  return t1;
};

$.SkipIterator$ = function(_iterator, _skipCount, E) {
  var t1;
  E;
  t1 = new $.SkipIterator(_iterator, _skipCount);
  $.setRuntimeTypeInfo(t1, [E]);
  t1.SkipIterator$2(_iterator, _skipCount, E);
  return t1;
};

$.ToString_collectionToString = function(c) {
  var result = $.StringBuffer$("");
  $.ToString__emitCollection(c, result, $.List_List($, null));
  return result.toString$0(result);
};

$.ToString__emitCollection = function(c, result, visiting) {
  var t1, isList, t2, t3, first, t4;
  t1 = $.getInterceptor$a(visiting);
  t1.add$1(visiting, c);
  isList = typeof c === "object" && c !== null && (c.constructor === Array || c.$isList());
  t2 = isList ? "[" : "{";
  t3 = $.getInterceptor$a(result);
  t3.add$1(result, t2);
  for (t2 = $.get$iterator$a(c), first = true; t2.moveNext$0() === true; first = false) {
    t4 = t2.get$current();
    if (!first)
      t3.add$1(result, ", ");
    $.ToString__emitObject(t4, result, visiting);
  }
  t3.add$1(result, isList ? "]" : "}");
  t1.removeLast$0(visiting);
};

$.ToString__emitObject = function(o, result, visiting) {
  if (typeof o === "object" && o !== null && (o.constructor === Array || o.$isCollection()))
    if ($.ToString__containsRef(visiting, o))
      $.add$1$a(result, typeof o === "object" && o !== null && (o.constructor === Array || o.$isList()) ? "[...]" : "{...}");
    else
      $.ToString__emitCollection(o, result, visiting);
  else if (typeof o === "object" && o !== null && !!o.$isMap)
    if ($.ToString__containsRef(visiting, o))
      $.add$1$a(result, "{...}");
    else
      $.ToString__emitMap(o, result, visiting);
  else
    $.add$1$a(result, o);
};

$.ToString__containsRef = function(c, ref) {
  var t1, t2;
  for (t1 = $.get$iterator$a(c); t1.moveNext$0() === true;) {
    t2 = t1.get$current();
    if (t2 == null ? ref == null : t2 === ref)
      return true;
  }
  return false;
};

$.ToString_mapToString = function(m) {
  var result = $.StringBuffer$("");
  $.ToString__emitMap(m, result, $.List_List($, null));
  return result.toString$0(result);
};

$.ToString__emitMap = function(m, result, visiting) {
  var t1, t2, t3;
  t1 = {};
  t2 = $.getInterceptor$a(visiting);
  t2.add$1(visiting, m);
  t3 = $.getInterceptor$a(result);
  t3.add$1(result, "{");
  t1.first_0 = true;
  $.forEach$1$a(m, new $.ToString__emitMap_anon(t1, result, visiting));
  t3.add$1(result, "}");
  t2.removeLast$0(visiting);
};

$._ConstantMapKeyIterable$ = function(_map) {
  $.String;
  return new $._ConstantMapKeyIterable(_map);
};

$._callInIsolate = function(isolate, $function) {
  isolate.eval$1($function);
  $globalState.topEventLoop.run$0();
};

$._currentIsolate = function() {
  return $globalState.currentContext;
};

$.startRootIsolate = function(entry) {
  var t1, rootContext;
  t1 = $._Manager$();
  $._globalState0(t1);
  if ($globalState.isWorker === true)
    return;
  rootContext = $._IsolateContext$();
  $globalState.rootContext = rootContext;
  $globalState.currentContext = rootContext;
  rootContext.eval$1(entry);
  $globalState.topEventLoop.run$0();
};

$._globalState = function() {
  return $globalState;
};

$._globalState0 = function(val) {
  $globalState = val;
};

$._Manager$ = function() {
  var t1 = new $._Manager(0, 0, 1, null, null, null, null, null, null, null, null, null);
  t1._Manager$0();
  return t1;
};

$._IsolateContext$ = function() {
  var t1 = new $._IsolateContext(null, null, null);
  t1._IsolateContext$0();
  return t1;
};

$._EventLoop$ = function() {
  return new $._EventLoop($.Queue_Queue($._IsolateEvent), 0);
};

$._IsolateEvent$ = function(isolate, fn, message) {
  return new $._IsolateEvent(isolate, fn, message);
};

$._MainManagerStub$ = function() {
  return new $._MainManagerStub();
};

$.IsolateNatives_computeThisScript = function() {
  var currentScript, stack, matches;
  currentScript = $.$currentScript;
  if (currentScript != null)
    return String(currentScript.src);
  stack = new Error().stack;
  if (stack == null)
    stack = (function() {try { throw new Error() } catch(e) { return e.stack }})();
  matches = stack.match(new RegExp("^ *at [^(]*\\((.*):[0-9]*:[0-9]*\\)$", "m"));
  if (matches != null)
    return matches[1];
  matches = stack.match(new RegExp("^[^@]*@(.*):[0-9]*$", "m"));
  if (matches != null)
    return matches[1];
  throw $.$$throw($.UnsupportedError$("Cannot extract URI from \"" + $.S(stack) + "\""));
};

$.IsolateNatives_computeGlobalThis = function() {
  return function() { return this; }();
};

$.IsolateNatives__processWorkerMessage = function(sender, e) {
  var msg, t1, t2, entryPoint, replyTo, context;
  msg = $._deserializeMessage(e.data);
  t1 = $.getInterceptor$as(msg);
  switch (t1.$index(msg, "command")) {
    case "start":
      t2 = t1.$index(msg, "id");
      $globalState.currentManagerId = t2;
      entryPoint = $[t1.$index(msg, "functionName")];
      replyTo = $._deserializeMessage(t1.$index(msg, "replyTo"));
      context = $._IsolateContext$();
      $globalState.topEventLoop.enqueue$3(context, new $.IsolateNatives__processWorkerMessage_function(entryPoint, replyTo), "worker-start");
      $globalState.currentContext = context;
      $globalState.topEventLoop.run$0();
      break;
    case "spawn-worker":
      $.IsolateNatives__spawnWorker(t1.$index(msg, "functionName"), t1.$index(msg, "uri"), t1.$index(msg, "replyPort"));
      break;
    case "message":
      if (t1.$index(msg, "port") != null)
        t1.$index(msg, "port").send$2(t1.$index(msg, "msg"), t1.$index(msg, "replyTo"));
      $globalState.topEventLoop.run$0();
      break;
    case "close":
      $.IsolateNatives__log("Closing Worker");
      $.remove$1$a($globalState.managers, sender.get$id());
      sender.terminate$0();
      $globalState.topEventLoop.run$0();
      break;
    case "log":
      $.IsolateNatives__log(t1.$index(msg, "msg"));
      break;
    case "print":
      if ($globalState.isWorker === true)
        $globalState.mainManager.postMessage$1($._serializeMessage($.makeLiteralMap(["command", "print", "msg", msg])));
      else
        $.Primitives_printString($.toString$0$abfnosu(t1.$index(msg, "msg")));
      break;
    case "error":
      throw $.$$throw(t1.$index(msg, "msg"));
  }
};

$.IsolateNatives__log = function(msg) {
  var trace, exception;
  if ($globalState.isWorker === true)
    $globalState.mainManager.postMessage$1($._serializeMessage($.makeLiteralMap(["command", "log", "msg", msg])));
  else
    try {
      $.get$globalThis().console.log(msg);
    } catch (exception) {
      $.unwrapException(exception);
      trace = $.getTraceFromException(exception);
      throw $.$$throw($._ExceptionImplementation$(trace));
    }

};

$.IsolateNatives__startIsolate = function(topLevel, replyTo) {
  $.lazyPort = $.ReceivePortImpl$();
  replyTo.send$2("spawned", $._Isolate_port().toSendPort$0());
  topLevel.call$0();
};

$.IsolateNatives__spawnWorker = function(functionName, uri, replyPort) {
  var worker, t1, workerId;
  if (functionName == null)
    functionName = "main";
  if (uri == null)
    uri = $.get$IsolateNatives_thisScript();
  worker = new Worker(uri);
  worker.set$onmessage(function(e) { $.IsolateNatives__processWorkerMessage.call$2(worker, e); });
  t1 = $globalState;
  workerId = t1.nextManagerId;
  t1.nextManagerId = workerId + 1;
  worker.set$id(workerId);
  $.$$indexSet$a($globalState.managers, workerId, worker);
  worker.postMessage$1($._serializeMessage($.makeLiteralMap(["command", "start", "id", workerId, "replyTo", $._serializeMessage(replyPort), "functionName", functionName])));
};

$._NativeJsSendPort$ = function(_receivePort, isolateId) {
  return new $._NativeJsSendPort(_receivePort, isolateId);
};

$._WorkerSendPort$ = function(_workerId, isolateId, _receivePortId) {
  return new $._WorkerSendPort(_workerId, _receivePortId, isolateId);
};

$.ReceivePortImpl$ = function() {
  var t1 = $.ReceivePortImpl__nextFreeId;
  $.ReceivePortImpl__nextFreeId = $.$$add$n(t1, 1);
  t1 = new $.ReceivePortImpl(t1, null);
  t1.ReceivePortImpl$0();
  return t1;
};

$._waitForPendingPorts = function(message, callback) {
  var finder = $._PendingSendPortFinder$();
  finder.traverse$1(message);
  $._FutureImpl__FutureImpl$wait(finder.ports, $.List).then$1(new $._waitForPendingPorts_anon(callback));
};

$._PendingSendPortFinder$ = function() {
  var t1 = new $._PendingSendPortFinder([], $._MessageTraverserVisitedMap$());
  t1._PendingSendPortFinder$0();
  return t1;
};

$._serializeMessage = function(message) {
  if ($globalState.get$needSerialization() === true)
    return $._JsSerializer$().traverse$1(message);
  else
    return $._JsCopier$().traverse$1(message);
};

$._deserializeMessage = function(message) {
  if ($globalState.get$needSerialization() === true)
    return $._JsDeserializer$().deserialize$1(message);
  else
    return message;
};

$._JsSerializer$ = function() {
  var t1 = new $._JsSerializer(0, $._MessageTraverserVisitedMap$());
  t1._JsSerializer$0();
  return t1;
};

$._JsCopier$ = function() {
  var t1 = new $._JsCopier($._MessageTraverserVisitedMap$());
  t1._JsCopier$0();
  return t1;
};

$._JsDeserializer$ = function() {
  return new $._JsDeserializer(null);
};

$._JsVisitedMap$ = function() {
  return new $._JsVisitedMap(null);
};

$._MessageTraverserVisitedMap$ = function() {
  return new $._MessageTraverserVisitedMap();
};

$.TimerImpl$ = function(milliseconds, callback) {
  var t1 = new $.TimerImpl(true, false, null);
  t1.TimerImpl$2(milliseconds, callback);
  return t1;
};

$.hasTimer = function() {
  return $.get$globalThis().setTimeout != null;
};

$.checkMutable = function(list, reason) {
  if (!!(list.immutable$list))
    throw $.$$throw($.UnsupportedError$(reason));
};

$.checkGrowable = function(list, reason) {
  if (!!(list.fixed$length))
    throw $.$$throw($.UnsupportedError$(reason));
};

$.S = function(value) {
  var res;
  if (typeof value === "string")
    return value;
  if (typeof value === "number" && value !== 0 || typeof value === "boolean")
    return String(value);
  if (value == null)
    return "null";
  res = $.toString$0$abfnosu(value);
  if (!(typeof res === "string"))
    throw $.$$throw($.ArgumentError$(value));
  return res;
};

$.Primitives_objectHashCode = function(object) {
  var hash = object.$identityHash;
  if (hash == null) {
    hash = $.$$add$n($.Primitives_hashCodeSeed, 1);
    $.Primitives_hashCodeSeed = hash;
    object.$identityHash = hash;
  }
  return hash;
};

$.Primitives_printString = function(string) {
  if (typeof dartPrint == "function") {
    dartPrint(string);
    return;
  }
  if (typeof window == "object") {
    if (typeof console == "object")
      console.log(string);
    return;
  }
  if (typeof print == "function") {
    print(string);
    return;
  }
  throw "Unable to print message: " + String(string);
};

$.Primitives__throwFormatException = function(string) {
  throw $.$$throw($.FormatException$(string));
};

$.Primitives_parseInt = function(source, radix, handleError) {
  var match, t1, maxCharCode, digitsPart, i;
  if (handleError == null)
    handleError = $.Primitives__throwFormatException;
  $.checkString(source);
  match = /^\s*[+-]?((0x[a-f0-9]+)|(\d+)|([a-z0-9]+))\s*$/i.exec(source);
  if (radix == null) {
    t1 = $.getInterceptor(match);
    if (match != null) {
      if (t1.$index(match, 2) != null)
        return parseInt(source, 16);
      if (t1.$index(match, 3) != null)
        return parseInt(source, 10);
      return handleError.call$1(source);
    }
    radix = 10;
  } else {
    if (!(typeof radix === "number" && Math.floor(radix) === radix))
      throw $.$$throw($.ArgumentError$("Radix is not an integer"));
    if (radix < 2 || radix > 36)
      throw $.$$throw($.RangeError$("Radix " + $.S(radix) + " not in range 2..36"));
    t1 = $.getInterceptor(match);
    if (match != null) {
      if (radix === 10 && t1.$index(match, 3) != null)
        return parseInt(source, 10);
      if (radix < 10 || t1.$index(match, 3) == null) {
        maxCharCode = radix <= 10 ? 48 + radix - 1 : 97 + radix - 10 - 1;
        digitsPart = $.toLowerCase$0$s(t1.$index(match, 1));
        for (i = 0; i < digitsPart.length; ++i)
          if ($.CONSTANT1.codeUnitAt$1(digitsPart, i) > maxCharCode)
            return handleError.call$1(source);
      }
    }
    radix = radix;
  }
  if (match == null)
    return handleError.call$1(source);
  return parseInt(source, radix);
};

$.Primitives_objectTypeName = function(object) {
  var $name, decompiled, t1;
  $name = $.constructorNameFallback(object);
  if ($.$$eq$o($name, "Object") === true) {
    decompiled = String(object.constructor).match(/^\s*function\s*(\S*)\s*\(/)[1];
    if (typeof decompiled === "string")
      $name = decompiled;
  }
  t1 = $.getInterceptor$s($name);
  return t1.codeUnitAt$1($name, 0) === 36 ? t1.substring$1($name, 1) : $name;
};

$.Primitives_newFixedList = function($length) {
  var result = new Array($length);
  result.fixed$length = true;
  return result;
};

$.iae = function(argument) {
  throw $.$$throw($.ArgumentError$(argument));
};

$.ioore = function(index) {
  throw $.$$throw($.RangeError$value(index));
};

$.checkNull = function(object) {
  if (object == null)
    throw $.$$throw($.ArgumentError$(null));
  return object;
};

$.checkNum = function(value) {
  if (!(typeof value === "number"))
    throw $.$$throw($.ArgumentError$(value));
  return value;
};

$.checkString = function(value) {
  if (!(typeof value === "string"))
    throw $.$$throw($.ArgumentError$(value));
  return value;
};

$.$$throw = function(ex) {
  var wrapper;
  if (ex == null)
    ex = $.CONSTANT;
  wrapper = $.DartError$(ex);
  if (!!Error.captureStackTrace)
    Error.captureStackTrace(wrapper, $.$$throw);
  else
    wrapper.stack = new Error().stack;
  return wrapper;
};

$.DartError$ = function(dartException) {
  var t1 = new $.DartError();
  t1.DartError$1(dartException);
  return t1;
};

$.DartError_toStringWrapper = function() {
  return $.toString$0$abfnosu(this);
};

$.unwrapException = function(ex) {
  var message, type, $name, t1, ieErrorCode, ieFacilityNumber, t2;
  if ("dartException" in ex)
    return ex.dartException;
  message = ex.message;
  if (ex instanceof TypeError) {
    type = ex.type;
    $name = ex.arguments ? ex.arguments[0] : "";
    if (message.indexOf("JSNull") === -1) {
      t1 = $.getInterceptor(type);
      t1 = t1.$eq(type, "property_not_function") === true || t1.$eq(type, "called_non_callable") === true || t1.$eq(type, "non_object_property_call") === true || t1.$eq(type, "non_object_property_load") === true;
    } else
      t1 = true;
    if (t1)
      return $.NoSuchMethodError$(null, $name, [], $.makeLiteralMap([]), null);
    else if ($.$$eq$o(type, "undefined_method") === true)
      return $.NoSuchMethodError$("", $name, [], $.makeLiteralMap([]), null);
    ieErrorCode = ex.number & 0xffff;
    ieFacilityNumber = ex.number>>16 & 0x1FFF;
    t1 = typeof message === "string";
    if (t1)
      if (message === "null has no properties" || message === "'null' is not an object" || message === "'undefined' is not an object" || $.CONSTANT1.endsWith$1(message, "is null") === true || $.CONSTANT1.endsWith$1(message, "is undefined") === true || $.CONSTANT1.endsWith$1(message, "is null or undefined") === true || $.CONSTANT1.endsWith$1(message, "of undefined") === true || $.CONSTANT1.endsWith$1(message, "of null") === true)
        return $.NoSuchMethodError$(null, "<unknown>", [], $.makeLiteralMap([]), null);
      else {
        if (message.indexOf(" has no method ") === -1)
          if (message.indexOf(" is not a function") === -1)
            t2 = ieErrorCode === 438 && ieFacilityNumber === 10;
          else
            t2 = true;
        else
          t2 = true;
        if (t2)
          return $.NoSuchMethodError$("", "<unknown>", [], $.makeLiteralMap([]), null);
      }
    t1 = t1 ? message : "";
    return $._ExceptionImplementation$(t1);
  }
  if (ex instanceof RangeError) {
    if (typeof message === "string" && message.indexOf("call stack") !== -1)
      return $.StackOverflowError$();
    return $.ArgumentError$(null);
  }
  if (typeof InternalError == "function" && ex instanceof InternalError)
    if (typeof message === "string" && message === "too much recursion")
      return $.StackOverflowError$();
  return ex;
};

$.getTraceFromException = function(exception) {
  return $.StackTrace$(exception.stack);
};

$.StackTrace$ = function(stack) {
  return new $.StackTrace(stack);
};

$.makeLiteralMap = function(keyValuePairs) {
  var iterator, result, key;
  iterator = $.CONSTANT0.get$iterator(keyValuePairs);
  result = $.LinkedHashMap$(null, null);
  for (; iterator.moveNext$0();) {
    key = iterator.get$current();
    iterator.moveNext$0();
    result.$indexSet(result, key, iterator.get$current());
  }
  return result;
};

$.invokeClosure = function(closure, isolate, numberOfArguments, arg1, arg2) {
  var t1 = $.getInterceptor(numberOfArguments);
  if (t1.$eq(numberOfArguments, 0) === true)
    return $._callInIsolate(isolate, new $.invokeClosure_anon(closure));
  else if (t1.$eq(numberOfArguments, 1) === true)
    return $._callInIsolate(isolate, new $.invokeClosure_anon0(closure, arg1));
  else if (t1.$eq(numberOfArguments, 2) === true)
    return $._callInIsolate(isolate, new $.invokeClosure_anon1(closure, arg1, arg2));
  else
    throw $.$$throw($._ExceptionImplementation$("Unsupported number of arguments for wrapped closure"));
};

$.convertDartClosureToJS = function(closure, arity) {
  var $function;
  if (closure == null)
    return;
  $function = closure.$identity;
  if (!!$function)
    return $function;
  $function = (function ($2, $3) { return function($0, $1) { return $3(closure, $2, arity, $0, $1) }})($._currentIsolate(), $.invokeClosure.call$5);
  closure.$identity = $function;
  return $function;
};

$.setRuntimeTypeInfo = function(target, typeInfo) {
  if (target != null)
    target.$builtinTypeInfo = typeInfo;
};

$.getRuntimeTypeInfo = function(target) {
  if (target == null)
    return;
  return target.$builtinTypeInfo;
};

$.getRuntimeTypeArgument = function(target, substitution, index) {
  var $arguments = $.substitute(substitution, $.getRuntimeTypeInfo(target));
  return $arguments == null ? null : $arguments[index];
};

$.propertyTypeCastError = function(value, property) {
  var t1 = $.getInterceptor$as(property);
  throw $.$$throw($.CastErrorImplementation$($.Primitives_objectTypeName(value), t1.substring$2(property, 3, t1.get$length(property))));
};

$.propertyTypeCast = function(value, property) {
  if (value == null || !!value[property])
    return value;
  $.propertyTypeCastError(value, property);
};

$.CastErrorImplementation$ = function(actualType, expectedType) {
  return new $.CastErrorImplementation("CastError: Casting value of type " + $.S(actualType) + " to" + " incompatible type " + expectedType);
};

$.throwCyclicInit = function(staticName) {
  throw $.$$throw($.RuntimeError$("Cyclic initialization for static " + $.S(staticName)));
};

$.TypeImpl$ = function(typeName) {
  return new $.TypeImpl(typeName);
};

$.getRuntimeTypeAsString = function(runtimeType) {
  var t1, className;
  t1 = $.getInterceptor$as(runtimeType);
  className = t1.$index(runtimeType, 0).builtin$cls;
  if ($.$$eq$o(t1.get$length(runtimeType), 1) === true)
    return className;
  return className + "<" + $.S($.joinArguments(runtimeType, 1)) + ">";
};

$.runtimeTypeToString = function(type) {
  var t1 = type == null;
  if (t1)
    return "dynamic";
  else if (!t1 && (type.constructor === Array))
    return $.getRuntimeTypeAsString(type);
  else
    return type.builtin$cls;
};

$.joinArguments = function(types, startIndex) {
  var buffer, index, firstArgument;
  if (typeof types !== "string" && (typeof types !== "object" || types === null || types.constructor !== Array && !types.$isJavaScriptIndexingBehavior()))
    return $.joinArguments$bailout(1, types, startIndex);
  buffer = $.StringBuffer$("");
  for (index = startIndex, firstArgument = true; index < types.length; ++index) {
    if (firstArgument)
      firstArgument = false;
    else
      buffer.add$1(buffer, ", ");
    if (index < 0 || index >= types.length)
      throw $.ioore(index);
    buffer.add$1(buffer, $.runtimeTypeToString(types[index]));
  }
  return buffer.toString$0(buffer);
};

$.joinArguments$bailout = function(state0, types, startIndex) {
  var buffer, t1, index, firstArgument;
  buffer = $.StringBuffer$("");
  for (t1 = $.getInterceptor$as(types), index = startIndex, firstArgument = true; $.CONSTANT2.$lt(index, t1.get$length(types)); ++index) {
    if (firstArgument)
      firstArgument = false;
    else
      buffer.add$1(buffer, ", ");
    buffer.add$1(buffer, $.runtimeTypeToString(t1.$index(types, index)));
  }
  return buffer.toString$0(buffer);
};

$.getRuntimeTypeString = function(object) {
  var className, typeInfo;
  className = object != null && (object.constructor === Array) ? "List" : object.constructor.builtin$cls;
  typeInfo = object.$builtinTypeInfo;
  if (typeInfo == null)
    return className;
  return className + "<" + $.S($.joinArguments(typeInfo, 0)) + ">";
};

$.substitute = function(substitution, $arguments) {
  if (substitution != null && (substitution.constructor === Array))
    $arguments = substitution;
  else if (typeof substitution == "function")
    $arguments = substitution.apply(null, $arguments);
  return $arguments;
};

$.checkArguments = function(substitution, $arguments, checks) {
  return $.areSubtypes($.substitute(substitution, $arguments), checks);
};

$.areSubtypes = function(s, t) {
  var len, i, t1;
  if (typeof s !== "string" && (typeof s !== "object" || s === null || s.constructor !== Array && !s.$isJavaScriptIndexingBehavior()))
    return $.areSubtypes$bailout(1, s, t);
  if (typeof t !== "string" && (typeof t !== "object" || t === null || t.constructor !== Array && !t.$isJavaScriptIndexingBehavior()))
    return $.areSubtypes$bailout(1, s, t);
  if (false)
    return true;
  len = s.length;
  for (i = 0; i < len; ++i) {
    if (i >= s.length)
      throw $.ioore(i);
    t1 = s[i];
    if (i >= t.length)
      throw $.ioore(i);
    if (!$.isSubtype(t1, t[i]))
      return false;
  }
  return true;
};

$.areSubtypes$bailout = function(state0, s, t, len, t1) {
  switch (state0) {
    case 0:
    case 1:
      state0 = 0;
      t1 = $.getInterceptor(s);
      if (s == null || t == null)
        return true;
      len = t1.get$length(s);
    case 2:
      var t2, i;
      state0 = 0;
      for (t2 = $.getInterceptor$as(t), i = 0; $.CONSTANT2.$lt(i, len); ++i)
        if (!$.isSubtype(t1.$index(s, i), t2.$index(t, i)))
          return false;
      return true;
  }
};

$.isSubtype = function(s, t) {
  var t1, typeOfS, t2, typeOfT, substitution, t3;
  if (s == null || t == null)
    return true;
  if (s === t)
    return true;
  t1 = s != null;
  typeOfS = t1 && (s.constructor === Array) ? $.$$index$as(s, 0) : s;
  t2 = t != null;
  typeOfT = t2 && (t.constructor === Array) ? $.$$index$as(t, 0) : t;
  if (typeOfS["$is" + $.runtimeTypeToString(typeOfT)] == null)
    return false;
  substitution = typeOfT !== typeOfS ? typeOfS["$as" + $.runtimeTypeToString(typeOfT)] : null;
  if (!(!(t1 && (s.constructor === Array)) && substitution == null))
    t3 = !(t2 && (t.constructor === Array));
  else
    t3 = true;
  if (t3)
    return true;
  t1 = t1 && (s.constructor === Array) ? s.slice(1) : null;
  return $.checkArguments(substitution, t1, t2 && (t.constructor === Array) ? t.slice(1) : null);
};

$.typeNameInChrome = function(obj) {
  return $.typeNameInWebKitCommon(obj.constructor.name);
};

$.typeNameInSafari = function(obj) {
  return $.typeNameInWebKitCommon($.constructorNameFallback(obj));
};

$.typeNameInWebKitCommon = function(tag) {
  var $name = tag;
  if ($name === "Window")
    return "DOMWindow";
  if ($name === "CanvasPixelArray")
    return "Uint8ClampedArray";
  if ($name === "WebKitMutationObserver")
    return "MutationObserver";
  if ($name === "AudioChannelMerger")
    return "ChannelMergerNode";
  if ($name === "AudioChannelSplitter")
    return "ChannelSplitterNode";
  if ($name === "AudioGainNode")
    return "GainNode";
  if ($name === "AudioPannerNode")
    return "PannerNode";
  if ($name === "JavaScriptAudioNode")
    return "ScriptProcessorNode";
  if ($name === "Oscillator")
    return "OscillatorNode";
  if ($name === "RealtimeAnalyserNode")
    return "AnalyserNode";
  if ($name === "IDBVersionChangeRequest")
    return "IDBOpenDBRequest";
  return $name;
};

$.typeNameInOpera = function(obj) {
  var $name = $.constructorNameFallback(obj);
  if ($name === "Window")
    return "DOMWindow";
  if ($name === "ApplicationCache")
    return "DOMApplicationCache";
  return $name;
};

$.typeNameInFirefox = function(obj) {
  var $name = $.constructorNameFallback(obj);
  if ($name === "Window")
    return "DOMWindow";
  if ($name === "CSS2Properties")
    return "CSSStyleDeclaration";
  if ($name === "DataTransfer")
    return "Clipboard";
  if ($name === "DragEvent")
    return "MouseEvent";
  if ($name === "GeoGeolocation")
    return "Geolocation";
  if ($name === "MouseScrollEvent")
    return "WheelEvent";
  if ($name === "OfflineResourceList")
    return "DOMApplicationCache";
  if ($name === "WorkerMessageEvent")
    return "MessageEvent";
  if ($name === "XMLDocument")
    return "Document";
  return $name;
};

$.typeNameInIE = function(obj) {
  var $name = $.constructorNameFallback(obj);
  if ($name === "Window")
    return "DOMWindow";
  if ($name === "Document") {
    if (!!obj.xmlVersion)
      return "Document";
    return "HTMLDocument";
  }
  if ($name === "ApplicationCache")
    return "DOMApplicationCache";
  if ($name === "CanvasPixelArray")
    return "Uint8ClampedArray";
  if ($name === "DataTransfer")
    return "Clipboard";
  if ($name === "DragEvent")
    return "MouseEvent";
  if ($name === "HTMLDDElement")
    return "HTMLElement";
  if ($name === "HTMLDTElement")
    return "HTMLElement";
  if ($name === "HTMLTableDataCellElement")
    return "HTMLTableCellElement";
  if ($name === "HTMLTableHeaderCellElement")
    return "HTMLTableCellElement";
  if ($name === "HTMLPhraseElement")
    return "HTMLElement";
  if ($name === "MSStyleCSSProperties")
    return "CSSStyleDeclaration";
  if ($name === "MouseWheelEvent")
    return "WheelEvent";
  if ($name === "Position")
    return "Geoposition";
  if ($name === "Object")
    if (window.DataView && (obj instanceof window.DataView))
      return "DataView";
  return $name;
};

$.constructorNameFallback = function(object) {
  var $constructor, $name, t1, string;
  if (object == null)
    return "Null";
  $constructor = object.constructor;
  if (typeof($constructor) === "function") {
    $name = $constructor.name;
    if (typeof $name === "string")
      t1 = $name !== "" && $name !== "Object" && $name !== "Function.prototype";
    else
      t1 = false;
    if (t1)
      return $name;
  }
  string = Object.prototype.toString.call(object);
  return string.substring(8, string.length - 1);
};

$.alternateTag = function(object, tag) {
  if (!!/^HTML[A-Z].*Element$/.test(tag)) {
    if (Object.prototype.toString.call(object) === "[object Object]")
      return;
    return "HTMLElement";
  }
  return;
};

$.callHasOwnProperty = function($function, object, property) {
  return $function.call(object, property);
};

$.getFunctionForTypeNameOf = function() {
  if (typeof(navigator) !== "object")
    return $.typeNameInChrome;
  var userAgent = navigator.userAgent;
  if (userAgent.indexOf("Chrome") !== -1 || userAgent.indexOf("DumpRenderTree") !== -1)
    return $.typeNameInChrome;
  else if (userAgent.indexOf("Firefox") !== -1)
    return $.typeNameInFirefox;
  else if (userAgent.indexOf("MSIE") !== -1)
    return $.typeNameInIE;
  else if (userAgent.indexOf("Opera") !== -1)
    return $.typeNameInOpera;
  else if (userAgent.indexOf("AppleWebKit") !== -1)
    return $.typeNameInSafari;
  else
    return $.constructorNameFallback;
};

$.getTypeNameOf = function(obj) {
  if ($._getTypeNameOf == null)
    $._getTypeNameOf = $.getFunctionForTypeNameOf();
  return $._getTypeNameOf.call$1(obj);
};

$.toStringForNativeObject = function(obj) {
  return "Instance of " + $.getTypeNameOf(obj);
};

$.hashCodeForNativeObject = function(object) {
  return $.Primitives_objectHashCode(object);
};

$.defineProperty = function(obj, property, value) {
  Object.defineProperty(obj, property, {value: value, enumerable: false, writable: true, configurable: true});
};

$.dynamicBind = function(obj, $name, methods, $arguments) {
  var hasOwnPropertyFunction, tag, method, secondTag, proto;
  hasOwnPropertyFunction = Object.prototype.hasOwnProperty;
  if (!$.isDartObject(obj)) {
    tag = $.getTypeNameOf(obj);
    method = $.dynamicBindLookup(hasOwnPropertyFunction, tag, methods);
    if (method == null) {
      secondTag = $.alternateTag(obj, tag);
      if (secondTag != null)
        method = $.dynamicBindLookup(hasOwnPropertyFunction, secondTag, methods);
    }
  } else
    method = null;
  if (method == null)
    method = $.lookupDynamicClass(hasOwnPropertyFunction, methods, $.getTypeNameOf($.CONSTANT15));
  if (method == null)
    (function(){throw new TypeError($name + " is not a function");})();
  else {
    proto = Object.getPrototypeOf(obj);
    if (!$.callHasOwnProperty(hasOwnPropertyFunction, proto, $name))
      $.defineProperty(proto, $name, method);
  }
  return method.apply(obj, $arguments);
};

$.isDartObject = function(obj) {
  return ((obj) instanceof ($.Object));
};

$.dynamicBindLookup = function(hasOwnPropertyFunction, tag, methods) {
  var method, i, entry;
  method = $.lookupDynamicClass(hasOwnPropertyFunction, methods, tag);
  if (method == null && $._dynamicMetadata0() != null)
    for (i = 0; i < $._dynamicMetadata0().length; ++i) {
      entry = $._dynamicMetadata0()[i];
      if ($.callHasOwnProperty(hasOwnPropertyFunction, entry.get$_liblib4$_set(), tag)) {
        method = $.lookupDynamicClass(hasOwnPropertyFunction, methods, entry.get$_tag());
        if (method != null)
          break;
      }
    }
  return method;
};

$.lookupDynamicClass = function(hasOwnPropertyFunction, methods, className) {
  return $.callHasOwnProperty(hasOwnPropertyFunction, methods, className) ? methods[className] : null;
};

$.dynamicFunction = function($name) {
  var f, methods, dartMethod, bind;
  f = Object.prototype[$name];
  if (f != null && !!f.methods)
    return f.methods;
  methods = {};
  dartMethod = Object.getPrototypeOf($.CONSTANT15)[$name];
  if (dartMethod != null)
    methods["Object"] = dartMethod;
  bind = function() {return $.dynamicBind.call$4(this, $name, methods, Array.prototype.slice.call(arguments));};
  bind.methods = methods;
  $.defineProperty(Object.prototype, $name, bind);
  return methods;
};

$.MetaInfo$ = function(_tag, _tags, _set) {
  return new $.MetaInfo(_tag, _tags, _set);
};

$._dynamicMetadata0 = function() {
  if (typeof($dynamicMetadata) === "undefined")
    $._dynamicMetadata([]);
  return $dynamicMetadata;
};

$._dynamicMetadata = function(table) {
  $dynamicMetadata = table;
};

$.buildDynamicMetadata = function(inputTable) {
  var result, i, tag, tags, set, tagNames, j;
  result = [];
  for (i = 0; i < inputTable.length; ++i) {
    tag = inputTable[i][0];
    tags = inputTable[i][1];
    set = {};
    tagNames = tags.split("|");
    for (j = 0; j < tagNames.length; ++j)
      set[tagNames[j]] = true;
    result.push($.MetaInfo$(tag, tags, set));
  }
  return result;
};

$.dynamicSetMetadata = function(inputTable) {
  var t1 = $.buildDynamicMetadata(inputTable);
  $._dynamicMetadata(t1);
};

$.JSSyntaxRegExp$ = function(pattern, caseSensitive, multiLine) {
  return new $.JSSyntaxRegExp(pattern, multiLine, caseSensitive, $.JSSyntaxRegExp_makeNative(pattern, multiLine, caseSensitive, false));
};

$.JSSyntaxRegExp$_globalVersionOf = function(other) {
  var t1, t2, t3;
  t1 = other.get$pattern();
  t2 = other.get$isMultiLine();
  t3 = other.get$isCaseSensitive();
  return new $.JSSyntaxRegExp(t1, t2, t3, $.JSSyntaxRegExp_makeNative(t1, t2, t3, true));
};

$.JSSyntaxRegExp_makeNative = function(pattern, multiLine, caseSensitive, global) {
  var m, i, g, regexp, errorMessage;
  $.checkString(pattern);
  m = multiLine === true ? "m" : "";
  i = caseSensitive === true ? "" : "i";
  g = global ? "g" : "";
  regexp = (function() {try {return new RegExp(pattern, m + i + g);} catch (e) {return e;}})();
  if (regexp instanceof RegExp)
    return regexp;
  errorMessage = String(regexp);
  throw $.$$throw($.FormatException$("Illegal RegExp pattern: " + $.S(pattern) + ", " + errorMessage));
};

$._MatchImplementation$ = function(pattern, str, start, end, _groups) {
  return new $._MatchImplementation(pattern, str, start, end, _groups);
};

$._AllMatchesIterable$ = function(_re, _str) {
  $.Match;
  return new $._AllMatchesIterable(_re, _str);
};

$._AllMatchesIterator$ = function(re, _str) {
  return new $._AllMatchesIterator($.JSSyntaxRegExp$_globalVersionOf(re), _str, null);
};

$.StringMatch$ = function(start, str, pattern) {
  return new $.StringMatch(start, str, pattern);
};

$.allMatchesInStringUnchecked = function(needle, haystack) {
  var result, $length, patternLength, startIndex, position, endIndex;
  result = $.List_List($, $.Match);
  $.setRuntimeTypeInfo(result, [$.Match]);
  $length = haystack.length;
  patternLength = needle.length;
  for (startIndex = 0; true;) {
    position = $.CONSTANT1.indexOf$2(haystack, needle, startIndex);
    if (position === -1)
      break;
    result.push($.StringMatch$(position, haystack, needle));
    endIndex = position + patternLength;
    if (endIndex === $length)
      break;
    else
      startIndex = position === endIndex ? startIndex + 1 : endIndex;
  }
  return result;
};

$.stringContainsUnchecked = function(receiver, other, startIndex) {
  if (typeof other === "string")
    return $.CONSTANT1.indexOf$2(receiver, other, startIndex) !== -1;
  else if (typeof other === "object" && other !== null && !!other.$isJSSyntaxRegExp)
    return other.hasMatch$1($.CONSTANT1.substring$1(receiver, startIndex));
  else
    return $.get$iterator$a($.allMatches$1$s(other, $.CONSTANT1.substring$1(receiver, startIndex))).moveNext$0();
};

$.stringReplaceJS = function(receiver, replacer, to) {
  return receiver.replace(replacer, to.replace("$", "$$$$"));
};

$.stringReplaceAllUnchecked = function(receiver, from, to) {
  var result, $length, i;
  $.checkString(to);
  if (from === "")
    if (receiver === "")
      return to;
    else {
      result = $.StringBuffer$("");
      $length = receiver.length;
      result.add$1(result, to);
      for (i = 0; i < $length; ++i) {
        if (i >= receiver.length)
          throw $.ioore(i);
        result.add$1(result, receiver[i]);
        result.add$1(result, to);
      }
      return result.toString$0(result);
    }
  else
    return $.stringReplaceJS(receiver, new RegExp(from.replace(new RegExp("[-[\\]{}()*+?.,\\\\^$|#\\s]", 'g'), "\\$&"), 'g'), to);
};

$.AsyncError$ = function(error, stackTrace) {
  return new $.AsyncError(error, stackTrace, null);
};

$.AsyncError$withCause = function(error, stackTrace, cause) {
  return new $.AsyncError(error, stackTrace, cause);
};

$._CompleterImpl$ = function(T) {
  var t1 = new $._CompleterImpl($._FutureImpl$(T), false);
  $.setRuntimeTypeInfo(t1, [T]);
  return t1;
};

$._FutureListenerWrapper$ = function(future, T) {
  var t1 = new $._FutureListenerWrapper(future, null);
  $.setRuntimeTypeInfo(t1, [T]);
  return t1;
};

$._FutureImpl$ = function(T) {
  var t1 = new $._FutureImpl(0, null);
  $.setRuntimeTypeInfo(t1, [T]);
  return t1;
};

$._FutureImpl$immediate = function(value, T) {
  var t1 = new $._FutureImpl(0, null);
  $.setRuntimeTypeInfo(t1, [T]);
  t1._FutureImpl$immediate$1(value, T);
  return t1;
};

$._FutureImpl__FutureImpl$wait = function(futures, T) {
  var t1, t2, t3, t4, pos;
  t1 = {};
  t1.completer_0 = null;
  t1.values_1 = null;
  t2 = new $._FutureImpl__FutureImpl$wait_handleError(t1);
  t1.remaining_2 = 0;
  for (t3 = $.get$iterator$a(futures); t3.moveNext$0() === true;) {
    t4 = t3.get$current();
    pos = t1.remaining_2;
    t1.remaining_2 = $.$$add$n(pos, 1);
    t4.catchError$1(t2).then$1(new $._FutureImpl__FutureImpl$wait_anon(t1, pos));
  }
  if ($.$$eq$o(t1.remaining_2, 0) === true)
    return $._FutureImpl$immediate($.CONSTANT10, null);
  t1.values_1 = $.List_List(t1.remaining_2, null);
  t1.completer_0 = $._CompleterImpl$($.List);
  return t1.completer_0.get$future();
};

$._ThenFuture$ = function(_onValue, S, T) {
  var t1;
  S;
  T;
  t1 = new $._ThenFuture(_onValue, null, 0, null);
  $.setRuntimeTypeInfo(t1, [S, T]);
  return t1;
};

$._CatchErrorFuture$ = function(_onError, _test, T) {
  var t1;
  T;
  T;
  t1 = new $._CatchErrorFuture(_test, _onError, null, 0, null);
  $.setRuntimeTypeInfo(t1, [T]);
  return t1;
};

$._SubscribeFuture$ = function(onValue, _onError, S, T) {
  var t1, t2;
  t1 = S;
  t2 = T;
  t1;
  t2;
  t1 = new $._SubscribeFuture(_onError, onValue, null, 0, null);
  $.setRuntimeTypeInfo(t1, [S, T]);
  return t1;
};

$._FutureWrapper$ = function(_future, T) {
  var t1 = new $._FutureWrapper(_future);
  $.setRuntimeTypeInfo(t1, [T]);
  return t1;
};

$._nullDataHandler = function(value) {
};

$._nullErrorHandler = function(error) {
  error.throwDelayed$0();
};

$._nullDoneHandler = function() {
};

$._asyncError = function(error, stackTrace, cause) {
  if (typeof error === "object" && error !== null && !!error.$isAsyncError)
    return error;
  if (cause == null)
    return $.AsyncError$(error, stackTrace);
  return $.AsyncError$withCause(error, stackTrace, cause);
};

$._runUserCode = function(userCode, onSuccess, onError, cause) {
  var result, e, e0, s, exception, t1;
  result = null;
  try {
    result = userCode.call$0();
  } catch (exception) {
    t1 = $.unwrapException(exception);
    if (typeof t1 === "object" && t1 !== null && !!t1.$isAsyncError) {
      e = t1;
      return onError.call$1(e);
    } else {
      e0 = t1;
      s = $.getTraceFromException(exception);
      if (cause == null)
        onError.call$1($.AsyncError$(e0, s));
      else
        onError.call$1($.AsyncError$withCause(e0, s, cause));
    }
  }

  onSuccess.call$1(result);
};

$._cancelAndError = function(subscription, future) {
  return new $._cancelAndError_anon(subscription, future);
};

$._ForwardingStreamSubscription$ = function(_stream, onData, onError, onDone, _unsubscribeOnError, S, T) {
  var t1, t2;
  t1 = T;
  t2 = new $._ForwardingStreamSubscription(_stream, _unsubscribeOnError, null, onData, onError, onDone);
  $.setRuntimeTypeInfo(t2, [S, T]);
  t2._BaseStreamSubscription$3(onData, onError, onDone, t1);
  t2._ForwardingStreamSubscription$5(_stream, onData, onError, onDone, _unsubscribeOnError, S, T);
  return t2;
};

$._WhereStream$ = function(source, test, T) {
  var t1;
  T;
  T;
  t1 = new $._WhereStream(test, source);
  $.setRuntimeTypeInfo(t1, [T]);
  return t1;
};

$._MapStream$ = function(source, transform, S, T) {
  var t1;
  S;
  T;
  t1 = new $._MapStream(transform, source);
  $.setRuntimeTypeInfo(t1, [S, T]);
  return t1;
};

$._SkipStream$ = function(source, count, T) {
  var t1;
  T;
  T;
  t1 = new $._SkipStream(count, source);
  $.setRuntimeTypeInfo(t1, [T]);
  t1._SkipStream$2(source, count, T);
  return t1;
};

$.Timer_Timer = function(duration, callback) {
  var milliseconds = duration.get$inMilliseconds();
  if ($.$$lt$n(milliseconds, 0) === true)
    milliseconds = 0;
  return $.TimerImpl$(milliseconds, callback);
};

$.Timer_run = function(callback) {
  $.add$1$a($.get$Timer__runCallbacks(), callback);
  if ($.$$eq$o($.get$length$as($.get$Timer__runCallbacks()), 1) === true)
    $.Timer_Timer($.CONSTANT8, new $.Timer_run_anon());
};

$.IterableMixinWorkaround_contains = function(iterable, element) {
  var t1, t2;
  for (t1 = $.get$iterator$a(iterable), t2 = $.getInterceptor(element); t1.moveNext$0() === true;)
    if (t2.$eq(element, t1.get$current()) === true)
      return true;
  return false;
};

$.IterableMixinWorkaround_every = function(iterable, f) {
  var t1;
  for (t1 = $.get$iterator$a(iterable); t1.moveNext$0() === true;)
    if (f.call$1(t1.get$current()) !== true)
      return false;
  return true;
};

$.IterableMixinWorkaround_removeAll = function(collection, elementsToRemove) {
  var t1, t2;
  for (t1 = $.get$iterator$a(elementsToRemove), t2 = $.getInterceptor$a(collection); t1.moveNext$0() === true;)
    t2.remove$1(collection, t1.get$current());
};

$.IterableMixinWorkaround_removeAllList = function(collection, elementsToRemove) {
  $.removeMatching$1$a(collection, $.get$contains$as(typeof elementsToRemove === "object" && elementsToRemove !== null && !!elementsToRemove.$isSet ? elementsToRemove : $.toSet$0$a(elementsToRemove)));
};

$.IterableMixinWorkaround_removeMatching = function(collection, test) {
  var elementsToRemove, t1, t2, t3;
  elementsToRemove = [];
  for (t1 = $.getInterceptor$a(collection), t2 = t1.get$iterator(collection); t2.moveNext$0() === true;) {
    t3 = t2.get$current();
    if (test.call$1(t3) === true)
      elementsToRemove.push(t3);
  }
  t1.removeAll$1(collection, elementsToRemove);
};

$.IterableMixinWorkaround_removeMatchingList = function(list, test) {
  var retained, $length, i, element, t1, t2;
  if (typeof list !== "object" || list === null || (list.constructor !== Array || !!list.immutable$list) && !list.$isJavaScriptIndexingBehavior())
    return $.IterableMixinWorkaround_removeMatchingList$bailout(1, list, test);
  retained = [];
  $length = list.length;
  for (i = 0; i < $length; ++i) {
    if (i >= list.length)
      throw $.ioore(i);
    element = list[i];
    if (test.call$1(element) !== true)
      retained.push(element);
    if ($length !== list.length)
      throw $.$$throw($.ConcurrentModificationError$(list));
  }
  t1 = retained.length;
  if (t1 === $length)
    return;
  $.CONSTANT0.set$length(list, t1);
  for (t1 = list.length, i = 0; i < retained.length; ++i) {
    t2 = retained[i];
    if (i >= t1)
      throw $.ioore(i);
    list[i] = t2;
  }
};

$.IterableMixinWorkaround_removeMatchingList$bailout = function(state0, list, test) {
  var retained, $length, i, element, t1;
  retained = [];
  $length = list.length;
  for (i = 0; i < $length; ++i) {
    if (i >= list.length)
      throw $.ioore(i);
    element = list[i];
    if (test.call$1(element) !== true)
      retained.push(element);
    if ($length !== list.length)
      throw $.$$throw($.ConcurrentModificationError$(list));
  }
  t1 = retained.length;
  if (t1 === $length)
    return;
  $.CONSTANT0.set$length(list, t1);
  for (i = 0; i < retained.length; ++i)
    $.CONSTANT0.$indexSet(list, i, retained[i]);
};

$.IterableMixinWorkaround_takeList = function(list, n) {
  return $.SubListIterable$(list, 0, n, null);
};

$.IterableMixinWorkaround_skipList = function(list, n) {
  return $.SubListIterable$(list, n, null, null);
};

$.IterableMixinWorkaround_indexOfList = function(list, element, start) {
  return $.Arrays_indexOf(list, element, start, $.get$length$as(list));
};

$.IterableMixinWorkaround_setRangeList = function(list, start, $length, from, startFrom) {
  var t1;
  if ($.$$eq$o($length, 0) === true)
    return;
  if (!(typeof start === "number" && Math.floor(start) === start))
    throw $.$$throw($.ArgumentError$(start));
  if (!(typeof $length === "number" && Math.floor($length) === $length))
    throw $.$$throw($.ArgumentError$($length));
  if (!(typeof from === "object" && from !== null && (from.constructor === Array || from.$isList())))
    throw $.$$throw($.ArgumentError$(from));
  if (!(typeof startFrom === "number" && Math.floor(startFrom) === startFrom))
    throw $.$$throw($.ArgumentError$(startFrom));
  if ($length < 0)
    throw $.$$throw($.ArgumentError$($length));
  if (start < 0)
    throw $.$$throw($.RangeError$value(start));
  t1 = start + $length;
  if ($.CONSTANT2.$gt(t1, $.get$length$as(list)))
    throw $.$$throw($.RangeError$value(t1));
  $.Arrays_copy0(from, startFrom, list, start, $length);
};

$._HashMapTable$ = function(K, V) {
  var t1, t2;
  t1 = K;
  t2 = new $._HashMapTable(null, 8, 0, 0, 0, null);
  $.setRuntimeTypeInfo(t2, [K, V]);
  t2._HashTable$1(8, t1);
  return t2;
};

$.HashMap$ = function(K, V) {
  var t1 = new $.HashMap($._HashMapTable$(K, V));
  $.setRuntimeTypeInfo(t1, [K, V]);
  t1.HashMap$0(K, V);
  return t1;
};

$.HashSet$ = function(E) {
  var t1 = $._HashTable$(8, null);
  E;
  t1 = new $.HashSet(t1);
  $.setRuntimeTypeInfo(t1, [E]);
  t1.HashSet$0(E);
  return t1;
};

$._HashTable$ = function(initialCapacity, K) {
  var t1 = new $._HashTable(null, initialCapacity, 0, 0, 0, null);
  $.setRuntimeTypeInfo(t1, [K]);
  t1._HashTable$1(initialCapacity, K);
  return t1;
};

$._HashTableKeyIterable$ = function(hashTable, K) {
  var t1;
  K;
  t1 = new $._HashTableKeyIterable(hashTable);
  $.setRuntimeTypeInfo(t1, [K]);
  return t1;
};

$._HashTableKeyIterator$ = function(hashTable, K) {
  var t1;
  K;
  t1 = new $._HashTableKeyIterator(hashTable, hashTable.get$_modificationCount(), 0, null);
  $.setRuntimeTypeInfo(t1, [K]);
  return t1;
};

$._HashTableValueIterable$ = function(hashTable, _entryIndex, V) {
  var t1;
  V;
  t1 = new $._HashTableValueIterable(_entryIndex, hashTable);
  $.setRuntimeTypeInfo(t1, [V]);
  return t1;
};

$._HashTableValueIterator$ = function(hashTable, _entryIndex, V) {
  var t1;
  V;
  t1 = new $._HashTableValueIterator(_entryIndex, hashTable, hashTable.get$_modificationCount(), 0, null);
  $.setRuntimeTypeInfo(t1, [V]);
  return t1;
};

$._LinkedHashMapTable$ = function(K, V) {
  var t1, t2;
  t1 = K;
  t2 = new $._LinkedHashMapTable(null, 8, 0, 0, 0, null);
  $.setRuntimeTypeInfo(t2, [K, V]);
  t2._HashTable$1(8, t1);
  return t2;
};

$.LinkedHashMap$ = function(K, V) {
  var t1 = new $.LinkedHashMap($._LinkedHashMapTable$(K, V));
  $.setRuntimeTypeInfo(t1, [K, V]);
  t1.LinkedHashMap$0(K, V);
  return t1;
};

$.LinkedHashSet$ = function(E) {
  var t1 = $._LinkedHashTable$(8, null);
  E;
  t1 = new $.LinkedHashSet(t1);
  $.setRuntimeTypeInfo(t1, [E]);
  t1.LinkedHashSet$0(E);
  return t1;
};

$._LinkedHashTable$ = function(initialCapacity, K) {
  var t1, t2;
  t1 = K;
  t2 = new $._LinkedHashTable(null, initialCapacity, 0, 0, 0, null);
  $.setRuntimeTypeInfo(t2, [K]);
  t2._HashTable$1(initialCapacity, t1);
  return t2;
};

$._LinkedHashTableKeyIterable$ = function(_table, K) {
  var t1;
  K;
  t1 = new $._LinkedHashTableKeyIterable(_table);
  $.setRuntimeTypeInfo(t1, [K]);
  return t1;
};

$._LinkedHashTableKeyIterator$ = function(hashTable, K) {
  var t1;
  K;
  t1 = new $._LinkedHashTableKeyIterator(hashTable, hashTable.get$_modificationCount(), hashTable._next$1(0), null);
  $.setRuntimeTypeInfo(t1, [K]);
  return t1;
};

$._LinkedHashTableValueIterable$ = function(_hashTable, _valueIndex, V) {
  var t1;
  V;
  t1 = new $._LinkedHashTableValueIterable(_hashTable, _valueIndex);
  $.setRuntimeTypeInfo(t1, [V]);
  return t1;
};

$._LinkedHashTableValueIterator$ = function(hashTable, _valueIndex, V) {
  var t1;
  V;
  t1 = new $._LinkedHashTableValueIterator(_valueIndex, hashTable, hashTable.get$_modificationCount(), hashTable._next$1(0), null);
  $.setRuntimeTypeInfo(t1, [V]);
  return t1;
};

$.Queue_Queue = function(E) {
  return $.ListQueue$(null, E);
};

$.ListQueue$ = function(initialCapacity, E) {
  var t1;
  E;
  t1 = new $.ListQueue(null, 0, 0, 0);
  $.setRuntimeTypeInfo(t1, [E]);
  t1.ListQueue$1(initialCapacity, E);
  return t1;
};

$.ListQueue__isPowerOf2 = function(number) {
  var t1 = $.getInterceptor$n(number);
  return t1.$and(number, t1.$sub(number, 1)) === 0;
};

$.ListQueue__nextPowerOf2 = function(number) {
  var number0, nextNumber;
  number0 = $.$$shl$n(number, 2) - 1;
  for (number = number0; true; number = nextNumber) {
    nextNumber = (number & number - 1) >>> 0;
    if (nextNumber === 0)
      return number;
  }
};

$._ListQueueIterator$ = function(queue, E) {
  var t1 = new $._ListQueueIterator(queue, queue._liblib3$_tail, queue._modificationCount, queue._liblib3$_head, null);
  $.setRuntimeTypeInfo(t1, [E]);
  return t1;
};

$._SplayTreeNode$ = function(key, K) {
  var t1 = new $._SplayTreeNode(key, null, null);
  $.setRuntimeTypeInfo(t1, [K]);
  return t1;
};

$._SplayTreeMapNode$ = function(key, value, K, V) {
  var t1;
  K;
  t1 = new $._SplayTreeMapNode(value, key, null, null);
  $.setRuntimeTypeInfo(t1, [K, V]);
  return t1;
};

$.SplayTreeMap$ = function(compare, K, V) {
  var t1 = compare == null ? $.Comparable_compare : compare;
  t1 = new $.SplayTreeMap(t1, null, $._SplayTreeNode$(null, K), 0, 0, 0);
  $.setRuntimeTypeInfo(t1, [K, V]);
  return t1;
};

$._SplayTreeKeyIterable$ = function(_tree, K) {
  var t1;
  K;
  t1 = new $._SplayTreeKeyIterable(_tree);
  $.setRuntimeTypeInfo(t1, [K]);
  return t1;
};

$._SplayTreeValueIterable$ = function(_map, K, V) {
  var t1;
  V;
  t1 = new $._SplayTreeValueIterable(_map);
  $.setRuntimeTypeInfo(t1, [K, V]);
  return t1;
};

$._SplayTreeKeyIterator$ = function(map, K) {
  var t1, t2;
  t1 = K;
  t2 = new $._SplayTreeKeyIterator(map, [], map.get$_modificationCount(), map.get$_splayCount(), null);
  $.setRuntimeTypeInfo(t2, [K]);
  t2._SplayTreeIterator$1(map, t1);
  return t2;
};

$._SplayTreeValueIterator$ = function(map, K, V) {
  var t1, t2;
  t1 = V;
  t2 = new $._SplayTreeValueIterator(map, [], map.get$_modificationCount(), map.get$_splayCount(), null);
  $.setRuntimeTypeInfo(t2, [K, V]);
  t2._SplayTreeIterator$1(map, t1);
  return t2;
};

$._SplayTreeNodeIterator$ = function(map, K) {
  var t1, t2;
  t1 = [$._SplayTreeNode, K];
  t2 = new $._SplayTreeNodeIterator(map, [], map._modificationCount, map._splayCount, null);
  $.setRuntimeTypeInfo(t2, [K]);
  t2._SplayTreeIterator$1(map, t1);
  return t2;
};

$.Comparable_compare = function(a, b) {
  return $.compareTo$1$ns(a, b);
};

$.Duration$ = function(days, hours, microseconds, milliseconds, minutes, seconds) {
  return new $.Duration($.$$add$n($.$$add$n($.$$add$n($.$$add$n($.$$add$n($.$$mul$n(days, 86400000000), $.$$mul$n(hours, 3600000000)), $.$$mul$n(minutes, 60000000)), $.$$mul$n(seconds, 1000000)), $.$$mul$n(milliseconds, 1000)), microseconds));
};

$.Error_safeToString = function(object) {
  if (typeof object === "number" && Math.floor(object) === object || typeof object === "number" || typeof object === "boolean" || null == object)
    return $.toString$0$abfnosu(object);
  if (typeof object === "string")
    return "\"" + $.S($.replaceAll$2$s($.replaceAll$2$s($.replaceAll$2$s($.CONSTANT1.replaceAll$2(object, "\\", "\\\\"), "\n", "\\n"), "\r", "\\r"), "\"", "\\\"")) + "\"";
  return "Instance of '" + $.S($.Primitives_objectTypeName(object)) + "'";
};

$.ArgumentError$ = function(message) {
  return new $.ArgumentError(message);
};

$.RangeError$ = function(message) {
  return new $.RangeError(message);
};

$.RangeError$value = function(value) {
  return new $.RangeError("value " + $.S(value));
};

$.RangeError$range = function(value, start, end) {
  return new $.RangeError("value " + $.S(value) + " not in range " + $.S(start) + ".." + $.S(end));
};

$.NoSuchMethodError$ = function(_receiver, _memberName, _arguments, _namedArguments, existingArgumentNames) {
  return new $.NoSuchMethodError(_receiver, _memberName, _arguments, _namedArguments, existingArgumentNames);
};

$.UnsupportedError$ = function(message) {
  return new $.UnsupportedError(message);
};

$.UnimplementedError$ = function(message) {
  return new $.UnimplementedError(message);
};

$.StateError$ = function(message) {
  return new $.StateError(message);
};

$.ConcurrentModificationError$ = function(modifiedObject) {
  return new $.ConcurrentModificationError(modifiedObject);
};

$.StackOverflowError$ = function() {
  return new $.StackOverflowError();
};

$.RuntimeError$ = function(message) {
  return new $.RuntimeError(message);
};

$._ExceptionImplementation$ = function(message) {
  return new $._ExceptionImplementation(message);
};

$.FormatException$ = function(message) {
  return new $.FormatException(message);
};

$.IntegerDivisionByZeroException$ = function() {
  return new $.IntegerDivisionByZeroException();
};

$.int_parse = function(source, onError, radix) {
  return $.Primitives_parseInt(source, radix, onError);
};

$.List_List = function($length, E) {
  var t1 = $ === $length;
  if (t1)
    $length = null;
  if (t1)
    return new Array(0);
  if (!(typeof $length === "number" && Math.floor($length) === $length) || $length < 0)
    throw $.$$throw($.ArgumentError$("Length must be a positive integer: " + $.S($length) + "."));
  return $.Primitives_newFixedList($length);
};

$.List_List$fixedLength = function(count, fill, E) {
  var result, t1, i;
  if (typeof count !== "number")
    return $.List_List$fixedLength$bailout(1, count, fill);
  result = $.List_List(count, null);
  if (fill != null)
    for (t1 = result.length, i = 0; i < count; ++i) {
      if (i >= t1)
        throw $.ioore(i);
      result[i] = fill;
    }
  return result;
};

$.List_List$fixedLength$bailout = function(state0, count, fill) {
  var result, i;
  result = $.List_List(count, null);
  if (fill != null)
    for (i = 0; $.CONSTANT2.$lt(i, count); ++i) {
      if (i >= result.length)
        throw $.ioore(i);
      result[i] = fill;
    }
  return result;
};

$.List_List$from = function(other, growable, E) {
  var list, t1, $length, fixedList, t2, i, t3;
  list = $.List_List($, E);
  $.setRuntimeTypeInfo(list, [E]);
  for (t1 = $.get$iterator$a(other); t1.moveNext$0() === true;)
    list.push(t1.get$current());
  if (growable === true)
    return list;
  $length = list.length;
  fixedList = $.List_List($length, E);
  $.setRuntimeTypeInfo(fixedList, [E]);
  for (t1 = list.length, t2 = fixedList.length, i = 0; i < $length; ++i) {
    if (i >= t1)
      throw $.ioore(i);
    t3 = list[i];
    if (i >= t2)
      throw $.ioore(i);
    fixedList[i] = t3;
  }
  return fixedList;
};

$.Map_Map = function(K, V) {
  return $.HashMap$(K, V);
};

$.RegExp_RegExp = function(pattern, caseSensitive, multiLine) {
  return $.JSSyntaxRegExp$(pattern, caseSensitive, multiLine);
};

$.StringBuffer$ = function($content) {
  var t1 = new $.StringBuffer("");
  t1.StringBuffer$1($content);
  return t1;
};

$.window = function() {
  return window;
};

$.document = function() {
  return document;
};

$.DocumentFragment_DocumentFragment$html = function(html) {
  return $._DocumentFragmentFactoryProvider_createDocumentFragment_html(html);
};

$._ChildrenElementList$_wrap = function(element) {
  return new $._ChildrenElementList(element, element.get$$$dom_children());
};

$._FrozenElementList$_wrap = function(_nodeList) {
  return new $._FrozenElementList(_nodeList);
};

$._FrozenElementListIterator$ = function(_list) {
  return new $._FrozenElementListIterator(_list, -1, null);
};

$._ElementCssClassSet$ = function(_element) {
  return new $._ElementCssClassSet(_element);
};

$.Element_Element$html = function(html) {
  return $._ElementFactoryProvider_createElement_html(html);
};

$.Element_Element$tag = function(tag) {
  return $._ElementFactoryProvider_createElement_tag(tag);
};

$._ElementFactoryProvider_createElement_html = function(html) {
  var match, tag, parentTag, temp, element, t1;
  match = $.get$_START_TAG_REGEXP().firstMatch$1(html);
  if (match != null) {
    tag = $.toLowerCase$0$s(match.group$1(1));
    if ($._Device_isOpera() !== true && $.contains$2$as($._Device_userAgent(), "MSIE", 0) === true && $.CONSTANT12.containsKey$1(tag))
      return $._ElementFactoryProvider__createTableForIE(html, tag);
    parentTag = $.CONSTANT13.$index($.CONSTANT13, tag);
    if (parentTag == null)
      parentTag = "div";
  } else {
    parentTag = "div";
    tag = null;
  }
  temp = $._ElementFactoryProvider_createElement_tag(parentTag);
  temp.set$innerHtml(html);
  if ($.$$eq$o($.get$length$as(temp.get$children()), 1) === true)
    element = $.$$index$as(temp.get$children(), 0);
  else if ($.$$eq$o(parentTag, "html") === true && $.$$eq$o($.get$length$as(temp.get$children()), 2) === true) {
    t1 = temp.get$children();
    element = $.$$index$as(t1, tag === "head" ? 0 : 1);
  } else {
    $._ElementFactoryProvider__singleNode(temp.get$children());
    element = null;
  }
  $.remove$0$a(element);
  return element;
};

$._ElementFactoryProvider__createTableForIE = function(html, tag) {
  var div, table, element;
  div = $._ElementFactoryProvider_createElement_tag("div");
  div.set$innerHtml("<table>" + $.S(html) + "</table>");
  table = $._ElementFactoryProvider__singleNode(div.get$children());
  element = null;
  switch (tag) {
    case "td":
    case "th":
      element = $._ElementFactoryProvider__singleNode($._ElementFactoryProvider__singleNode(table.get$rows()).get$cells());
      break;
    case "tr":
      element = $._ElementFactoryProvider__singleNode(table.get$rows());
      break;
    case "tbody":
      element = $._ElementFactoryProvider__singleNode(table.get$tBodies());
      break;
    case "thead":
      element = table.get$tHead();
      break;
    case "tfoot":
      element = table.get$tFoot();
      break;
    case "caption":
      element = table.get$caption();
      break;
    case "colgroup":
      element = $._ElementFactoryProvider__getColgroup(table);
      break;
    case "col":
      element = $._ElementFactoryProvider__singleNode($._ElementFactoryProvider__getColgroup(table).get$children());
      break;
  }
  $.remove$0$a(element);
  return element;
};

$._ElementFactoryProvider__getColgroup = function(table) {
  return $._ElementFactoryProvider__singleNode($.toList$0$a($.where$1$a(table.get$children(), new $._ElementFactoryProvider__getColgroup_anon())));
};

$._ElementFactoryProvider__singleNode = function(list) {
  var t1 = $.getInterceptor$as(list);
  if ($.$$eq$o(t1.get$length(list), 1) === true)
    return t1.$index(list, 0);
  throw $.$$throw($.ArgumentError$("HTML had " + $.S(t1.get$length(list)) + " " + "top level elements but 1 expected"));
};

$._ElementFactoryProvider_createElement_tag = function(tag) {
  return document.createElement(tag);
};

$._ChildNodeListLazy$ = function(_this) {
  return new $._ChildNodeListLazy(_this);
};

$.ShadowRoot_supported = function() {
  return !!(Element.prototype.webkitCreateShadowRoot);
};

$.Window__isDartLocation = function(thing) {
  var t1, exception;
  try {
    t1 = thing;
    return typeof t1 === "object" && t1 !== null && t1.$isLocation();
  } catch (exception) {
    $.unwrapException(exception);
    return false;
  }

};

$._ElementAttributeMap$ = function(element) {
  return new $._ElementAttributeMap(element);
};

$._Device_userAgent = function() {
  return $.window().get$navigator().get$userAgent();
};

$._Device_isOpera = function() {
  return $.contains$2$as($._Device_userAgent(), "Opera", 0);
};

$._EventStream$ = function(_target, _eventType, _useCapture, T) {
  var t1;
  T;
  t1 = new $._EventStream(_target, _eventType, _useCapture);
  $.setRuntimeTypeInfo(t1, [T]);
  return t1;
};

$._EventStreamSubscription$ = function(_target, _eventType, _onData, _useCapture, T) {
  var t1;
  T;
  t1 = new $._EventStreamSubscription(0, _target, _eventType, _onData, _useCapture);
  $.setRuntimeTypeInfo(t1, [T]);
  t1._EventStreamSubscription$4(_target, _eventType, _onData, _useCapture, T);
  return t1;
};

$._WrappedList$ = function(_list, E) {
  var t1 = new $._WrappedList(_list);
  $.setRuntimeTypeInfo(t1, [E]);
  return t1;
};

$._WrappedIterator$ = function(_iterator, E) {
  var t1 = new $._WrappedIterator(_iterator);
  $.setRuntimeTypeInfo(t1, [E]);
  return t1;
};

$._DocumentFragmentFactoryProvider_createDocumentFragment_html = function(html) {
  var fragment = document.createDocumentFragment();
  fragment.set$innerHtml(html);
  return fragment;
};

$._convertNativeToDart_Window = function(win) {
  return $._DOMWindowCrossFrame__createSafe(win);
};

$._DOMWindowCrossFrame$ = function(_window) {
  return new $._DOMWindowCrossFrame(_window);
};

$._DOMWindowCrossFrame__createSafe = function(w) {
  if (w === window)
    return w;
  else
    return $._DOMWindowCrossFrame$(w);
};

$._LocationCrossFrame$ = function(_location) {
  return new $._LocationCrossFrame(_location);
};

$._LocationCrossFrame__createSafe = function($location) {
  if ($location === window.get$location())
    return $location;
  else
    return $._LocationCrossFrame$($location);
};

$._LocationWrapper$ = function(_ptr) {
  return new $._LocationWrapper(_ptr);
};

$._LocationWrapper__get = function(p, m) {
  return p[m];
};

$.FixedSizeListIterator$ = function(array, T) {
  var t1 = new $.FixedSizeListIterator(array, $.get$length$as(array), -1, null);
  $.setRuntimeTypeInfo(t1, [T]);
  return t1;
};

$.FilteredElementList$ = function(node) {
  return new $.FilteredElementList(node, node.get$nodes());
};

$.Lists_indexOf = function(a, element, startIndex, endIndex) {
  var i;
  if (typeof a !== "string" && (typeof a !== "object" || a === null || a.constructor !== Array && !a.$isJavaScriptIndexingBehavior()))
    return $.Lists_indexOf$bailout(1, a, element, startIndex, endIndex);
  if (typeof startIndex !== "number")
    return $.Lists_indexOf$bailout(1, a, element, startIndex, endIndex);
  if (typeof endIndex !== "number")
    return $.Lists_indexOf$bailout(1, a, element, startIndex, endIndex);
  if (startIndex >= a.length)
    return -1;
  if (startIndex < 0)
    startIndex = 0;
  for (i = startIndex; i < endIndex; ++i) {
    if (i !== (i | 0))
      throw $.iae(i);
    if (i < 0 || i >= a.length)
      throw $.ioore(i);
    if ($.$$eq$o(a[i], element) === true)
      return i;
  }
  return -1;
};

$.Lists_indexOf$bailout = function(state0, a, element, startIndex, endIndex) {
  var t1, t2, i;
  t1 = $.getInterceptor$as(a);
  t2 = $.getInterceptor$n(startIndex);
  if (t2.$ge(startIndex, t1.get$length(a)) === true)
    return -1;
  if (t2.$lt(startIndex, 0) === true)
    startIndex = 0;
  for (i = startIndex; t2 = $.getInterceptor$n(i), t2.$lt(i, endIndex) === true; i = t2.$add(i, 1))
    if ($.$$eq$o(t1.$index(a, i), element) === true)
      return i;
  return -1;
};

$.ReceivePort_ReceivePort = function() {
  return $.ReceivePortImpl$();
};

$._Isolate_port = function() {
  if ($.lazyPort == null)
    $.lazyPort = $.ReceivePort_ReceivePort();
  return $.lazyPort;
};

$._AttributeClassSet$ = function(_element) {
  return new $._AttributeClassSet(_element);
};

$.Uri$ = function(uri) {
  var t1, t2;
  t1 = $.get$Uri__splitRe().firstMatch$1(uri);
  t2 = $.getInterceptor$as(t1);
  return new $.Uri($.Uri__emptyIfNull(t2.$index(t1, 1)), $.Uri__emptyIfNull(t2.$index(t1, 2)), $.Uri__emptyIfNull(t2.$index(t1, 3)), $.Uri__parseIntOrZero(t2.$index(t1, 4)), $.Uri__emptyIfNull(t2.$index(t1, 5)), $.Uri__emptyIfNull(t2.$index(t1, 6)), $.Uri__emptyIfNull(t2.$index(t1, 7)));
};

$.Uri__emptyIfNull = function(val) {
  return val != null ? val : "";
};

$.Uri__parseIntOrZero = function(val) {
  if (val != null && $.$$eq$o(val, "") !== true)
    return $.int_parse(val, null, null);
  else
    return 0;
};

$.Uri__addIfNonEmpty = function(sb, test, first, second) {
  if ("" !== test) {
    sb.add$1(sb, first == null ? "null" : first);
    sb.add$1(sb, second == null ? "null" : second);
  }
};

$.TodoApp$forElement = function(e) {
  var t1 = new $.TodoApp(null, null, null, null, null, null, null, null, null, null, null, null, e, null);
  t1.WebComponent$forElement$1(e);
  return t1;
};

$.EditableLabel$forElement = function(e) {
  var t1 = $.$$add$n($.Observable_$_nextHashCode, 1);
  $.Observable_$_nextHashCode = t1;
  t1 = new $.EditableLabel(null, null, null, null, null, null, t1, null, null, e, null);
  t1.WebComponent$forElement$1(e);
  return t1;
};

$.init_autogenerated = function() {
  var _root, __t;
  _root = document.get$body();
  __t = $.Template$(_root);
  __t.component$1($.TodoApp$forElement(_root.query$1("#__e-0")));
  __t.create$0();
  __t.insert$0();
};

$.main = function() {
  $.useObservers = true;
  $.init_autogenerated();
};

$.ViewModel$ = function() {
  return new $.ViewModel();
};

$.AppModel$ = function() {
  var t1, t2;
  t1 = $.ObservableList$(null, $.Todo);
  t2 = $.$$add$n($.Observable_$_nextHashCode, 1);
  $.Observable_$_nextHashCode = t2;
  return new $.AppModel(t1, t2, null, null);
};

$.Todo$ = function(task) {
  var t1 = $.$$add$n($.Observable_$_nextHashCode, 1);
  $.Observable_$_nextHashCode = t1;
  return new $.Todo(task, false, t1, null, null);
};

$.RouterOptions$forElement = function(e) {
  var t1 = new $.RouterOptions(null, null, null, e, null);
  t1.WebComponent$forElement$1(e);
  return t1;
};

$.TodoRow$forElement = function(e) {
  var t1 = $.$$add$n($.Observable_$_nextHashCode, 1);
  $.Observable_$_nextHashCode = t1;
  t1 = new $.TodoRow(null, null, null, null, null, null, null, t1, null, null, e, null);
  t1.WebComponent$forElement$1(e);
  return t1;
};

$.locationHash = function() {
  if ($._hash == null) {
    $._hash = $.ObservableReference$($.window().get$location().get$hash(), null);
    $.window().get$onHashChange().listen$1($._updateLocationHash);
    $.window().get$onPopState().listen$1($._updateLocationHash);
  }
  return $._hash.get$value();
};

$._updateLocationHash = function(_) {
  var t1;
  if ($._hash != null) {
    t1 = window.get$location().get$hash();
    $._hash.set$value(t1);
  }
};

$.ObservableList$ = function($length, E) {
  var t1, t2;
  t1 = $.$$add$n($.Observable_$_nextHashCode, 1);
  $.Observable_$_nextHashCode = t1;
  if ($length != null) {
    t2 = $.List_List($length, E);
    $.setRuntimeTypeInfo(t2, [E]);
  } else
    t2 = [];
  E;
  t2 = new $.ObservableList(t1, null, null, t2);
  $.setRuntimeTypeInfo(t2, [E]);
  return t2;
};

$.ListIterator$0 = function(list, E) {
  var t1 = new $.ListIterator0(list, list.get$length(list), -1, null);
  $.setRuntimeTypeInfo(t1, [E]);
  return t1;
};

$.ObservableMap$ = function(createMap, K, V) {
  var t1, t2;
  t1 = createMap != null ? createMap.call$0() : $.Map_Map(K, V);
  t2 = $.$$add$n($.Observable_$_nextHashCode, 1);
  $.Observable_$_nextHashCode = t2;
  t2 = new $.ObservableMap(t1, null, null, null, null, t2);
  $.setRuntimeTypeInfo(t2, [K, V]);
  t2.ObservableMap$1$createMap(createMap, K, V);
  return t2;
};

$.ObservableMap_ObservableMap$from = function(other, createMap, K, V) {
  var result = $.ObservableMap$(createMap, K, V);
  $.forEach$1$a(other, new $.ObservableMap_ObservableMap$from_anon(result));
  return result;
};

$._ObservableMapKeyIterable$ = function(_map, K, V) {
  var t1;
  K;
  t1 = new $._ObservableMapKeyIterable(_map);
  $.setRuntimeTypeInfo(t1, [K, V]);
  return t1;
};

$._ObservableMapKeyIterator$ = function(map, K, V) {
  var t1 = new $._ObservableMapKeyIterator(map, $.get$iterator$a(map.get$_liblib12$_map().get$keys()), false);
  $.setRuntimeTypeInfo(t1, [K, V]);
  return t1;
};

$._ObservableMapValueIterable$ = function(_map, K, V) {
  var t1;
  V;
  t1 = new $._ObservableMapValueIterable(_map);
  $.setRuntimeTypeInfo(t1, [K, V]);
  return t1;
};

$._ObservableMapValueIterator$ = function(map, K, V) {
  var t1 = new $._ObservableMapValueIterator(map, $.get$iterator$a(map.get$_liblib12$_map().get$keys()), $.get$iterator$a(map.get$_liblib12$_map().get$values()), null);
  $.setRuntimeTypeInfo(t1, [K, V]);
  return t1;
};

$.ChangeNotification$ = function(oldValue, newValue, changes) {
  return new $.ChangeNotification(oldValue, newValue, changes);
};

$.ChangeRecord$ = function(type, key, oldValue, newValue) {
  return new $.ChangeRecord(type, key, oldValue, newValue);
};

$.observe = function(value, callback, debugName) {
  var exprObserver;
  if (typeof value === "object" && value !== null && !!value.$isObservable)
    return $.observeChanges(value, new $.observe_anon(callback, value));
  exprObserver = $._ExpressionObserver$(value, callback, debugName);
  if (exprObserver._observe$0() !== true)
    return $._doNothing;
  return exprObserver.get$_unobserve();
};

$.observeChanges = function(obj, observer) {
  if (obj.get$$$_observers() == null)
    obj.set$$$_observers($.LinkedList$(null));
  return $.get$remove$a($.add$1$a(obj.get$$$_observers(), observer));
};

$.toObservable = function(value) {
  var createMap, t1;
  if (typeof value === "object" && value !== null && !!value.$isMap) {
    if (!!value.$isSplayTreeMap)
      createMap = new $.toObservable_anon();
    else
      createMap = !!value.$isLinkedHashMap ? new $.toObservable_anon0() : null;
    return $.ObservableMap_ObservableMap$from(value, createMap, null, null);
  }
  if (typeof value === "object" && value !== null && !!value.$isSet)
    return $.ObservableSet_ObservableSet$from(value, null, null);
  if (typeof value === "object" && value !== null && (value.constructor === Array || value.$isIterable())) {
    t1 = $.ObservableList$(null, null);
    t1.addAll$1(t1, value);
    return t1;
  }
  return value;
};

$.hasObservers = function($self) {
  var t1 = $self.get$$$_observers();
  return t1 != null && t1.get$head() != null;
};

$.observeReads = function() {
  return $._activeObserver != null;
};

$.notifyRead = function($self, type, key) {
  return $._activeObserver._addRead$3($self, type, key);
};

$.notifyChange = function($self, type, key, oldValue, newValue) {
  if ((type & 14) === 0)
    if ($.$$eq$o(oldValue, newValue) === true)
      return;
  if ($._changedObjects == null) {
    $._changedObjects = [];
    $.setImmediate($.deliverChangesSync);
  }
  if ($self.get$$$_changes() == null) {
    $self.set$$$_changes([]);
    $.add$1$a($._changedObjects, $self);
  }
  $.add$1$a($self.get$$$_changes(), $.ChangeRecord$(type, key, oldValue, newValue));
};

$._doNothing = function() {
};

$.deliverChangesSync = function() {
  var observable, changes, observer, error, trace, iterations, t1, t2, changedExpressions, iterations0, n, exception;
  iterations = 0;
  while (true) {
    t1 = $._changedObjects;
    t2 = t1 == null;
    if (!(!t2 || $._changedExpressions != null))
      break;
    $._changedObjects = null;
    changedExpressions = $._changedExpressions;
    $._changedExpressions = null;
    iterations0 = iterations + 1;
    if (iterations === $.circularNotifyLimit) {
      $._diagnoseCircularLimit(t1, changedExpressions);
      return;
    }
    if (!t2)
      for (t1 = $.get$iterator$a(t1); t1.moveNext$0() === true;) {
        observable = t1.get$current();
        changes = observable.get$$$_changes();
        observable.set$$$_changes(null);
        for (n = observable.get$$$_observers().get$head(); n != null; n = n.get$next()) {
          observer = n.get$value();
          try {
            observer.call$1(changes);
          } catch (exception) {
            t2 = $.unwrapException(exception);
            error = t2;
            trace = $.getTraceFromException(exception);
            $.onObserveUnhandledError.call$4(error, trace, observer, "from " + $.S(observable));
          }

        }
      }
    if (changedExpressions != null)
      $.forEach$1$a(changedExpressions, new $.deliverChangesSync_anon());
    iterations = iterations0;
  }
};

$._diagnoseCircularLimit = function(changedObjects, changedExpressions) {
  var trace, t1, t2, changes, change, msg;
  trace = [];
  if (changedObjects != null)
    for (t1 = $.get$iterator$a(changedObjects); t1.moveNext$0() === true;) {
      t2 = t1.get$current();
      changes = t2.get$$$_changes();
      trace.push($.S(t2) + " " + $.S(changes));
    }
  if (changedExpressions != null)
    for (t1 = $.get$iterator$a(changedExpressions.get$values()); t1.moveNext$0() === true;) {
      t2 = t1.get$current();
      change = t2._deliver$0();
      if (change != null)
        trace.push($.S(t2) + " " + $.S(change));
    }
  $._changedObjects = null;
  $._changedExpressions = null;
  t1 = "exceeded notifiction limit of " + $.S($.circularNotifyLimit) + ", possible " + "circular reference in observer callbacks: ";
  t2 = $.CONSTANT0.take$1(trace, 10);
  msg = t1 + $.S(t2.join$1(t2, ", "));
  $.get$onCircularNotifyLimit().call$1(msg);
};

$._ExpressionObserver$ = function(_expression, _callback, _debugName) {
  var t1 = $.$$add$n($._ExpressionObserver__nextId, 1);
  $._ExpressionObserver__nextId = t1;
  return new $._ExpressionObserver(t1, _expression, _callback, _debugName, $.Map_Map(null, null), [], false, null);
};

$.defaultObserveUnhandledError = function(error, trace, obj, message) {
  $.Primitives_printString("web_ui.observe: unhandled error calling " + $.S(obj) + " " + $.S(message) + ".\n" + "error:\n" + $.S(error) + "\n\nstack trace:\n" + $.S(trace));
};

$.ObservableReference$ = function(initialValue, T) {
  var t1 = $.$$add$n($.Observable_$_nextHashCode, 1);
  $.Observable_$_nextHashCode = t1;
  t1 = new $.ObservableReference(initialValue, null, null, t1);
  $.setRuntimeTypeInfo(t1, [T]);
  return t1;
};

$.ObservableSet$ = function(createMap, E) {
  var t1, t2;
  t1 = $.$$add$n($.Observable_$_nextHashCode, 1);
  $.Observable_$_nextHashCode = t1;
  t2 = createMap != null ? createMap.call$0() : $.Map_Map(E, $.Object);
  E;
  t2 = new $.ObservableSet(t1, null, null, t2, createMap);
  $.setRuntimeTypeInfo(t2, [E]);
  return t2;
};

$.ObservableSet_ObservableSet$from = function(other, createMap, E) {
  var t1 = $.ObservableSet$(createMap, E);
  t1.addAll$1(t1, other);
  return t1;
};

$._ObservableSetIterator$ = function(set, E) {
  var t1 = new $._ObservableSetIterator(set, $.get$iterator$a(set._liblib11$_map.get$keys()), false);
  $.setRuntimeTypeInfo(t1, [E]);
  return t1;
};

$.LinkedListNode$_ = function(value, _list, E) {
  var t1 = new $.LinkedListNode(null, null, _list, value);
  $.setRuntimeTypeInfo(t1, [E]);
  t1.LinkedListNode$_$2(value, _list, E);
  return t1;
};

$.LinkedList$ = function(E) {
  var t1;
  E;
  t1 = new $.LinkedList(null, null, 0);
  $.setRuntimeTypeInfo(t1, [E]);
  return t1;
};

$.LinkedListIterator$ = function(_list, E) {
  var t1 = new $.LinkedListIterator(null, _list, null, -1);
  $.setRuntimeTypeInfo(t1, [E]);
  t1.LinkedListIterator$1(_list, E);
  return t1;
};

$.hash3 = function(x, y, z) {
  return $.$$add$n($.$$mul$n($.get$hashCode$abnosu($.$$add$n($.$$mul$n($.get$hashCode$abnosu(x), 31), $.get$hashCode$abnosu(y))), 31), $.get$hashCode$abnosu(z));
};

$.hash4 = function(w, x, y, z) {
  var t1, t2, t3, t4;
  t1 = $.CONSTANT11.get$hashCode(w);
  t2 = $.get$hashCode$abnosu(x);
  if (typeof t2 !== "number")
    throw $.iae(t2);
  t3 = $.$$add$n($.$$mul$n($.get$hashCode$abnosu(y), 31), $.get$hashCode$abnosu(z));
  t4 = $.CONSTANT2.get$hashCode(t1 * 31 + t2);
  t3 = $.get$hashCode$abnosu(t3);
  if (typeof t3 !== "number")
    throw $.iae(t3);
  return t4 * 31 + t3;
};

$.setImmediate = function(callback) {
  var port = $.ReceivePortImpl$();
  port.receive$1(new $.setImmediate_anon(callback, port));
  port.toSendPort$0().send$1(null);
};

$.Arrays_copy = function(src, srcStart, dst, dstStart, count) {
  var i, j;
  if (typeof dstStart !== "number")
    return $.Arrays_copy$bailout(1, src, srcStart, dst, dstStart, count);
  if (srcStart < dstStart) {
    if (typeof count !== "number")
      throw $.iae(count);
    i = srcStart + count - 1;
    j = dstStart + count - 1;
    for (; i >= srcStart; --i, --j)
      dst.$indexSet(dst, j, src.$index(src, i));
  } else {
    j = dstStart;
    i = srcStart;
    while (true) {
      if (typeof count !== "number")
        throw $.iae(count);
      if (!(i < srcStart + count))
        break;
      dst.$indexSet(dst, j, src.$index(src, i));
      ++i;
      ++j;
    }
  }
};

$.Arrays_copy$bailout = function(state0, src, srcStart, dst, dstStart, count) {
  var i, j;
  if (dstStart == null)
    dstStart = 0;
  if ($.CONSTANT2.$lt(srcStart, dstStart)) {
    if (typeof count !== "number")
      throw $.iae(count);
    i = srcStart + count - 1;
    j = $.$$sub$n($.$$add$n(dstStart, count), 1);
    for (; i >= srcStart; --i, j = $.$$sub$n(j, 1))
      dst.$indexSet(dst, j, src.$index(src, i));
  } else {
    j = dstStart;
    i = srcStart;
    while (true) {
      if (typeof count !== "number")
        throw $.iae(count);
      if (!(i < srcStart + count))
        break;
      dst.$indexSet(dst, j, src.$index(src, i));
      ++i;
      j = $.$$add$n(j, 1);
    }
  }
};

$.Arrays_rangeCheck = function(a, start, $length) {
  var t1;
  if ($length < 0)
    throw $.$$throw($.ArgumentError$("negative length " + $.S($length)));
  t1 = $.getInterceptor$n(start);
  if (t1.$lt(start, 0) === true)
    throw $.$$throw($.RangeError$($.S(start) + " must be greater than or equal to 0"));
  if ($.$$gt$n(t1.$add(start, $length), a.get$length(a)) === true)
    throw $.$$throw($.RangeError$($.S(start) + " + " + $.S($length) + " must be in the range [0.." + $.S(a.get$length(a)) + ")"));
};

$.updateBinding = function(value, node, stringValue) {
  var isSafeHtml, node0;
  isSafeHtml = typeof value === "object" && value !== null && !!value.$isSafeHtml;
  if (stringValue == null)
    stringValue = $.toString$0$abfnosu(value);
  if (!isSafeHtml && typeof node === "object" && node !== null && node.$isText())
    node.set$text(stringValue);
  else {
    node0 = isSafeHtml ? $._ElementFactoryProvider_createElement_html(stringValue) : document.createTextNode(stringValue);
    node.replaceWith$1(node0);
    node = node0;
  }
  return node;
};

$.updateCssClass = function(elem, addClasses, classes) {
  var t1, t2, t3, t4;
  t1 = $.getInterceptor(classes);
  if (t1.$eq(classes, "") === true || classes == null)
    return;
  if (addClasses === true)
    if (typeof classes === "string")
      if ($.CONSTANT1.contains$1(classes, " ") === true)
        $.addAll$1$a(elem.get$classes(), classes.split(" "));
      else
        $.add$1$a(elem.get$classes(), classes);
    else {
      if (typeof classes === "object" && classes !== null && (classes.constructor === Array || classes.$isList())) {
        t2 = $.getRuntimeTypeInfo(classes);
        t3 = $.String;
        t4 = $.checkArguments(classes.$asList(), t2, [t3]) === true;
        t2 = t4;
      } else
        t2 = false;
      if (t2)
        $.addAll$1$a(elem.get$classes(), t1.where$1(classes, new $.updateCssClass_anon()));
      else
        throw $.$$throw($.ArgumentError$("classes must be a String or List<String>."));
    }
  else if (typeof classes === "string")
    if ($.CONSTANT1.contains$1(classes, " ") === true)
      $.removeAll$1$a(elem.get$classes(), classes.split(" "));
    else
      $.remove$1$a(elem.get$classes(), classes);
  else {
    if (typeof classes === "object" && classes !== null && (classes.constructor === Array || classes.$isList())) {
      t2 = $.getRuntimeTypeInfo(classes);
      t3 = $.String;
      t4 = $.checkArguments(classes.$asList(), t2, [t3]) === true;
      t2 = t4;
    } else
      t2 = false;
    if (t2)
      $.removeAll$1$a(elem.get$classes(), t1.where$1(classes, new $.updateCssClass_anon0()));
    else
      throw $.$$throw($.ArgumentError$("classes must be a String or List<String>."));
  }
};

$.changeCssClasses = function(elem, change) {
  if (change.get$oldValue() != null)
    $.remove$1$a(elem.get$classes(), change.get$oldValue());
  if (change.get$newValue() != null)
    $.add$1$a(elem.get$classes(), change.get$newValue());
};

$.bindCssClasses = function(elem, exp) {
  return $.watchAndInvoke(exp, new $.bindCssClasses_anon(elem), "css-class-bind");
};

$.sanitizeUri = function(uri) {
  if (typeof uri === "object" && uri !== null && !!uri.$isSafeUri)
    return uri.toString$0(uri);
  uri = $.toString$0$abfnosu(uri);
  return $._isSafeUri(uri) ? uri : "#";
};

$._isSafeUri = function(uri) {
  var scheme, t1;
  scheme = $.Uri$(uri).scheme;
  t1 = $.getInterceptor(scheme);
  if (t1.$eq(scheme, "") === true)
    return true;
  return $.CONSTANT0.contains$1($.CONSTANT19, t1.toLowerCase$0(scheme)) || "MAILTO" === t1.toUpperCase$0(scheme);
};

$.Listener$ = function(eventStream, listener) {
  return new $.Listener(eventStream, null, listener);
};

$.Binding$ = function(exp, action, isFinal) {
  return new $.Binding(exp, action, isFinal, null);
};

$.ClassAttrBinding$ = function(elem, exp, isFinal) {
  return new $.ClassAttrBinding(elem, exp, isFinal, null);
};

$.DomPropertyBinding$ = function(getter, setter, isUrl, isFinal) {
  return new $.DomPropertyBinding(setter, getter, isUrl, isFinal, null);
};

$.ComponentItem$ = function(component) {
  return new $.ComponentItem(component);
};

$.Template$ = function(node) {
  return new $.Template(node, [], []);
};

$.ConditionalTemplate$ = function(reference, exp, bodySetup) {
  return new $.ConditionalTemplate(false, bodySetup, exp, null, reference, [], []);
};

$.LoopTemplate$ = function(reference, exp, iterSetup) {
  return new $.LoopTemplate(iterSetup, exp, null, reference, [], []);
};

$.LoopTemplateInAttribute$ = function(node, exp, iterSetup) {
  return new $.LoopTemplateInAttribute(iterSetup, exp, null, node, [], []);
};

$.watch = function(target, callback, debugName) {
  var exp, isList, val, e, trace, t1, exception, watcher;
  if ($.useObservers === true)
    return $.observe(target, callback, null);
  if (callback == null)
    return new $.watch_anon();
  if ($._watchers == null)
    $._watchers = $.LinkedList$($._Watcher);
  exp = null;
  isList = false;
  t1 = target;
  if (typeof t1 === "object" && t1 !== null && !!t1.$isHandle)
    exp = $.propertyTypeCast(target, "$isHandle").get$_getter();
  else {
    t1 = target;
    if (typeof t1 === "function" || typeof t1 === "object" && t1 !== null && !!t1.$isFunction) {
      exp = target;
      try {
        val = target.call$0();
        t1 = val;
        if (typeof t1 === "object" && t1 !== null && (t1.constructor === Array || t1.$isList()))
          isList = true;
        else {
          t1 = val;
          if (typeof t1 === "object" && t1 !== null && (t1.constructor === Array || t1.$isIterable())) {
            isList = true;
            exp = new $.watch_anon0(target);
          }
        }
      } catch (exception) {
        t1 = $.unwrapException(exception);
        e = t1;
        trace = $.getTraceFromException(exception);
        $.Primitives_printString("error: evaluating " + $.S(debugName != null ? debugName : "<unnamed>") + " " + "watcher threw error (" + $.S(e) + ", " + $.S(trace) + ")");
      }

    } else {
      t1 = target;
      if (typeof t1 === "object" && t1 !== null && (t1.constructor === Array || t1.$isList())) {
        exp = new $.watch_anon1(target);
        isList = true;
      } else {
        t1 = target;
        if (typeof t1 === "object" && t1 !== null && (t1.constructor === Array || t1.$isIterable())) {
          exp = new $.watch_anon2(target);
          isList = true;
        }
      }
    }
  }
  watcher = isList === true ? $._ListWatcher$(exp, callback, debugName, null) : $._Watcher$(exp, callback, debugName);
  return $.get$remove$a($.add$1$a($._watchers, watcher));
};

$.watchAndInvoke = function(exp, callback, debugName) {
  var res = $.watch(exp, callback, debugName);
  if (typeof exp === "function" || typeof exp === "object" && exp !== null && !!exp.$isFunction)
    callback.call$1($.ChangeNotification$(null, exp.call$0(), null));
  else
    callback.call$1($.ChangeNotification$(null, exp, null));
  return res;
};

$._Watcher$ = function(_getter, _callback, debugName) {
  var t1 = new $._Watcher(debugName, _getter, _callback, null);
  t1._Watcher$3(_getter, _callback, debugName);
  return t1;
};

$.dispatch = function() {
  var total, t1, dirty;
  if ($._watchers == null)
    return;
  total = 0;
  do {
    for (t1 = $.get$iterator$a($._watchers), dirty = false; t1.moveNext$0() === true;)
      if (t1.get$current().compareAndNotify$0())
        dirty = true;
    if (dirty) {
      ++total;
      t1 = total < 10;
    } else
      t1 = false;
  } while (t1);
  if (total === 10)
    $.Primitives_printString("Possible loop in watchers propagation, stopped dispatch.");
};

$._ListWatcher$ = function(getter, callback, debugName, T) {
  var t1 = new $._ListWatcher(debugName, getter, callback, null);
  $.setRuntimeTypeInfo(t1, [T]);
  t1._Watcher$3(getter, callback, debugName);
  t1._ListWatcher$3(getter, callback, debugName, T);
  return t1;
};

$.WebComponent__matches = function(node, selector) {
  if (!(typeof node === "object" && node !== null && node.$isElement()))
    return $.$$eq$o(selector, "*");
  return node.matches$1(selector);
};

$.WebComponent__isActive = function(node) {
  for (node = node.get$parent(); node != null; node = node.get$parent())
    if ($.$$eq$o(node.get$tagName(), "CONTENT") === true || $.$$eq$o(node.get$tagName(), "SHADOW") === true)
      return false;
  return true;
};

$.WebComponent__distribute = function(insertionPoint, nodes) {
  var t1, t2;
  for (t1 = $.get$iterator$a(nodes); t1.moveNext$0() === true;) {
    t2 = t1.get$current();
    insertionPoint.get$parent().insertBefore$2(t2, insertionPoint);
  }
  $.remove$0$a(insertionPoint);
};

$.IsolateNatives__processWorkerMessage.call$2 = $.IsolateNatives__processWorkerMessage;
$.IsolateNatives__processWorkerMessage.$name = "IsolateNatives__processWorkerMessage";
$.Primitives__throwFormatException.call$1 = $.Primitives__throwFormatException;
$.Primitives__throwFormatException.$name = "Primitives__throwFormatException";
$.$$throw.call$1 = $.$$throw;
$.$$throw.$name = "$$throw";
$.DartError_toStringWrapper.call$0 = $.DartError_toStringWrapper;
$.DartError_toStringWrapper.$name = "DartError_toStringWrapper";
$.invokeClosure.call$5 = $.invokeClosure;
$.invokeClosure.$name = "invokeClosure";
$.typeNameInChrome.call$1 = $.typeNameInChrome;
$.typeNameInChrome.$name = "typeNameInChrome";
$.typeNameInSafari.call$1 = $.typeNameInSafari;
$.typeNameInSafari.$name = "typeNameInSafari";
$.typeNameInOpera.call$1 = $.typeNameInOpera;
$.typeNameInOpera.$name = "typeNameInOpera";
$.typeNameInFirefox.call$1 = $.typeNameInFirefox;
$.typeNameInFirefox.$name = "typeNameInFirefox";
$.typeNameInIE.call$1 = $.typeNameInIE;
$.typeNameInIE.$name = "typeNameInIE";
$.constructorNameFallback.call$1 = $.constructorNameFallback;
$.constructorNameFallback.$name = "constructorNameFallback";
$.dynamicBind.call$4 = $.dynamicBind;
$.dynamicBind.$name = "dynamicBind";
$._nullDataHandler.call$1 = $._nullDataHandler;
$._nullDataHandler.$name = "_nullDataHandler";
$._nullErrorHandler.call$1 = $._nullErrorHandler;
$._nullErrorHandler.$name = "_nullErrorHandler";
$._nullDoneHandler.call$0 = $._nullDoneHandler;
$._nullDoneHandler.$name = "_nullDoneHandler";
$.Comparable_compare.call$2 = $.Comparable_compare;
$.Comparable_compare.$name = "Comparable_compare";
$._updateLocationHash.call$1 = $._updateLocationHash;
$._updateLocationHash.$name = "_updateLocationHash";
$._doNothing.call$0 = $._doNothing;
$._doNothing.$name = "_doNothing";
$.deliverChangesSync.call$0 = $.deliverChangesSync;
$.deliverChangesSync.$name = "deliverChangesSync";
$.defaultObserveUnhandledError.call$4 = $.defaultObserveUnhandledError;
$.defaultObserveUnhandledError.$name = "defaultObserveUnhandledError";
$.List = {builtin$cls: "List"};
$.Element = {builtin$cls: "Element"};
$.num = {builtin$cls: "num"};
$.TableCellElement = {builtin$cls: "TableCellElement"};
$.Set = {builtin$cls: "Set"};
$.Match = {builtin$cls: "Match"};
$.TableRowElement = {builtin$cls: "TableRowElement"};
$.TableSectionElement = {builtin$cls: "TableSectionElement"};
$.String = {builtin$cls: "String"};
$.ReceivePort = {builtin$cls: "ReceivePort"};
$._ManagerStub = {builtin$cls: "_ManagerStub"};
$.$int = {builtin$cls: "$int"};
$.bool = {builtin$cls: "bool"};
$.Node = {builtin$cls: "Node"};
$.$double = {builtin$cls: "$double"};
$.String.$isString = true;
Isolate.makeConstantList = function(list) {
  list.immutable$list = true;
  list.fixed$length = true;
  return list;
};
$.CONSTANT10 = Isolate.makeConstantList([]);
$.CONSTANT22 = Isolate.makeConstantList(["caption", "col", "colgroup", "tbody", "td", "tfoot", "th", "thead", "tr"]);
$.CONSTANT12 = new $.ConstantMap(9, {caption: null, col: null, colgroup: null, tbody: null, td: null, tfoot: null, th: null, thead: null, tr: null}, $.CONSTANT22);
$.CONSTANT15 = new $.Object();
$.CONSTANT17 = new $.EventStreamProvider("blur");
$.CONSTANT9 = new $.EventStreamProvider("hashchange");
$.CONSTANT6 = new $._LinkedHashTableHeadMarker();
$.CONSTANT23 = Isolate.makeConstantList(["body", "head", "caption", "td", "th", "colgroup", "col", "tr", "tbody", "tfoot", "thead", "track"]);
$.CONSTANT13 = new $.ConstantMap(12, {body: "html", head: "html", caption: "table", td: "tr", th: "tr", colgroup: "table", col: "colgroup", tr: "tbody", tbody: "table", tfoot: "table", thead: "table", track: "audio"}, $.CONSTANT23);
$.CONSTANT20 = new $.EventStreamProvider("submit");
$.CONSTANT14 = new $.EventStreamProvider("click");
$.CONSTANT19 = Isolate.makeConstantList(["http", "https", "ftp", "mailto"]);
$.CONSTANT16 = new $.EventStreamProvider("keyup");
$.CONSTANT8 = new $.Duration(0);
$.CONSTANT5 = new $.JSNull();
$.CONSTANT0 = new $.JSArray();
$.CONSTANT = new $.NullThrownError();
$.CONSTANT2 = new $.JSNumber();
$.CONSTANT11 = new $.JSInt();
$.CONSTANT1 = new $.JSString();
$.CONSTANT18 = new $.EventStreamProvider("dblclick");
$.CONSTANT7 = new $.EventStreamProvider("popstate");
$.CONSTANT21 = new $.EventStreamProvider("change");
$.CONSTANT3 = new $._DeadEntry();
$.CONSTANT4 = new $._NullKey();
$.lazyPort = null;
$.ReceivePortImpl__nextFreeId = 1;
$.Primitives_hashCodeSeed = 0;
$._getTypeNameOf = null;
$._hash = null;
$.Observable_$_nextHashCode = 0;
$._activeObserver = null;
$.circularNotifyLimit = 100;
$._changedObjects = null;
$._changedExpressions = null;
$._ExpressionObserver__nextId = 0;
$.onObserveUnhandledError = $.defaultObserveUnhandledError;
$.useObservers = false;
$._watchers = null;
$.useShadowDom = false;
$.$$add$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver + a0;
  return $.getInterceptor$n(receiver).$add(receiver, a0);
};
$.$$and$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return (receiver & a0) >>> 0;
  return $.getInterceptor$n(receiver).$and(receiver, a0);
};
$.$$eq$o = function(receiver, a0) {
  if (receiver == null)
    return a0 == null;
  if (!(typeof receiver == "object"))
    return !(a0 == null) && receiver === a0;
  return $.getInterceptor(receiver).$eq(receiver, a0);
};
$.$$ge$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver >= a0;
  return $.getInterceptor$n(receiver).$ge(receiver, a0);
};
$.$$gt$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver > a0;
  return $.getInterceptor$n(receiver).$gt(receiver, a0);
};
$.$$index$as = function(receiver, a0) {
  if (receiver.constructor == Array || typeof receiver == "string")
    if (a0 >>> 0 === a0 && a0 < receiver.length)
      return receiver[a0];
  return $.getInterceptor$as(receiver).$index(receiver, a0);
};
$.$$indexSet$a = function(receiver, a0, a1) {
  if (receiver.constructor == Array && !receiver.immutable$list && a0 >>> 0 === a0 && a0 < receiver.length)
    return receiver[a0] = a1;
  return $.getInterceptor$a(receiver).$indexSet(receiver, a0, a1);
};
$.$$le$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver <= a0;
  return $.getInterceptor$n(receiver).$le(receiver, a0);
};
$.$$lt$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver < a0;
  return $.getInterceptor$n(receiver).$lt(receiver, a0);
};
$.$$mul$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver * a0;
  return $.getInterceptor$n(receiver).$mul(receiver, a0);
};
$.$$negate$n = function(receiver) {
  if (typeof receiver == "number")
    return -receiver;
  return $.getInterceptor$n(receiver).$negate(receiver);
};
$.$$or$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return (receiver | a0) >>> 0;
  return $.getInterceptor$n(receiver).$or(receiver, a0);
};
$.$$shl$n = function(receiver, a0) {
  return $.getInterceptor$n(receiver).$shl(receiver, a0);
};
$.$$sub$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver - a0;
  return $.getInterceptor$n(receiver).$sub(receiver, a0);
};
$.$$tdiv$n = function(receiver, a0) {
  return $.getInterceptor$n(receiver).$tdiv(receiver, a0);
};
$.add$1$a = function(receiver, a0) {
  return $.getInterceptor$a(receiver).add$1(receiver, a0);
};
$.addAll$1$a = function(receiver, a0) {
  return $.getInterceptor$a(receiver).addAll$1(receiver, a0);
};
$.allMatches$1$s = function(receiver, a0) {
  return $.getInterceptor$s(receiver).allMatches$1(receiver, a0);
};
$.clear$0$a = function(receiver) {
  return $.getInterceptor$a(receiver).clear$0(receiver);
};
$.compareTo$1$ns = function(receiver, a0) {
  return $.getInterceptor$ns(receiver).compareTo$1(receiver, a0);
};
$.contains$1$as = function(receiver, a0) {
  return $.getInterceptor$as(receiver).contains$1(receiver, a0);
};
$.contains$2$as = function(receiver, a0, a1) {
  return $.getInterceptor$as(receiver).contains$2(receiver, a0, a1);
};
$.elementAt$1$a = function(receiver, a0) {
  return $.getInterceptor$a(receiver).elementAt$1(receiver, a0);
};
$.every$1$a = function(receiver, a0) {
  return $.getInterceptor$a(receiver).every$1(receiver, a0);
};
$.forEach$1$a = function(receiver, a0) {
  return $.getInterceptor$a(receiver).forEach$1(receiver, a0);
};
$.get$contains$as = function(receiver) {
  return $.getInterceptor$as(receiver).get$contains(receiver);
};
$.get$hashCode$abnosu = function(receiver) {
  return $.getInterceptor(receiver).get$hashCode(receiver);
};
$.get$isEmpty$as = function(receiver) {
  return $.getInterceptor$as(receiver).get$isEmpty(receiver);
};
$.get$iterator$a = function(receiver) {
  return $.getInterceptor$a(receiver).get$iterator(receiver);
};
$.get$last$a = function(receiver) {
  return $.getInterceptor$a(receiver).get$last(receiver);
};
$.get$length$as = function(receiver) {
  return $.getInterceptor$as(receiver).get$length(receiver);
};
$.get$remove$a = function(receiver) {
  return $.getInterceptor$a(receiver).get$remove(receiver);
};
$.indexOf$1$as = function(receiver, a0) {
  return $.getInterceptor$as(receiver).indexOf$1(receiver, a0);
};
$.indexOf$2$as = function(receiver, a0, a1) {
  return $.getInterceptor$as(receiver).indexOf$2(receiver, a0, a1);
};
$.map$1$a = function(receiver, a0) {
  return $.getInterceptor$a(receiver).map$1(receiver, a0);
};
$.remainder$1$n = function(receiver, a0) {
  return $.getInterceptor$n(receiver).remainder$1(receiver, a0);
};
$.remove$0$a = function(receiver) {
  return $.getInterceptor$a(receiver).remove$0(receiver);
};
$.remove$1$a = function(receiver, a0) {
  return $.getInterceptor$a(receiver).remove$1(receiver, a0);
};
$.removeAll$1$a = function(receiver, a0) {
  return $.getInterceptor$a(receiver).removeAll$1(receiver, a0);
};
$.removeLast$0$a = function(receiver) {
  return $.getInterceptor$a(receiver).removeLast$0(receiver);
};
$.removeMatching$1$a = function(receiver, a0) {
  return $.getInterceptor$a(receiver).removeMatching$1(receiver, a0);
};
$.removeRange$2$a = function(receiver, a0, a1) {
  return $.getInterceptor$a(receiver).removeRange$2(receiver, a0, a1);
};
$.replaceAll$2$s = function(receiver, a0, a1) {
  return $.getInterceptor$s(receiver).replaceAll$2(receiver, a0, a1);
};
$.set$length$as = function(receiver, value) {
  return $.getInterceptor$as(receiver).set$length(receiver, value);
};
$.setRange$4$a = function(receiver, a0, a1, a2, a3) {
  return $.getInterceptor$a(receiver).setRange$4(receiver, a0, a1, a2, a3);
};
$.skip$1$a = function(receiver, a0) {
  return $.getInterceptor$a(receiver).skip$1(receiver, a0);
};
$.split$1$s = function(receiver, a0) {
  return $.getInterceptor$s(receiver).split$1(receiver, a0);
};
$.substring$1$s = function(receiver, a0) {
  return $.getInterceptor$s(receiver).substring$1(receiver, a0);
};
$.toList$0$a = function(receiver) {
  return $.getInterceptor$a(receiver).toList$0(receiver);
};
$.toLowerCase$0$s = function(receiver) {
  return $.getInterceptor$s(receiver).toLowerCase$0(receiver);
};
$.toSet$0$a = function(receiver) {
  return $.getInterceptor$a(receiver).toSet$0(receiver);
};
$.toString$0$abfnosu = function(receiver) {
  return $.getInterceptor(receiver).toString$0(receiver);
};
$.trim$0$s = function(receiver) {
  return $.getInterceptor$s(receiver).trim$0(receiver);
};
$.where$1$a = function(receiver, a0) {
  return $.getInterceptor$a(receiver).where$1(receiver, a0);
};
$.getInterceptor = function(receiver) {
  if (typeof receiver == "number") {
    if (Math.floor(receiver) == receiver)
      return $.JSInt.prototype;
    return $.JSDouble.prototype;
  }
  if (typeof receiver == "string")
    return $.JSString.prototype;
  if (receiver == null)
    return $.JSNull.prototype;
  if (typeof receiver == "function")
    return $.JSFunction.prototype;
  if (typeof receiver == "boolean")
    return $.JSBool.prototype;
  if (receiver.constructor == Array)
    return $.JSArray.prototype;
  return receiver;
};
$.getInterceptor$a = function(receiver) {
  if (receiver == null)
    return void 0;
  if (receiver.constructor == Array)
    return $.JSArray.prototype;
  return receiver;
};
$.getInterceptor$as = function(receiver) {
  if (typeof receiver == "string")
    return $.JSString.prototype;
  if (receiver == null)
    return void 0;
  if (receiver.constructor == Array)
    return $.JSArray.prototype;
  return receiver;
};
$.getInterceptor$n = function(receiver) {
  if (typeof receiver == "number")
    return $.JSNumber.prototype;
  if (receiver == null)
    return void 0;
  return receiver;
};
$.getInterceptor$ns = function(receiver) {
  if (typeof receiver == "number")
    return $.JSNumber.prototype;
  if (typeof receiver == "string")
    return $.JSString.prototype;
  if (receiver == null)
    return void 0;
  return receiver;
};
$.getInterceptor$s = function(receiver) {
  if (typeof receiver == "string")
    return $.JSString.prototype;
  if (receiver == null)
    return void 0;
  return receiver;
};
Isolate.$lazy($, "globalThis", "globalThis", "get$globalThis", function() {
  return $.IsolateNatives_computeGlobalThis();
});
Isolate.$lazy($, "globalWindow", "globalWindow", "get$globalWindow", function() {
  return $.get$globalThis().window;
});
Isolate.$lazy($, "globalWorker", "globalWorker", "get$globalWorker", function() {
  return $.get$globalThis().Worker;
});
Isolate.$lazy($, "globalPostMessageDefined", "globalPostMessageDefined", "get$globalPostMessageDefined", function() {
  return $.get$globalThis().postMessage !== (void 0);
});
Isolate.$lazy($, "thisScript", "IsolateNatives_thisScript", "get$IsolateNatives_thisScript", function() {
  return $.IsolateNatives_computeThisScript();
});
Isolate.$lazy($, "_runCallbacks", "Timer__runCallbacks", "get$Timer__runCallbacks", function() {
  return [];
});
Isolate.$lazy($, "_START_TAG_REGEXP", "_START_TAG_REGEXP", "get$_START_TAG_REGEXP", function() {
  return $.RegExp_RegExp("<(\\w+)", true, false);
});
Isolate.$lazy($, "_splitRe", "Uri__splitRe", "get$Uri__splitRe", function() {
  return $.RegExp_RegExp("^(?:([^:/?#.]+):)?(?://(?:([^/?#]*)@)?([\\w\\d\\-\\u0100-\\uffff.%]*)(?::([0-9]+))?)?([^?#]+)?(?:\\?([^#]*))?(?:#(.*))?$", true, false);
});
Isolate.$lazy($, "__html1", "TodoApp___html1", "get$TodoApp___html1", function() {
  return $.Element_Element$tag("template");
});
Isolate.$lazy($, "__html2", "TodoApp___html2", "get$TodoApp___html2", function() {
  return $.Element_Element$tag("todo-row");
});
Isolate.$lazy($, "__html3", "TodoApp___html3", "get$TodoApp___html3", function() {
  return $.Element_Element$html("<footer id=\"footer\">\n        <span id=\"todo-count\"><strong id=\"__e-6\"></strong></span>\n        <router-options id=\"filters\">\n          <li> <a href=\"#/\">All</a> </li>\n          <li> <a href=\"#/active\">Active</a> </li>\n          <li> <a href=\"#/completed\">Completed</a> </li>\n        </router-options>\n        <template id=\"__e-8\"></template>\n      </footer>");
});
Isolate.$lazy($, "__html4", "TodoApp___html4", "get$TodoApp___html4", function() {
  return $.Element_Element$html("<button id=\"clear-completed\"></button>");
});
Isolate.$lazy($, "__shadowTemplate", "TodoApp___shadowTemplate", "get$TodoApp___shadowTemplate", function() {
  return $.DocumentFragment_DocumentFragment$html("  <section id=\"todoapp\">\n    <header id=\"header\">\n      <h1 class=\"title\">todos</h1>\n      <form id=\"__e-1\">\n        <input id=\"new-todo\" placeholder=\"What needs to be done?\" autofocus=\"\">\n      </form>\n    </header>\n    <section id=\"main\">\n      <input id=\"toggle-all\" type=\"checkbox\">\n      <label for=\"toggle-all\"></label>\n      <ul id=\"todo-list\">\n        <template id=\"__e-4\"></template>\n      </ul>\n    </section>\n    <template id=\"__e-9\"></template>\n  </section>\n  <footer id=\"info\">\n    <p>Double-click to edit a todo.</p>\n    <p>Credits: the <a href=\"http://www.dartlang.org\">Dart</a> team.</p>\n    <p>\n      Learn more about\n      <a href=\"https://www.dartlang.org/articles/dart-web-components/\">Dart + Web Components</a>\n      or\n      <a href=\"https://github.com/dart-lang/web-ui/tree/master/example/todomvc\">view the source</a>.\n    </p>\n    <p>Part of <a href=\"http://todomvc.com\">TodoMVC</a>.</p>\n  </footer>\n");
});
Isolate.$lazy($, "__html1", "EditableLabel___html1", "get$EditableLabel___html1", function() {
  return $.Element_Element$html("<label class=\"edit-label\"></label>");
});
Isolate.$lazy($, "__html2", "EditableLabel___html2", "get$EditableLabel___html2", function() {
  return $.Element_Element$html("<form>\n        <input id=\"edit\" class=\"edit \">\n      </form>");
});
Isolate.$lazy($, "__shadowTemplate", "EditableLabel___shadowTemplate", "get$EditableLabel___shadowTemplate", function() {
  return $.DocumentFragment_DocumentFragment$html("    <template id=\"__e-15\"></template>\n    <template id=\"__e-17\"></template>\n  ");
});
Isolate.$lazy($, "viewModel", "viewModel", "get$viewModel", function() {
  return $.ViewModel$();
});
Isolate.$lazy($, "app", "app", "get$app", function() {
  return $.AppModel$();
});
Isolate.$lazy($, "__shadowTemplate", "RouterOptions___shadowTemplate", "get$RouterOptions___shadowTemplate", function() {
  return $.DocumentFragment_DocumentFragment$html("<content></content>");
});
Isolate.$lazy($, "_css", "TodoRow__css", "get$TodoRow__css", function() {
  return $.makeLiteralMap([".toggle", "todo-row_toggle", ".todo-item", "todo-row_todo-item", ".editing", "todo-row_editing", ".destroy", "todo-row_destroy", ".completed", "todo-row_completed", "#todo-item", "todo-row_todo-item"]);
});
Isolate.$lazy($, "__shadowTemplate", "TodoRow___shadowTemplate", "get$TodoRow___shadowTemplate", function() {
  return $.DocumentFragment_DocumentFragment$html("    \n    <div class=\"todo-row_todo-item\" id=\"__e-12\">\n      <input class=\"todo-row_toggle\" type=\"checkbox\" id=\"__e-10\">\n      <editable-label id=\"label\"></editable-label>\n      <button class=\"todo-row_destroy\" id=\"__e-11\"></button>\n    </div>\n  ");
});
Isolate.$lazy($, "onCircularNotifyLimit", "onCircularNotifyLimit", "get$onCircularNotifyLimit", function() {
  return new $.anon();
});
var $ = null;
Isolate = Isolate.$finishIsolateConstructor(Isolate);
var $ = new Isolate();
// Native classes
$.$defineNativeClass = function(cls, desc) {
  var fields = desc[''];
  var fields_array = fields ? fields.split(',') : [];
  for (var i = 0; i < fields_array.length; i++) {
    $.$generateAccessor(fields_array[i], desc);
  }
  var hasOwnProperty = Object.prototype.hasOwnProperty;
  for (var method in desc) {
    if (method) {
      if (hasOwnProperty.call(desc, method)) {
        $.dynamicFunction(method)[cls] = desc[method];
      }
    }
  }
};

(function(table) {
  for (var key in table)
    $.defineProperty(Object.prototype, key, table[key]);
})({
  $isJavaScriptIndexingBehavior: function() {
    return false;
  },
  $isCollection: function() {
    return false;
  },
  $isIterable: function() {
    return false;
  },
  $isList: function() {
    return false;
  },
  $isElement: function() {
    return false;
  },
  $isLocation: function() {
    return false;
  },
  $isNode: function() {
    return false;
  },
  $isShadowRoot: function() {
    return false;
  },
  $isText: function() {
    return false;
  },
  toString$0: function(_) {
    return $.toStringForNativeObject(this);
  },
  get$hashCode: function(_) {
    return $.hashCodeForNativeObject(this);
  },
  $eq: function(_, a) {
    return this === a;
  }
});

$.$defineNativeClass("Worker", {
  get$id: function() {
    return this.id;
  },
  set$id: function(i) {
    this.id = i;
  },
  set$onmessage: function(f) {
    this.onmessage = f;
  },
  postMessage$1: function(msg) {
    this.postMessage(msg);
  },
  terminate$0: function() {
    this.terminate();
  }
});

$.$defineNativeClass("HTMLAnchorElement", {"": "hash>,type>",
  toString$0: function(_) {
    return this.toString();
  }
});

$.$defineNativeClass("HTMLAreaElement", {"": "hash>"});

$.$defineNativeClass("HTMLBodyElement", {
  get$onBlur: function() {
    return $.CONSTANT17.forTarget$1(this);
  },
  get$onHashChange: function() {
    return $.CONSTANT9.forTarget$1(this);
  },
  get$onPopState: function() {
    return $.CONSTANT7.forTarget$1(this);
  }
});

$.$defineNativeClass("HTMLButtonElement", {"": "type>,value="});

$.$defineNativeClass("CharacterData", {"": "length>"});

$.$defineNativeClass("CSSStyleDeclaration", {"": "length>",
  getPropertyValue$1: function(propertyName) {
    var propValue = this.getPropertyValue(propertyName);
    return propValue != null ? propValue : "";
  },
  setProperty$3: function(propertyName, value, priority) {
    var exception;
    try {
      this.setProperty(propertyName, value, priority);
      if (!!this.setAttribute)
        this.setAttribute(propertyName, value);
    } catch (exception) {
      $.unwrapException(exception);
    }

  },
  get$clear: function(_) {
    return this.getPropertyValue$1("clear");
  },
  clear$0: function($receiver) {
    return this.get$clear($receiver).call$0();
  },
  get$left: function() {
    return this.getPropertyValue$1("left");
  },
  set$left: function(value) {
    this.setProperty$3("left", value, "");
  },
  get$right: function() {
    return this.getPropertyValue$1("right");
  },
  set$right: function(value) {
    this.setProperty$3("right", value, "");
  }
});

$.$defineNativeClass("Document", {"": "$$dom_body:body~,$$dom_head:head~",
  get$onBlur: function() {
    return $.CONSTANT17.forTarget$1(this);
  },
  get$onChange: function() {
    return $.CONSTANT21.forTarget$1(this);
  },
  get$onClick: function() {
    return $.CONSTANT14.forTarget$1(this);
  },
  get$onDoubleClick: function() {
    return $.CONSTANT18.forTarget$1(this);
  },
  get$onKeyUp: function() {
    return $.CONSTANT16.forTarget$1(this);
  },
  get$onSubmit: function() {
    return $.CONSTANT20.forTarget$1(this);
  },
  query$1: function(selectors) {
    if ($.RegExp_RegExp("^#[_a-zA-Z]\\w*$", true, false).hasMatch$1(selectors))
      return this.getElementById($.substring$1$s(selectors, 1));
    return this.querySelector(selectors);
  },
  queryAll$1: function(selectors) {
    var mutableMatches, len, copyOfMatches, t1, t2, i, t3;
    if ($.RegExp_RegExp("^\\[name=[\"'][^'\"]+['\"]\\]$", true, false).hasMatch$1(selectors)) {
      mutableMatches = this.getElementsByName($.CONSTANT1.substring$2(selectors, 7, selectors.length - 2));
      if (typeof mutableMatches !== "string" && (typeof mutableMatches !== "object" || mutableMatches === null || mutableMatches.constructor !== Array && !mutableMatches.$isJavaScriptIndexingBehavior()))
        return this.queryAll$1$bailout(1, mutableMatches);
      len = mutableMatches.length;
      copyOfMatches = $.List_List(len, $.Element);
      $.setRuntimeTypeInfo(copyOfMatches, [$.Element]);
      for (t1 = mutableMatches.length, t2 = copyOfMatches.length, i = 0; i < len; ++i) {
        if (i >= t1)
          throw $.ioore(i);
        t3 = mutableMatches[i];
        if (i >= t2)
          throw $.ioore(i);
        copyOfMatches[i] = t3;
      }
      return $._FrozenElementList$_wrap(copyOfMatches);
    } else if ($.RegExp_RegExp("^[*a-zA-Z0-9]+$", true, false).hasMatch$1(selectors)) {
      mutableMatches = this.getElementsByTagName(selectors);
      if (typeof mutableMatches !== "string" && (typeof mutableMatches !== "object" || mutableMatches === null || mutableMatches.constructor !== Array && !mutableMatches.$isJavaScriptIndexingBehavior()))
        return this.queryAll$1$bailout(3, mutableMatches);
      len = mutableMatches.length;
      copyOfMatches = $.List_List(len, $.Element);
      $.setRuntimeTypeInfo(copyOfMatches, [$.Element]);
      for (t1 = mutableMatches.length, t2 = copyOfMatches.length, i = 0; i < len; ++i) {
        if (i >= t1)
          throw $.ioore(i);
        t3 = mutableMatches[i];
        if (i >= t2)
          throw $.ioore(i);
        copyOfMatches[i] = t3;
      }
      return $._FrozenElementList$_wrap(copyOfMatches);
    } else
      return $._FrozenElementList$_wrap(this.querySelectorAll(selectors));
  },
  queryAll$1$bailout: function(state0, mutableMatches, t2, len) {
    switch (state0) {
      case 0:
      default:
        var copyOfMatches, i, t1;
        if (state0 === 2 || state0 === 1 || state0 === 0 && $.RegExp_RegExp("^\\[name=[\"'][^'\"]+['\"]\\]$", true, false).hasMatch$1(selectors))
          switch (state0) {
            case 0:
              mutableMatches = this.getElementsByName($.CONSTANT1.substring$2(selectors, 7, selectors.length - 2));
            case 1:
              state0 = 0;
              t2 = $.getInterceptor$as(mutableMatches);
              len = t2.get$length(mutableMatches);
            case 2:
              state0 = 0;
              copyOfMatches = $.List_List(len, $.Element);
              $.setRuntimeTypeInfo(copyOfMatches, [$.Element]);
              for (i = 0; $.CONSTANT2.$lt(i, len); ++i) {
                t1 = t2.$index(mutableMatches, i);
                if (i >= copyOfMatches.length)
                  throw $.ioore(i);
                copyOfMatches[i] = t1;
              }
              return $._FrozenElementList$_wrap(copyOfMatches);
          }
        else
          switch (state0) {
            case 0:
            default:
              if (state0 === 4 || state0 === 3 || state0 === 0 && $.RegExp_RegExp("^[*a-zA-Z0-9]+$", true, false).hasMatch$1(selectors))
                switch (state0) {
                  case 0:
                    mutableMatches = this.getElementsByTagName(selectors);
                  case 3:
                    state0 = 0;
                    t2 = $.getInterceptor$as(mutableMatches);
                    len = t2.get$length(mutableMatches);
                  case 4:
                    state0 = 0;
                    copyOfMatches = $.List_List(len, $.Element);
                    $.setRuntimeTypeInfo(copyOfMatches, [$.Element]);
                    for (i = 0; $.CONSTANT2.$lt(i, len); ++i) {
                      t1 = t2.$index(mutableMatches, i);
                      if (i >= copyOfMatches.length)
                        throw $.ioore(i);
                      copyOfMatches[i] = t1;
                    }
                    return $._FrozenElementList$_wrap(copyOfMatches);
                }
              else
                return $._FrozenElementList$_wrap(this.querySelectorAll(selectors));
          }
    }
  }
});

$.$defineNativeClass("DocumentFragment", {
  get$children: function() {
    if (this._children == null)
      this._children = $.FilteredElementList$(this);
    return this._children;
  },
  query$1: function(selectors) {
    return this.querySelector(selectors);
  },
  queryAll$1: function(selectors) {
    return $._FrozenElementList$_wrap(this.querySelectorAll(selectors));
  },
  set$innerHtml: function(value) {
    if (Object.getPrototypeOf(this).hasOwnProperty("set$innerHtml")) {
      var t1, e, nodes;
      t1 = this.get$nodes();
      t1.clear$0(t1);
      e = $.Element_Element$tag("div");
      e.set$innerHtml(value);
      nodes = $.List_List$from(e.get$nodes(), true, null);
      t1 = this.get$nodes();
      t1.addAll$1(t1, nodes);
    } else
      return Object.prototype.set$innerHtml.call(this, value);
  }
});

$.$defineNativeClass("DOMException", {
  toString$0: function(_) {
    return this.toString();
  }
});

$.$defineNativeClass("Element", {"": "xtag=,$$dom_children:children~,id>,innerHtml:innerHTML|,$$dom_attributes:attributes~,$$dom_className:className},$$dom_lastElementChild:lastElementChild~,tagName>",
  get$attributes: function() {
    return $._ElementAttributeMap$(this);
  },
  get$children: function() {
    if (Object.getPrototypeOf(this).hasOwnProperty("get$children")) {
      return $._ChildrenElementList$_wrap(this);
    } else
      return Object.prototype.get$children.call(this);
  },
  query$1: function(selectors) {
    return this.querySelector(selectors);
  },
  queryAll$1: function(selectors) {
    return $._FrozenElementList$_wrap(this.querySelectorAll(selectors));
  },
  get$classes: function() {
    if (Object.getPrototypeOf(this).hasOwnProperty("get$classes")) {
      return $._ElementCssClassSet$(this);
    } else
      return Object.prototype.get$classes.call(this);
  },
  matches$1: function(selectors) {
    if (!!this.matches)
      return this.matches(selectors);
    else if (!!this.webkitMatchesSelector)
      return this.webkitMatchesSelector(selectors);
    else if (!!this.mozMatchesSelector)
      return this.mozMatchesSelector(selectors);
    else if (!!this.msMatchesSelector)
      return this.msMatchesSelector(selectors);
    throw $.$$throw($.UnsupportedError$("Not supported on this platform"));
  },
  focus$0: function() {
    return this.focus();
  },
  $$dom_getAttribute$1: function($name) {
    return this.getAttribute($name);
  },
  $$dom_removeAttribute$1: function($name) {
    return this.removeAttribute($name);
  },
  createShadowRoot$0: function() {
    return this.webkitCreateShadowRoot();
  },
  get$onBlur: function() {
    if (Object.getPrototypeOf(this).hasOwnProperty("get$onBlur")) {
      return $.CONSTANT17.forTarget$1(this);
    } else
      return Object.prototype.get$onBlur.call(this);
  },
  get$onChange: function() {
    return $.CONSTANT21.forTarget$1(this);
  },
  get$onClick: function() {
    return $.CONSTANT14.forTarget$1(this);
  },
  get$onDoubleClick: function() {
    return $.CONSTANT18.forTarget$1(this);
  },
  get$onKeyUp: function() {
    return $.CONSTANT16.forTarget$1(this);
  },
  get$onSubmit: function() {
    return $.CONSTANT20.forTarget$1(this);
  },
  $isElement: function() {
    return true;
  },
  $asElement: function() {
    return null;
  }
});

$.$defineNativeClass("HTMLEmbedElement", {"": "type>"});

$.$defineNativeClass("Event", {"": "type>",
  preventDefault$0: function() {
    return this.preventDefault();
  }
});

$.$defineNativeClass("EventException", {
  toString$0: function(_) {
    return this.toString();
  }
});

$.$defineNativeClass("EventTarget", {
  $$dom_addEventListener$3: function(type, listener, useCapture) {
    if (Object.getPrototypeOf(this).hasOwnProperty("$$dom_addEventListener$3")) {
      return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
    } else
      return Object.prototype.$$dom_addEventListener$3.call(this, type, listener, useCapture);
  },
  $$dom_removeEventListener$3: function(type, listener, useCapture) {
    if (Object.getPrototypeOf(this).hasOwnProperty("$$dom_removeEventListener$3")) {
      return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
    } else
      return Object.prototype.$$dom_removeEventListener$3.call(this, type, listener, useCapture);
  }
});

$.$defineNativeClass("HTMLFieldSetElement", {"": "type>"});

$.$defineNativeClass("FileException", {
  toString$0: function(_) {
    return this.toString();
  }
});

$.$defineNativeClass("HTMLFormElement", {"": "length>",
  reset$0: function() {
    return this.reset();
  }
});

$.$defineNativeClass("HTMLCollection", {
  get$length: function(_) {
    return this.length;
  },
  $index: function(_, index) {
    return this[index];
  },
  $indexSet: function(_, index, value) {
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function(_) {
    return $.FixedSizeListIterator$(this, $.Node);
  },
  contains$1: function(_, element) {
    return $.IterableMixinWorkaround_contains(this, element);
  },
  get$contains: function(receiver) {
    return new $.BoundClosure$i1(this, "contains$1", receiver);
  },
  forEach$1: function(_, f) {
    var t1;
    for (t1 = this.get$iterator(this); t1.moveNext$0();)
      f.call$1(t1.get$current());
    return;
  },
  map$1: function(_, f) {
    return $.MappedListIterable$(this, f, null, null);
  },
  where$1: function(_, f) {
    return $.WhereIterable$(this, f, null);
  },
  every$1: function(_, f) {
    return $.IterableMixinWorkaround_every(this, f);
  },
  toList$1$growable: function(_, growable) {
    var t1 = $.List_List$from(this, growable, $.Node);
    $.setRuntimeTypeInfo(t1, [$.Node]);
    return t1;
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  toSet$0: function(_) {
    var t1 = $.HashSet$($.Node);
    t1.addAll$1(t1, this);
    return t1;
  },
  get$isEmpty: function(_) {
    return this.get$length(this) === 0;
  },
  skip$1: function(_, n) {
    return $.IterableMixinWorkaround_skipList(this, n);
  },
  elementAt$1: function(_, index) {
    return this[index];
  },
  add$1: function(_, value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(_, iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  set$length: function(_, value) {
    throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
  },
  clear$0: function(_) {
    throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
  },
  indexOf$2: function(_, element, start) {
    return $.Lists_indexOf(this, element, start, this.get$length(this));
  },
  indexOf$1: function($receiver, element) {
    return this.indexOf$2($receiver, element, 0);
  },
  get$last: function(_) {
    if (this.get$length(this) > 0)
      return this.$index(this, this.get$length(this) - 1);
    throw $.$$throw($.StateError$("No elements"));
  },
  removeLast$0: function(_) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(_, object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  get$remove: function(receiver) {
    return new $.BoundClosure$i1(this, "remove$1", receiver);
  },
  removeAll$1: function(_, elements) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeMatching$1: function(_, test) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  setRange$4: function(_, start, rangeLength, from, startFrom) {
    throw $.$$throw($.UnsupportedError$("Cannot setRange on immutable List."));
  },
  removeRange$2: function(_, start, rangeLength) {
    throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
  },
  $isList: function() {
    return true;
  },
  $asList: function() {
    return function () { return [$.Node]; };
  },
  $isCollection: function() {
    return true;
  },
  $asCollection: function() {
    return function () { return [$.Node]; };
  },
  $isIterable: function() {
    return true;
  },
  $asIterable: function() {
    return function () { return [$.Node]; };
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  },
  $asJavaScriptIndexingBehavior: function() {
    return null;
  }
});

$.$defineNativeClass("HTMLDocument", {
  get$body: function() {
    return $.document().get$$$dom_body();
  },
  get$head: function() {
    return $.document().get$$$dom_head();
  }
});

$.$defineNativeClass("XMLHttpRequestException", {
  toString$0: function(_) {
    return this.toString();
  }
});

$.$defineNativeClass("HTMLImageElement", {
  complete$1: function(arg0) {
    return this.complete.call$1(arg0);
  }
});

$.$defineNativeClass("HTMLInputElement", {"": "checked=,pattern>,type>,value=",
  $isElement: function() {
    return true;
  },
  $asElement: function() {
    return null;
  },
  $isNode: function() {
    return true;
  },
  $asNode: function() {
    return null;
  }
});

$.$defineNativeClass("KeyboardEvent", {
  get$keyCode: function() {
    return this.keyCode;
  }
});

$.$defineNativeClass("HTMLKeygenElement", {"": "type>"});

$.$defineNativeClass("HTMLLIElement", {"": "type>,value="});

$.$defineNativeClass("HTMLLinkElement", {"": "type>"});

$.$defineNativeClass("Location", {"": "hash>",
  toString$0: function(_) {
    return this.toString();
  },
  $isLocation: function() {
    return true;
  },
  $asLocation: function() {
    return null;
  }
});

$.$defineNativeClass("HTMLMediaElement", {"": "error>",
  loop$3: function(arg0, arg1, arg2) {
    return this.loop.call$3(arg0, arg1, arg2);
  }
});

$.$defineNativeClass("MessageEvent", {"": "ports>"});

$.$defineNativeClass("HTMLMeterElement", {"": "value="});

$.$defineNativeClass("MutationEvent", {"": "newValue>"});

$.$defineNativeClass("Navigator", {"": "userAgent>"});

$.$defineNativeClass("Node", {"": "$$dom_childNodes:childNodes~,$$dom_localName:localName~,$$dom_namespaceUri:namespaceURI~,nextNode:nextSibling~,parent:parentElement~,parentNode>,text:textContent|",
  get$nodes: function() {
    return $._ChildNodeListLazy$(this);
  },
  remove$0: function(_) {
    var t1 = this.parentNode;
    if (t1 != null)
      t1.$$dom_removeChild$1(this);
  },
  get$remove: function(receiver) {
    return new $.BoundClosure$i0(this, "remove$0", receiver);
  },
  replaceWith$1: function(otherNode) {
    var $parent, exception;
    try {
      $parent = this.parentNode;
      $parent.$$dom_replaceChild$2(otherNode, this);
    } catch (exception) {
      $.unwrapException(exception);
    }

    return this;
  },
  $$dom_addEventListener$3: function(type, listener, useCapture) {
    return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  $$dom_appendChild$1: function(newChild) {
    return this.appendChild(newChild);
  },
  clone$1: function(deep) {
    if (Object.getPrototypeOf(this).hasOwnProperty("clone$1")) {
      return this.cloneNode(deep);
    } else
      return Object.prototype.clone$1.call(this, deep);
  },
  contains$1: function(_, other) {
    return this.contains(other);
  },
  get$contains: function(receiver) {
    return new $.BoundClosure$i1(this, "contains$1", receiver);
  },
  insertBefore$2: function(newChild, refChild) {
    return this.insertBefore(newChild,refChild);
  },
  $$dom_removeChild$1: function(oldChild) {
    return this.removeChild(oldChild);
  },
  $$dom_removeEventListener$3: function(type, listener, useCapture) {
    return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  $$dom_replaceChild$2: function(newChild, oldChild) {
    return this.replaceChild(newChild,oldChild);
  },
  $isNode: function() {
    return true;
  },
  $asNode: function() {
    return null;
  }
});

$.$defineNativeClass("NodeList", {
  get$length: function(_) {
    return this.length;
  },
  $index: function(_, index) {
    return this[index];
  },
  $indexSet: function(_, index, value) {
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function(_) {
    return $.FixedSizeListIterator$(this, $.Node);
  },
  contains$1: function(_, element) {
    return $.IterableMixinWorkaround_contains(this, element);
  },
  get$contains: function(receiver) {
    return new $.BoundClosure$i1(this, "contains$1", receiver);
  },
  forEach$1: function(_, f) {
    var t1;
    for (t1 = this.get$iterator(this); t1.moveNext$0();)
      f.call$1(t1.get$current());
    return;
  },
  map$1: function(_, f) {
    return $.MappedListIterable$(this, f, null, null);
  },
  where$1: function(_, f) {
    return $.WhereIterable$(this, f, null);
  },
  every$1: function(_, f) {
    return $.IterableMixinWorkaround_every(this, f);
  },
  toList$1$growable: function(_, growable) {
    var t1 = $.List_List$from(this, growable, $.Node);
    $.setRuntimeTypeInfo(t1, [$.Node]);
    return t1;
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  toSet$0: function(_) {
    var t1 = $.HashSet$($.Node);
    t1.addAll$1(t1, this);
    return t1;
  },
  get$isEmpty: function(_) {
    return this.get$length(this) === 0;
  },
  skip$1: function(_, n) {
    return $.IterableMixinWorkaround_skipList(this, n);
  },
  elementAt$1: function(_, index) {
    return this[index];
  },
  add$1: function(_, value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(_, iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  set$length: function(_, value) {
    throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
  },
  clear$0: function(_) {
    throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
  },
  indexOf$2: function(_, element, start) {
    return $.Lists_indexOf(this, element, start, this.get$length(this));
  },
  indexOf$1: function($receiver, element) {
    return this.indexOf$2($receiver, element, 0);
  },
  get$last: function(_) {
    if (this.get$length(this) > 0)
      return this.$index(this, this.get$length(this) - 1);
    throw $.$$throw($.StateError$("No elements"));
  },
  removeLast$0: function(_) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(_, object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  get$remove: function(receiver) {
    return new $.BoundClosure$i1(this, "remove$1", receiver);
  },
  removeAll$1: function(_, elements) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeMatching$1: function(_, test) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  setRange$4: function(_, start, rangeLength, from, startFrom) {
    throw $.$$throw($.UnsupportedError$("Cannot setRange on immutable List."));
  },
  removeRange$2: function(_, start, rangeLength) {
    throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
  },
  $isList: function() {
    return true;
  },
  $asList: function() {
    return function () { return [$.Node]; };
  },
  $isCollection: function() {
    return true;
  },
  $asCollection: function() {
    return function () { return [$.Node]; };
  },
  $isIterable: function() {
    return true;
  },
  $asIterable: function() {
    return function () { return [$.Node]; };
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  },
  $asJavaScriptIndexingBehavior: function() {
    return null;
  }
});

$.$defineNativeClass("HTMLOListElement", {"": "type>"});

$.$defineNativeClass("HTMLObjectElement", {"": "type>"});

$.$defineNativeClass("HTMLOptionElement", {"": "value="});

$.$defineNativeClass("HTMLOutputElement", {"": "type>,value="});

$.$defineNativeClass("HTMLParamElement", {"": "value="});

$.$defineNativeClass("HTMLProgressElement", {"": "value="});

$.$defineNativeClass("RadioNodeList", {"": "value="});

$.$defineNativeClass("RangeException", {
  toString$0: function(_) {
    return this.toString();
  }
});

$.$defineNativeClass("HTMLScriptElement", {"": "type>"});

$.$defineNativeClass("HTMLSelectElement", {"": "length>,type>,value=",
  set$length: function(receiver, v) {
    this.length = v;
  }
});

$.$defineNativeClass("ShadowRoot", {"": "applyAuthorStyles<,innerHtml:innerHTML|",
  clone$1: function(deep) {
    return this.cloneNode(deep);
  },
  $isShadowRoot: function() {
    return true;
  },
  $asShadowRoot: function() {
    return null;
  }
});

$.$defineNativeClass("HTMLSourceElement", {"": "type>"});

$.$defineNativeClass("SpeechRecognitionError", {"": "error>"});

$.$defineNativeClass("StorageEvent", {"": "key>,newValue>,oldValue>"});

$.$defineNativeClass("HTMLStyleElement", {"": "type>"});

$.$defineNativeClass("HTMLTableElement", {"": "caption>,tFoot>,tHead>",
  get$tBodies: function() {
    return $._WrappedList$(this.tBodies, $.TableSectionElement);
  },
  get$rows: function() {
    return $._WrappedList$(this.rows, $.TableRowElement);
  }
});

$.$defineNativeClass("HTMLTableRowElement", {
  get$cells: function() {
    return $._WrappedList$(this.cells, $.TableCellElement);
  }
});

$.$defineNativeClass("HTMLTableSectionElement", {
  get$rows: function() {
    return $._WrappedList$(this.rows, $.TableRowElement);
  }
});

$.$defineNativeClass("Text", {
  $isText: function() {
    return true;
  },
  $asText: function() {
    return null;
  }
});

$.$defineNativeClass("HTMLTextAreaElement", {"": "rows>,type>,value="});

$.$defineNativeClass("Uint8Array", {
  get$length: function(_) {
    if (Object.getPrototypeOf(this).hasOwnProperty("get$length")) {
      return this.length;
    } else
      return Object.prototype.get$length.call(this, _);
  },
  $index: function(_, index) {
    if (Object.getPrototypeOf(this).hasOwnProperty("$index")) {
      return this[index];
    } else
      return Object.prototype.$index.call(this, _, index);
  },
  $indexSet: function(_, index, value) {
    if (Object.getPrototypeOf(this).hasOwnProperty("$indexSet")) {
      this[index] = value;
    } else
      return Object.prototype.$indexSet.call(this, _, index, value);
  },
  get$iterator: function(_) {
    if (Object.getPrototypeOf(this).hasOwnProperty("get$iterator")) {
      return $.FixedSizeListIterator$(this, $.$int);
    } else
      return Object.prototype.get$iterator.call(this, _);
  },
  contains$1: function(_, element) {
    if (Object.getPrototypeOf(this).hasOwnProperty("contains$1")) {
      return $.IterableMixinWorkaround_contains(this, element);
    } else
      return Object.prototype.contains$1.call(this, _, element);
  },
  get$contains: function(receiver) {
    return new $.BoundClosure$i1(this, "contains$1", receiver);
  },
  forEach$1: function(_, f) {
    if (Object.getPrototypeOf(this).hasOwnProperty("forEach$1")) {
      var t1;
      for (t1 = this.get$iterator(this); t1.moveNext$0();)
        f.call$1(t1.get$current());
      return;
    } else
      return Object.prototype.forEach$1.call(this, _, f);
  },
  map$1: function(_, f) {
    if (Object.getPrototypeOf(this).hasOwnProperty("map$1")) {
      return $.MappedListIterable$(this, f, null, null);
    } else
      return Object.prototype.map$1.call(this, _, f);
  },
  where$1: function(_, f) {
    if (Object.getPrototypeOf(this).hasOwnProperty("where$1")) {
      return $.WhereIterable$(this, f, null);
    } else
      return Object.prototype.where$1.call(this, _, f);
  },
  every$1: function(_, f) {
    if (Object.getPrototypeOf(this).hasOwnProperty("every$1")) {
      return $.IterableMixinWorkaround_every(this, f);
    } else
      return Object.prototype.every$1.call(this, _, f);
  },
  toList$1$growable: function(_, growable) {
    if (Object.getPrototypeOf(this).hasOwnProperty("toList$1$growable")) {
      var t1 = $.List_List$from(this, growable, $.$int);
      $.setRuntimeTypeInfo(t1, [$.$int]);
      return t1;
    } else
      return Object.prototype.toList$1$growable.call(this, _, growable);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  toSet$0: function(_) {
    if (Object.getPrototypeOf(this).hasOwnProperty("toSet$0")) {
      var t1 = $.HashSet$($.$int);
      t1.addAll$1(t1, this);
      return t1;
    } else
      return Object.prototype.toSet$0.call(this, _);
  },
  get$isEmpty: function(_) {
    if (Object.getPrototypeOf(this).hasOwnProperty("get$isEmpty")) {
      return this.get$length(this) === 0;
    } else
      return Object.prototype.get$isEmpty.call(this, _);
  },
  skip$1: function(_, n) {
    if (Object.getPrototypeOf(this).hasOwnProperty("skip$1")) {
      return $.IterableMixinWorkaround_skipList(this, n);
    } else
      return Object.prototype.skip$1.call(this, _, n);
  },
  elementAt$1: function(_, index) {
    if (Object.getPrototypeOf(this).hasOwnProperty("elementAt$1")) {
      return this.$index(this, index);
    } else
      return Object.prototype.elementAt$1.call(this, _, index);
  },
  add$1: function(_, value) {
    if (Object.getPrototypeOf(this).hasOwnProperty("add$1")) {
      throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
    } else
      return Object.prototype.add$1.call(this, _, value);
  },
  addAll$1: function(_, iterable) {
    if (Object.getPrototypeOf(this).hasOwnProperty("addAll$1")) {
      throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
    } else
      return Object.prototype.addAll$1.call(this, _, iterable);
  },
  set$length: function(_, value) {
    if (Object.getPrototypeOf(this).hasOwnProperty("set$length")) {
      throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
    } else
      return Object.prototype.set$length.call(this, _, value);
  },
  clear$0: function(_) {
    if (Object.getPrototypeOf(this).hasOwnProperty("clear$0")) {
      throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
    } else
      return Object.prototype.clear$0.call(this, _);
  },
  indexOf$2: function(_, element, start) {
    if (Object.getPrototypeOf(this).hasOwnProperty("indexOf$2")) {
      return $.Lists_indexOf(this, element, start, this.get$length(this));
    } else
      return Object.prototype.indexOf$2.call(this, _, element, start);
  },
  indexOf$1: function($receiver, element) {
    return this.indexOf$2($receiver, element, 0);
  },
  get$last: function(_) {
    if (Object.getPrototypeOf(this).hasOwnProperty("get$last")) {
      if (this.get$length(this) > 0)
        return this.$index(this, this.get$length(this) - 1);
      throw $.$$throw($.StateError$("No elements"));
    } else
      return Object.prototype.get$last.call(this, _);
  },
  removeLast$0: function(_) {
    if (Object.getPrototypeOf(this).hasOwnProperty("removeLast$0")) {
      throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
    } else
      return Object.prototype.removeLast$0.call(this, _);
  },
  remove$1: function(_, object) {
    if (Object.getPrototypeOf(this).hasOwnProperty("remove$1")) {
      throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
    } else
      return Object.prototype.remove$1.call(this, _, object);
  },
  get$remove: function(receiver) {
    return new $.BoundClosure$i1(this, "remove$1", receiver);
  },
  removeAll$1: function(_, elements) {
    if (Object.getPrototypeOf(this).hasOwnProperty("removeAll$1")) {
      throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
    } else
      return Object.prototype.removeAll$1.call(this, _, elements);
  },
  removeMatching$1: function(_, test) {
    if (Object.getPrototypeOf(this).hasOwnProperty("removeMatching$1")) {
      throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
    } else
      return Object.prototype.removeMatching$1.call(this, _, test);
  },
  setRange$4: function(_, start, rangeLength, from, startFrom) {
    if (Object.getPrototypeOf(this).hasOwnProperty("setRange$4")) {
      throw $.$$throw($.UnsupportedError$("Cannot setRange on immutable List."));
    } else
      return Object.prototype.setRange$4.call(this, _, start, rangeLength, from, startFrom);
  },
  removeRange$2: function(_, start, rangeLength) {
    if (Object.getPrototypeOf(this).hasOwnProperty("removeRange$2")) {
      throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
    } else
      return Object.prototype.removeRange$2.call(this, _, start, rangeLength);
  },
  $isList: function() {
    return true;
  },
  $asList: function() {
    return function () { return [$.$int]; };
  },
  $isCollection: function() {
    return true;
  },
  $asCollection: function() {
    return function () { return [$.$int]; };
  },
  $isIterable: function() {
    return true;
  },
  $asIterable: function() {
    return function () { return [$.$int]; };
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  },
  $asJavaScriptIndexingBehavior: function() {
    return null;
  }
});

$.$defineNativeClass("Uint8ClampedArray", {
  $index: function(_, index) {
    return this[index];
  },
  $indexSet: function(_, index, value) {
    this[index] = value;
  },
  get$iterator: function(_) {
    return $.FixedSizeListIterator$(this, $.$int);
  },
  contains$1: function(_, element) {
    return $.IterableMixinWorkaround_contains(this, element);
  },
  get$contains: function(receiver) {
    return new $.BoundClosure$i1(this, "contains$1", receiver);
  },
  forEach$1: function(_, f) {
    var t1;
    for (t1 = this.get$iterator(this); t1.moveNext$0();)
      f.call$1(t1.get$current());
    return;
  },
  map$1: function(_, f) {
    return $.MappedListIterable$(this, f, null, null);
  },
  where$1: function(_, f) {
    return $.WhereIterable$(this, f, null);
  },
  every$1: function(_, f) {
    return $.IterableMixinWorkaround_every(this, f);
  },
  toList$1$growable: function(_, growable) {
    var t1 = $.List_List$from(this, growable, $.$int);
    $.setRuntimeTypeInfo(t1, [$.$int]);
    return t1;
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  toSet$0: function(_) {
    var t1 = $.HashSet$($.$int);
    t1.addAll$1(t1, this);
    return t1;
  },
  get$isEmpty: function(_) {
    return this.get$length(this) === 0;
  },
  skip$1: function(_, n) {
    return $.IterableMixinWorkaround_skipList(this, n);
  },
  elementAt$1: function(_, index) {
    return this[index];
  },
  add$1: function(_, value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(_, iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  set$length: function(_, value) {
    throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
  },
  clear$0: function(_) {
    throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
  },
  indexOf$2: function(_, element, start) {
    return $.Lists_indexOf(this, element, start, this.get$length(this));
  },
  indexOf$1: function($receiver, element) {
    return this.indexOf$2($receiver, element, 0);
  },
  get$last: function(_) {
    if (this.get$length(this) > 0)
      return this.$index(this, this.get$length(this) - 1);
    throw $.$$throw($.StateError$("No elements"));
  },
  removeLast$0: function(_) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(_, object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  get$remove: function(receiver) {
    return new $.BoundClosure$i1(this, "remove$1", receiver);
  },
  removeAll$1: function(_, elements) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeMatching$1: function(_, test) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  setRange$4: function(_, start, rangeLength, from, startFrom) {
    throw $.$$throw($.UnsupportedError$("Cannot setRange on immutable List."));
  },
  removeRange$2: function(_, start, rangeLength) {
    throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
  },
  $isList: function() {
    return true;
  },
  $asList: function() {
    return function () { return [$.$int]; };
  },
  $isCollection: function() {
    return true;
  },
  $asCollection: function() {
    return function () { return [$.$int]; };
  },
  $isIterable: function() {
    return true;
  },
  $asIterable: function() {
    return function () { return [$.$int]; };
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  },
  $asJavaScriptIndexingBehavior: function() {
    return null;
  }
});

$.$defineNativeClass("DOMWindow", {"": "navigator>",
  get$location: function() {
    var result = this.get$_location();
    if ($.Window__isDartLocation(result))
      return result;
    if (null == this._location_wrapper)
      this._location_wrapper = $._LocationWrapper$(result);
    return this._location_wrapper;
  },
  get$_location: function() {
    return this.location;
  },
  get$parent: function() {
    return $._convertNativeToDart_Window(this.parent);
  },
  $$dom_addEventListener$3: function(type, listener, useCapture) {
    return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  close$0: function() {
    return this.close();
  },
  $$dom_removeEventListener$3: function(type, listener, useCapture) {
    return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  get$onBlur: function() {
    return $.CONSTANT17.forTarget$1(this);
  },
  get$onChange: function() {
    return $.CONSTANT21.forTarget$1(this);
  },
  get$onClick: function() {
    return $.CONSTANT14.forTarget$1(this);
  },
  get$onDoubleClick: function() {
    return $.CONSTANT18.forTarget$1(this);
  },
  get$onHashChange: function() {
    return $.CONSTANT9.forTarget$1(this);
  },
  get$onKeyUp: function() {
    return $.CONSTANT16.forTarget$1(this);
  },
  get$onPopState: function() {
    return $.CONSTANT7.forTarget$1(this);
  },
  get$onSubmit: function() {
    return $.CONSTANT20.forTarget$1(this);
  }
});

$.$defineNativeClass("XPathException", {
  toString$0: function(_) {
    return this.toString();
  }
});

$.$defineNativeClass("NamedNodeMap", {
  get$length: function(_) {
    return this.length;
  },
  $index: function(_, index) {
    return this[index];
  },
  $indexSet: function(_, index, value) {
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function(_) {
    return $.FixedSizeListIterator$(this, $.Node);
  },
  contains$1: function(_, element) {
    return $.IterableMixinWorkaround_contains(this, element);
  },
  get$contains: function(receiver) {
    return new $.BoundClosure$i1(this, "contains$1", receiver);
  },
  forEach$1: function(_, f) {
    var t1;
    for (t1 = this.get$iterator(this); t1.moveNext$0();)
      f.call$1(t1.get$current());
    return;
  },
  map$1: function(_, f) {
    return $.MappedListIterable$(this, f, null, null);
  },
  where$1: function(_, f) {
    return $.WhereIterable$(this, f, null);
  },
  every$1: function(_, f) {
    return $.IterableMixinWorkaround_every(this, f);
  },
  toList$1$growable: function(_, growable) {
    var t1 = $.List_List$from(this, growable, $.Node);
    $.setRuntimeTypeInfo(t1, [$.Node]);
    return t1;
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  toSet$0: function(_) {
    var t1 = $.HashSet$($.Node);
    t1.addAll$1(t1, this);
    return t1;
  },
  get$isEmpty: function(_) {
    return this.get$length(this) === 0;
  },
  skip$1: function(_, n) {
    return $.IterableMixinWorkaround_skipList(this, n);
  },
  elementAt$1: function(_, index) {
    return this[index];
  },
  add$1: function(_, value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(_, iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  set$length: function(_, value) {
    throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
  },
  clear$0: function(_) {
    throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
  },
  indexOf$2: function(_, element, start) {
    return $.Lists_indexOf(this, element, start, this.get$length(this));
  },
  indexOf$1: function($receiver, element) {
    return this.indexOf$2($receiver, element, 0);
  },
  get$last: function(_) {
    if (this.get$length(this) > 0)
      return this.$index(this, this.get$length(this) - 1);
    throw $.$$throw($.StateError$("No elements"));
  },
  removeLast$0: function(_) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(_, object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  get$remove: function(receiver) {
    return new $.BoundClosure$i1(this, "remove$1", receiver);
  },
  removeAll$1: function(_, elements) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeMatching$1: function(_, test) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  setRange$4: function(_, start, rangeLength, from, startFrom) {
    throw $.$$throw($.UnsupportedError$("Cannot setRange on immutable List."));
  },
  removeRange$2: function(_, start, rangeLength) {
    throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
  },
  $isList: function() {
    return true;
  },
  $asList: function() {
    return function () { return [$.Node]; };
  },
  $isCollection: function() {
    return true;
  },
  $asCollection: function() {
    return function () { return [$.Node]; };
  },
  $isIterable: function() {
    return true;
  },
  $asIterable: function() {
    return function () { return [$.Node]; };
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  },
  $asJavaScriptIndexingBehavior: function() {
    return null;
  }
});

$.$defineNativeClass("SVGFEColorMatrixElement", {"": "type>,values>"});

$.$defineNativeClass("SVGFETurbulenceElement", {"": "type>"});

$.$defineNativeClass("SVGScriptElement", {"": "type>"});

$.$defineNativeClass("SVGStyleElement", {"": "type>"});

$.$defineNativeClass("SVGElement", {
  get$classes: function() {
    if (this._cssClassSet == null)
      this._cssClassSet = $._AttributeClassSet$(this);
    return this._cssClassSet;
  },
  get$children: function() {
    return $.FilteredElementList$(this);
  },
  set$children: function(value) {
    var children = this.get$children();
    children.clear$0(children);
    children.addAll$1(children, value);
  },
  set$innerHtml: function(svg) {
    var container = $.Element_Element$tag("div");
    container.set$innerHtml("<svg version=\"1.1\">" + $.S(svg) + "</svg>");
    this.set$children($.$$index$as(container.get$children(), 0).get$children());
  },
  get$$$dom_children: function() {
    throw $.$$throw($.UnsupportedError$("Cannot get dom_children on SVG."));
  },
  get$id: function() {
    return this.id;
  }
});

$.$defineNativeClass("SVGException", {
  toString$0: function(_) {
    return this.toString();
  }
});

$.$defineNativeClass("SVGComponentTransferFunctionElement", {"": "type>"});

// 67 dynamic classes.
// 236 classes
// 22 !leaf
(function() {
  var v0_Text = "Text|CDATASection", v1__SVGComponentTransferFunctionElement = "SVGComponentTransferFunctionElement|SVGFEFuncAElement|SVGFEFuncBElement|SVGFEFuncGElement|SVGFEFuncRElement", v2_MediaElement = "HTMLMediaElement|HTMLVideoElement|HTMLAudioElement", v3_SvgElement = [v1__SVGComponentTransferFunctionElement, "SVGElement|SVGStyledElement|SVGAElement|SVGTextContentElement|SVGTextPositioningElement|SVGAltGlyphElement|SVGTSpanElement|SVGTextElement|SVGTRefElement|SVGTextPathElement|SVGCircleElement|SVGClipPathElement|SVGDefsElement|SVGDescElement|SVGEllipseElement|SVGFEBlendElement|SVGFEColorMatrixElement|SVGFEComponentTransferElement|SVGFECompositeElement|SVGFEConvolveMatrixElement|SVGFEDiffuseLightingElement|SVGFEDisplacementMapElement|SVGFEFloodElement|SVGFEGaussianBlurElement|SVGFEImageElement|SVGFEMergeElement|SVGFEMorphologyElement|SVGFEOffsetElement|SVGFESpecularLightingElement|SVGFETileElement|SVGFETurbulenceElement|SVGFilterElement|SVGForeignObjectElement|SVGGElement|SVGImageElement|SVGLineElement|SVGGradientElement|SVGLinearGradientElement|SVGRadialGradientElement|SVGMarkerElement|SVGMaskElement|SVGPathElement|SVGPatternElement|SVGPolygonElement|SVGPolylineElement|SVGRectElement|SVGStopElement|SVGSVGElement|SVGSwitchElement|SVGSymbolElement|SVGTitleElement|SVGUseElement|SVGFEDropShadowElement|SVGGlyphRefElement|SVGMissingGlyphElement|SVGAnimationElement|SVGAnimateElement|SVGAnimateMotionElement|SVGAnimateTransformElement|SVGSetElement|SVGAnimateColorElement|SVGFEDistantLightElement|SVGFEMergeNodeElement|SVGFEPointLightElement|SVGFESpotLightElement|SVGMetadataElement|SVGScriptElement|SVGStyleElement|SVGAltGlyphDefElement|SVGViewElement|SVGAltGlyphItemElement|SVGCursorElement|SVGFontFaceElement|SVGFontFaceFormatElement|SVGFontElement|SVGFontFaceSrcElement|SVGFontFaceUriElement|SVGFontFaceNameElement|SVGGlyphElement|SVGMPathElement|SVGVKernElement|SVGHKernElement"].join("|"), v4_Element = [v2_MediaElement, v3_SvgElement, "Element|HTMLKeygenElement|HTMLLIElement|HTMLLabelElement|HTMLLegendElement|HTMLLinkElement|HTMLMapElement|HTMLMenuElement|HTMLMetaElement|HTMLMeterElement|HTMLModElement|HTMLOListElement|HTMLObjectElement|HTMLOptGroupElement|HTMLOptionElement|HTMLOutputElement|HTMLParagraphElement|HTMLParamElement|HTMLPreElement|HTMLProgressElement|HTMLQuoteElement|HTMLScriptElement|HTMLSelectElement|HTMLShadowElement|HTMLSourceElement|HTMLSpanElement|HTMLStyleElement|HTMLTableCaptionElement|HTMLTableCellElement|HTMLTableColElement|HTMLTableElement|HTMLTableRowElement|HTMLTableSectionElement|HTMLTextAreaElement|HTMLTitleElement|HTMLTrackElement|HTMLUListElement|HTMLUnknownElement|HTMLAppletElement|HTMLBaseFontElement|HTMLDirectoryElement|HTMLFontElement|HTMLFrameElement|HTMLFrameSetElement|HTMLMarqueeElement|HTMLElement|HTMLAnchorElement|HTMLAreaElement|HTMLBRElement|HTMLBaseElement|HTMLBodyElement|HTMLButtonElement|HTMLCanvasElement|HTMLContentElement|HTMLDListElement|HTMLDataListElement|HTMLDetailsElement|HTMLDivElement|HTMLEmbedElement|HTMLFieldSetElement|HTMLFormElement|HTMLHRElement|HTMLHeadElement|HTMLHeadingElement|HTMLHtmlElement|HTMLIFrameElement|HTMLImageElement|HTMLInputElement"].join("|"), v5_DocumentFragment = "DocumentFragment|ShadowRoot", v6_CharacterData = [v0_Text, "CharacterData|Comment"].join("|"), v7_Document = "Document|SVGDocument|HTMLDocument", v8_Node = [v4_Element, v5_DocumentFragment, v6_CharacterData, v7_Document, "Node|Notation|ProcessingInstruction|Attr|DocumentType|EntityReference"].join("|");
  $.dynamicSetMetadata([["Text", v0_Text], ["CharacterData", v6_CharacterData], ["Document", v7_Document], ["DocumentFragment", v5_DocumentFragment], ["HTMLMediaElement", v2_MediaElement], ["SVGComponentTransferFunctionElement", v1__SVGComponentTransferFunctionElement], ["SVGElement", v3_SvgElement], ["Element", v4_Element], ["Event", "Event|UIEvent|KeyboardEvent|MouseEvent|WheelEvent|TextEvent|TouchEvent|CompositionEvent|SVGZoomEvent|FocusEvent|MediaKeyEvent|MediaStreamEvent|MediaStreamTrackEvent|MessageEvent|MutationEvent|OverflowEvent|PageTransitionEvent|PopStateEvent|ProgressEvent|XMLHttpRequestProgressEvent|RTCDataChannelEvent|RTCIceCandidateEvent|RTCDTMFToneChangeEvent|SpeechInputEvent|SpeechRecognitionError|SpeechRecognitionEvent|StorageEvent|TrackEvent|TransitionEvent|WebGLContextEvent|WebKitTransitionEvent|IDBVersionChangeEvent|WebKitAnimationEvent|BeforeLoadEvent|CloseEvent|DeviceOrientationEvent|DeviceMotionEvent|ErrorEvent|AudioProcessingEvent|CustomEvent|OfflineAudioCompletionEvent|HashChangeEvent"], ["Node", v8_Node], ["EventTarget", [v8_Node, "EventTarget|DOMWindow"].join("|")], ["HTMLCollection", "HTMLCollection|HTMLFormControlsCollection|HTMLOptionsCollection"], ["NodeList", "NodeList|RadioNodeList"], ["Uint8Array", "Uint8Array|Uint8ClampedArray"]]);
})();

$.main.call$0 = $.main;
// BEGIN invoke [main].
if (typeof document !== "undefined" && document.readyState !== "complete") {
  document.addEventListener("readystatechange", function () {
    if (document.readyState == "complete") {
      if (typeof dartMainRunner === "function") {
        dartMainRunner(function() { $.startRootIsolate($.main); });
      } else {
        $.startRootIsolate($.main);
      }
    }
  }, false);
} else {
  if (typeof dartMainRunner === "function") {
    dartMainRunner(function() { $.startRootIsolate($.main); });
  } else {
    $.startRootIsolate($.main);
  }
}
// END invoke [main].
function init() {
  Isolate.$isolateProperties = {};
  function generateAccessor(field, prototype) {
    var len = field.length;
    var lastCharCode = field.charCodeAt(len - 1);
    var needsAccessor = (lastCharCode & 63) >= 60;
    if (needsAccessor) {
      var needsGetter = (lastCharCode & 3) > 0;
      var needsSetter = (lastCharCode & 2) == 0;
      var renaming = (lastCharCode & 64) != 0;
      var accessorName = field = field.substring(0, len - 1);
      if (renaming) {
        var divider = field.indexOf(":");
        accessorName = field.substring(0, divider);
        field = field.substring(divider + 1);
      }
      if (needsGetter) {
        var getterString = "return this." + field;
        prototype["get$" + accessorName] = new Function(getterString);
      }
      if (needsSetter) {
        var setterString = "this." + field + " = v";
        prototype["set$" + accessorName] = new Function("v", setterString);
      }
    }
    return field;
  }
  Isolate.$isolateProperties.$generateAccessor = generateAccessor;
  function defineClass(cls, fields, prototype) {
    var constructor;
    if (typeof fields == "function") {
      constructor = fields;
    } else {
      var str = "function " + cls + "(";
      var body = "";
      for (var i = 0; i < fields.length; i++) {
        if (i != 0)
          str += ", ";
        var field = fields[i];
        field = generateAccessor(field, prototype);
        str += field;
        body += "this." + field + " = " + field + ";\n";
      }
      str += ") {" + body + "}\nreturn " + cls;
      constructor = new Function(str)();
    }
    constructor.prototype = prototype;
    constructor.builtin$cls = cls;
    return constructor;
  }
  var supportsProto = false;
  var tmp = defineClass("c", ["f?"], {}).prototype;
  if (tmp.__proto__) {
    tmp.__proto__ = {};
    if (typeof tmp.get$f != "undefined")
      supportsProto = true;
  }
  Isolate.$finishClasses = function(collectedClasses, isolateProperties, existingIsolateProperties) {
    var pendingClasses = {};
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    for (var cls in collectedClasses) {
      if (hasOwnProperty.call(collectedClasses, cls)) {
        var desc = collectedClasses[cls];
        var fields = desc[""], supr;
        if (typeof fields == "string") {
          var s = fields.split(";");
          supr = s[0];
          fields = s[1] == "" ? [] : s[1].split(",");
        } else {
          supr = desc.super;
        }
        isolateProperties[cls] = defineClass(cls, fields, desc);
        if (supr)
          pendingClasses[cls] = supr;
      }
    }
    var finishedClasses = {};
    function finishClass(cls) {
      var hasOwnProperty = Object.prototype.hasOwnProperty;
      if (hasOwnProperty.call(finishedClasses, cls))
        return;
      finishedClasses[cls] = true;
      var superclass = pendingClasses[cls];
      if (!superclass)
        return;
      finishClass(superclass);
      var constructor = isolateProperties[cls];
      var superConstructor = isolateProperties[superclass];
      if (!superConstructor)
        superConstructor = existingIsolateProperties[superclass];
      var prototype = constructor.prototype;
      if (supportsProto) {
        prototype.__proto__ = superConstructor.prototype;
        prototype.constructor = constructor;
      } else {
        function tmp() {
        }
        tmp.prototype = superConstructor.prototype;
        var newPrototype = new tmp();
        constructor.prototype = newPrototype;
        newPrototype.constructor = constructor;
        for (var member in prototype) {
          if (!member)
            continue;
          if (hasOwnProperty.call(prototype, member)) {
            newPrototype[member] = prototype[member];
          }
        }
      }
    }
    for (var cls in pendingClasses)
      finishClass(cls);
  };
  Isolate.$lazy = function(prototype, staticName, fieldName, getterName, lazyValue) {
    var getter = new Function("{ return $." + fieldName + ";}");
    var sentinelUndefined = {};
    var sentinelInProgress = {};
    prototype[fieldName] = sentinelUndefined;
    prototype[getterName] = function() {
      var result = $[fieldName];
      try {
        if (result === sentinelUndefined) {
          $[fieldName] = sentinelInProgress;
          try {
            result = $[fieldName] = lazyValue();
          } finally {
            if (result === sentinelUndefined) {
              if ($[fieldName] === sentinelInProgress) {
                $[fieldName] = null;
              }
            }
          }
        } else {
          if (result === sentinelInProgress)
            $.throwCyclicInit(staticName);
        }
        return result;
      } finally {
        $[getterName] = getter;
      }
    };
  };
  Isolate.$finishIsolateConstructor = function(oldIsolate) {
    var isolateProperties = oldIsolate.$isolateProperties;
    isolateProperties.$currentScript = typeof document == "object" ? document.currentScript || document.scripts[document.scripts.length - 1] : null;
    var isolatePrototype = oldIsolate.prototype;
    var str = "{\n";
    str += "var properties = Isolate.$isolateProperties;\n";
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    for (var staticName in isolateProperties) {
      if (hasOwnProperty.call(isolateProperties, staticName)) {
        str += "this." + staticName + "= properties." + staticName + ";\n";
      }
    }
    str += "}\n";
    var newIsolate = new Function(str);
    newIsolate.prototype = isolatePrototype;
    isolatePrototype.constructor = newIsolate;
    newIsolate.$isolateProperties = isolateProperties;
    newIsolate.$finishClasses = oldIsolate.$finishClasses;
    return newIsolate;
  };
}
//@ sourceMappingURL=index.html_bootstrap.dart.js.map
