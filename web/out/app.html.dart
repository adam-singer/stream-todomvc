// Auto-generated from app.html.
// DO NOT EDIT.

library todo_app;

import 'dart:html' as autogenerated;
import 'dart:svg' as autogenerated_svg;
import 'package:web_ui/web_ui.dart' as autogenerated;
import 'package:web_ui/observe/observable.dart' as __observe;
import 'todo_row.html.dart';
import 'router_options.html.dart';
import 'dart:html';
import 'model.dart';
import 'package:web_ui/web_ui.dart';



class TodoApp extends WebComponent {
  /** Autogenerated from the template. */

  /** CSS class constants. */
  static Map<String, String> _css = {};

  /**
   * Shadow root for this component. We use 'var' to allow simulating shadow DOM
   * on browsers that don't support this feature.
   */
  var _root;
  static final __html1 = new autogenerated.Element.tag('template'), __html2 = new autogenerated.Element.tag('todo-row'), __html3 = new autogenerated.Element.html('<footer id="footer">\n        <span id="todo-count"><strong id="__e-6"></strong></span>\n        <router-options id="filters">\n          <li> <a href="#/">All</a> </li>\n          <li> <a href="#/active">Active</a> </li>\n          <li> <a href="#/completed">Completed</a> </li>\n        </router-options>\n        <template id="__e-8"></template>\n      </footer>'), __html4 = new autogenerated.Element.html('<button id="clear-completed"></button>'), __shadowTemplate = new autogenerated.DocumentFragment.html('''
  <section id="todoapp">
    <header id="header">
      <h1 class="title">todos</h1>
      <form id="__e-1">
        <input id="new-todo" placeholder="What needs to be done?" autofocus="">
      </form>
    </header>
    <section id="main">
      <input id="toggle-all" type="checkbox">
      <label for="toggle-all"></label>
      <ul id="todo-list">
        <template id="__e-4"></template>
      </ul>
    </section>
    <template id="__e-9"></template>
  </section>
  <footer id="info">
    <p>Double-click to edit a todo.</p>
    <p>Credits: the <a href="http://www.dartlang.org">Dart</a> team.</p>
    <p>
      Learn more about
      <a href="https://www.dartlang.org/articles/dart-web-components/">Dart + Web Components</a>
      or
      <a href="https://github.com/dart-lang/web-ui/tree/master/example/todomvc">view the source</a>.
    </p>
    <p>Part of <a href="http://todomvc.com">TodoMVC</a>.</p>
  </footer>
''');
  autogenerated.Element __e4, __e9, __header, __info, __main, __todoapp;
  autogenerated.FormElement __e1;
  autogenerated.InputElement __newTodo, __toggleAll;
  autogenerated.Template __t;
  autogenerated.UListElement __todoList;

  TodoApp.forElement(e) : super.forElement(e);

  void created_autogenerated() {
    _root = createShadowRoot();
    __t = new autogenerated.Template(_root);
    if (_root is autogenerated.ShadowRoot) _root.applyAuthorStyles = true;
    _root.nodes.add(__shadowTemplate.clone(true));
    __todoapp = _root.query('#todoapp');
    __header = __todoapp.query('#header');
    __e1 = __header.query('#__e-1');
    __newTodo = __e1.query('#new-todo');
    __t.listen(__newTodo.onChange, ($event) { addTodo($event); });
    __t.listen(__e1.onSubmit, ($event) { addTodo($event); });
    __main = __todoapp.query('#main');
    __toggleAll = __main.query('#toggle-all');
    __t.listen(__toggleAll.onChange, ($event) { app.allChecked = __toggleAll.checked; });
    __t.oneWayBind(() => app.allChecked, (e) { __toggleAll.checked = e; }, false, false);
    __todoList = __main.query('#todo-list');
    __e4 = __todoList.query('#__e-4');
    __t.loop(__e4, () => app.todos, (x, __t) {
      var __e3;
      __e3 = __html1.clone(true);
      __t.conditional(__e3, () => viewModel.isVisible(x), (__t) {
        var __e2;
        __e2 = __html2.clone(true);
        __t.oneWayBind(() => x, (e) { __e2.xtag.todo = e; }, false, false);
        __t.component(new TodoRow.forElement(__e2));
      __t.addAll([new autogenerated.Text('\n            '),
          __e2,
          new autogenerated.Text('\n          ')]);
      });

    __t.addAll([new autogenerated.Text('\n          '),
        __e3,
        new autogenerated.Text('\n        ')]);
    });
    __e9 = __todoapp.query('#__e-9');
    __t.conditional(__e9, () => app.todos.length > 0, (__t) {
      var __e6, __e8, __filters, __footer, __todoCount;
      __footer = __html3.clone(true);
      __todoCount = __footer.query('#todo-count');
      __e6 = __todoCount.query('#__e-6');
      var __binding5 = __t.contentBind(() => app.remaining, false);
      __e6.nodes.add(__binding5);
      __filters = __footer.query('#filters');
      __t.component(new RouterOptions.forElement(__filters));
      __e8 = __footer.query('#__e-8');
      __t.conditional(__e8, () => app.doneCount > 0, (__t) {
        var __clearCompleted;
        __clearCompleted = __html4.clone(true);
        var __binding7 = __t.contentBind(() => app.doneCount, false);
        __clearCompleted.nodes.addAll([new autogenerated.Text('\n            Clear completed ('),
            __binding7,
            new autogenerated.Text(')\n          ')]);
        __t.listen(__clearCompleted.onClick, ($event) { app.clearDone(); });
      __t.addAll([new autogenerated.Text('\n          '),
          __clearCompleted,
          new autogenerated.Text('\n        ')]);
      });

    __t.addAll([new autogenerated.Text('\n      '),
        __footer,
        new autogenerated.Text('\n    ')]);
    });

    __info = _root.query('#info');
    __t.create();
  }

  void inserted_autogenerated() {
    __t.insert();
  }

  void removed_autogenerated() {
    __t.remove();
    __t = __todoapp = __header = __e1 = __newTodo = __main = __toggleAll = __todoList = __e4 = __e9 = __info = null;
  }

  void composeChildren() {
    super.composeChildren();
    if (_root is! autogenerated.ShadowRoot) _root = this;
  }

  /** Original code from the component. */

  void addTodo(Event e) {
    e.preventDefault(); // don't submit the form
    var input = query('#new-todo');
    if (input.value == '') return;
    app.todos.add(new Todo(input.value));
    input.value = '';
  }

  // For testing purposes, we expose the Shadow DOM.
  get shadowRoot => _root;
}

//@ sourceMappingURL=app.html.dart.map